{
  "nodes": [
    {
      "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
      "properties": {
        "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
        "document_metadata": {
          "source": "data/2024_llms.html"
        },
        "headlines": [
          "The GPT-4 barrier was comprehensively broken",
          "Some of those GPT-4 models run on my laptop",
          "LLM prices crashed, thanks to competition and increased efficiency",
          "Multimodal vision is common, audio and video are starting to emerge",
          "Prompt driven app generation is a commodity already"
        ],
        "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
        "summary_embedding": [
          -0.014193889684975147,
          0.000919203506782651,
          0.006219365634024143,
          -0.02833227999508381,
          -0.0010067879920825362,
          0.020049042999744415,
          -0.003864123485982418,
          0.010829257778823376,
          -0.03682364150881767,
          -0.04609198495745659,
          0.0281657837331295,
          0.029636509716510773,
          -0.01572011411190033,
          -0.01111369114369154,
          0.0074854386039078236,
          0.01843957044184208,
          0.021089650690555573,
          0.0166081003844738,
          0.012903536669909954,
          -0.006240177899599075,
          -0.014665632508695126,
          -0.0052134450525045395,
          -0.013777647167444229,
          -0.023378988727927208,
          0.007214880548417568,
          -0.0017135341186076403,
          0.02454446814954281,
          -0.0394320972263813,
          -0.018425695598125458,
          0.019369179382920265,
          0.010121644474565983,
          0.0006668561254628003,
          -0.0392378494143486,
          0.0018418757244944572,
          -0.01669134944677353,
          -0.008678669109940529,
          0.014131453819572926,
          -0.00965684000402689,
          0.016288980841636658,
          -0.02319861575961113,
          0.008387298323214054,
          0.015470368787646294,
          0.018855812028050423,
          -0.02534920535981655,
          -0.019674424082040787,
          0.017634833231568336,
          0.01756545901298523,
          -0.0026969085447490215,
          -0.028179658576846123,
          0.0066009219735860825,
          0.01513737440109253,
          0.037822622805833817,
          -0.007017164956778288,
          -0.012258359231054783,
          -0.008095928467810154,
          0.016580350697040558,
          -0.005033073015511036,
          0.010121644474565983,
          0.017024343833327293,
          -0.006337301339954138,
          0.0006339035462588072,
          0.0015045454492792487,
          -0.01499862689524889,
          0.03449267894029617,
          -0.019924169406294823,
          -0.009448718279600143,
          -0.02786053903400898,
          0.022865621373057365,
          0.021700140088796616,
          -0.015844987705349922,
          0.0038294366095215082,
          0.01154380850493908,
          0.014388136565685272,
          -0.0164138525724411,
          0.009060224518179893,
          0.0023743200581520796,
          -0.0018366726581007242,
          -0.010371390730142593,
          -0.03482567146420479,
          0.015844987705349922,
          0.011495247483253479,
          -0.010128581896424294,
          0.007714372128248215,
          0.022865621373057365,
          0.017801329493522644,
          0.011516059748828411,
          0.014471385627985,
          -0.011287125758826733,
          -0.015387119725346565,
          -0.011002692393958569,
          -0.005216913763433695,
          0.0013987502316012979,
          0.018758689984679222,
          0.010093895718455315,
          -0.006979009602218866,
          -0.00047130859456956387,
          0.004661922808736563,
          0.009719276800751686,
          -0.009060224518179893,
          -0.029969504103064537,
          -0.007041445933282375,
          -0.0052238511852920055,
          -0.03773937374353409,
          -0.009615215472877026,
          -0.022782372310757637,
          0.001269541447982192,
          0.01353483833372593,
          0.01072519738227129,
          0.01043382752686739,
          0.014388136565685272,
          -0.016164107248187065,
          0.01659422554075718,
          0.010086958296597004,
          -0.01816207356750965,
          -0.009587465785443783,
          -0.010024521499872208,
          0.005185695365071297,
          -0.02029878832399845,
          0.004509300459176302,
          0.005692124366760254,
          0.036157652735710144,
          0.006080618128180504,
          0.02107577584683895,
          0.0034374743700027466,
          0.013354466296732426,
          -0.0009495546109974384,
          -0.0034843017347157,
          -0.003770468756556511,
          -0.01140506099909544,
          0.007984930649399757,
          -0.00776293408125639,
          0.006972072180360556,
          0.009303033351898193,
          0.004148556385189295,
          -0.03260571137070656,
          0.02669505774974823,
          -0.011640932410955429,
          -0.009074099361896515,
          -0.012209798209369183,
          -0.007714372128248215,
          0.0020777469035238028,
          0.024530593305826187,
          -0.006670295726507902,
          0.013375278562307358,
          -0.006874948740005493,
          0.03008050099015236,
          0.004526644013822079,
          0.006791700143367052,
          0.004571736790239811,
          0.004047964233905077,
          0.004249148536473513,
          -0.029553260654211044,
          -0.016705222427845,
          0.020035168156027794,
          0.018106576055288315,
          0.001052748179063201,
          0.012993722222745419,
          0.03191197291016579,
          -0.029192516580224037,
          -0.017329588532447815,
          -0.013243468478322029,
          0.0033264760859310627,
          -0.0013233062345534563,
          0.010461577214300632,
          0.015803363174200058,
          0.027055801823735237,
          0.023600984364748,
          0.0018193292198702693,
          -0.002894623903557658,
          -0.009337720461189747,
          -0.010995754972100258,
          0.024058852344751358,
          -0.04226255044341087,
          0.011432810686528683,
          -0.016843970865011215,
          0.014832129701972008,
          0.019660549238324165,
          -0.005352192558348179,
          -0.008505234494805336,
          -0.034215182065963745,
          0.005622750613838434,
          0.011065129190683365,
          -0.005473596975207329,
          0.0007102147792465985,
          -0.0075478749349713326,
          -0.004405239596962929,
          0.017260214313864708,
          0.0005016596405766904,
          0.002684768056496978,
          -0.012965972535312176,
          0.015886612236499786,
          0.004870044533163309,
          0.0027870945632457733,
          -0.023434486240148544,
          -0.6504492163658142,
          -0.020049042999744415,
          0.01814819872379303,
          -0.011065129190683365,
          -0.0013493214501067996,
          0.004745171405375004,
          -0.005980025976896286,
          0.007256504613906145,
          -0.0056158131919801235,
          0.03746188059449196,
          -0.012931285426020622,
          0.005789247807115316,
          -0.017898453399538994,
          -0.004987979773432016,
          0.009594403207302094,
          -0.007575624622404575,
          -0.002133245812729001,
          -0.023059867322444916,
          0.0013718679547309875,
          0.019480178132653236,
          -0.012487293221056461,
          0.01706596650183201,
          -0.011668682098388672,
          -0.00034231660538353026,
          -0.028804022818803787,
          0.0012374561047181487,
          0.008366486057639122,
          0.014790505170822144,
          -0.006365051027387381,
          0.00523772556334734,
          -0.010156331583857536,
          0.004651516675949097,
          -0.012369357980787754,
          -0.0035658159758895636,
          0.048755943775177,
          -0.0023153522051870823,
          -0.0184534452855587,
          0.016732972115278244,
          0.006670295726507902,
          0.00922672264277935,
          -0.03735088184475899,
          -0.005209976341575384,
          -0.013070033863186836,
          0.021478144451975822,
          -0.003819030476734042,
          0.032383713871240616,
          0.022366128861904144,
          0.0070622581988573074,
          -0.019646674394607544,
          -0.010142456740140915,
          0.00444339495152235,
          0.02250487729907036,
          0.0033091327641159296,
          0.003548472421243787,
          -0.0013102985685691237,
          0.02059015817940235,
          0.025404704734683037,
          -0.011613182723522186,
          0.011183064430952072,
          -0.008144490420818329,
          0.0027090488001704216,
          -0.01096800621598959,
          -0.023614859208464622,
          -0.015803363174200058,
          -0.03427068144083023,
          0.012535855174064636,
          -0.002431553555652499,
          0.001369266421534121,
          0.016080858185887337,
          -0.031301479786634445,
          -0.006777825299650431,
          0.03662939369678497,
          0.0085954200476408,
          -0.0026466124691069126,
          -0.009476467967033386,
          0.0039508407935500145,
          -0.00022394745610654354,
          -0.015761738643050194,
          0.0021124337799847126,
          0.007443814072757959,
          0.015414869412779808,
          -0.01727408915758133,
          0.010295079089701176,
          -0.010295079089701176,
          0.035186417400836945,
          -0.01072519738227129,
          0.009150411002337933,
          -0.0016554335597902536,
          -0.012521980330348015,
          -0.0049567618407309055,
          0.013514026068150997,
          0.028276782482862473,
          -0.015359370969235897,
          -0.04728521779179573,
          -0.007693559862673283,
          0.01329896692186594,
          -0.006316489074379206,
          0.01971604861319065,
          0.009212847799062729,
          -0.011079004034399986,
          -0.002821781439706683,
          -0.010794571600854397,
          0.030746491625905037,
          0.02844327874481678,
          0.02833227999508381,
          0.02272687293589115,
          -0.008748042397201061,
          0.013243468478322029,
          0.01246648095548153,
          -0.021797263994812965,
          0.0022581189405173063,
          0.012750913389027119,
          0.0004587346047628671,
          -0.022269006818532944,
          -0.01474888063967228,
          -0.0263204388320446,
          0.002065606415271759,
          -0.006430956069380045,
          -0.0034877704456448555,
          -0.023143116384744644,
          0.012993722222745419,
          0.0035068481229245663,
          0.025376955047249794,
          -0.006101430393755436,
          -0.006777825299650431,
          0.014693381264805794,
          0.0078045581467449665,
          -0.0037774061784148216,
          -0.011148378252983093,
          0.022893371060490608,
          -0.011897615157067776,
          -0.02902601845562458,
          0.0257376991212368,
          -0.026042943820357323,
          0.034603677690029144,
          0.01445751078426838,
          0.04032008349895477,
          -0.004533580970019102,
          0.015997610986232758,
          0.00026600537239573896,
          -0.03124598227441311,
          -0.003898810362443328,
          -0.0030472464859485626,
          0.004800670314580202,
          -0.0402090847492218,
          -0.024003352969884872,
          -0.013853957876563072,
          0.0040306206792593,
          -0.00032410596031695604,
          -0.033743441104888916,
          -0.01544261910021305,
          -0.014665632508695126,
          -0.011384248733520508,
          0.0249607115983963,
          -0.001771634677425027,
          -0.0062124282121658325,
          -0.010572575032711029,
          -0.028387779369950294,
          -0.0139372069388628,
          -0.03493667021393776,
          0.007728246971964836,
          0.0001399400644004345,
          0.00015002094733063132,
          0.01451300922781229,
          0.01601148396730423,
          -0.026861555874347687,
          -0.00018113078840542585,
          0.02096477709710598,
          -0.03601890429854393,
          -0.020506910979747772,
          0.00336289731785655,
          -0.041596561670303345,
          0.003631721017882228,
          0.01971604861319065,
          -0.016913345083594322,
          0.011987801641225815,
          0.002728126710280776,
          0.002327492693439126,
          0.014402011409401894,
          -0.010239580646157265,
          0.012632978148758411,
          0.025002336129546165,
          0.013618087396025658,
          -0.009074099361896515,
          0.024586092680692673,
          0.02446121908724308,
          0.047618210315704346,
          0.013278154656291008,
          -0.0057580298744142056,
          0.012293046340346336,
          0.021811138838529587,
          0.03171772509813309,
          -0.01422163937240839,
          -0.0001184775319416076,
          -0.010940256528556347,
          0.020118417218327522,
          -0.0015270919539034367,
          -0.0011490044416859746,
          0.017551584169268608,
          0.014089829288423061,
          0.009101849049329758,
          0.02641756273806095,
          0.011092878878116608,
          -0.014651757664978504,
          0.010385265573859215,
          -0.018078826367855072,
          0.004308116156607866,
          -0.02397560328245163,
          -0.0027714853640645742,
          0.01960504986345768,
          0.008456672541797161,
          0.0010432093404233456,
          -0.005647031590342522,
          -0.028415529057383537,
          0.0017967827152460814,
          0.033743441104888916,
          0.0016337542328983545,
          0.014402011409401894,
          -0.021145150065422058,
          0.0012443934101611376,
          -0.004700078628957272,
          0.005650500301271677,
          0.017648708075284958,
          -0.007846182212233543,
          -0.015345496125519276,
          0.008914539590477943,
          -0.02350386045873165,
          0.02250487729907036,
          0.013222656212747097,
          -0.02988625504076481,
          0.004478082060813904,
          0.01728796400129795,
          0.023545484989881516,
          0.021922137588262558,
          0.008165302686393261,
          0.0031929314136505127,
          0.01835632137954235,
          -0.0021922136656939983,
          0.032577961683273315,
          -0.0028495308943092823,
          -0.0128688495606184,
          0.0065523600205779076,
          0.005151008255779743,
          -0.007423002272844315,
          0.02292112074792385,
          -0.019299805164337158,
          0.03504766896367073,
          -0.008671731688082218,
          -0.026764431968331337,
          -0.0037670000456273556,
          -0.027929913252592087,
          0.006496861111372709,
          -0.01620573177933693,
          0.0002553825033828616,
          0.011862928979098797,
          -0.018397945910692215,
          0.015969861298799515,
          0.004998385906219482,
          0.02211638353765011,
          0.01490150298923254,
          -0.009622152894735336,
          0.005667843855917454,
          0.011592370457947254,
          -0.010933319106698036,
          0.005640094168484211,
          -0.011037379503250122,
          -0.0033143358305096626,
          -0.004200586583465338,
          -0.002232103608548641,
          -0.008269363082945347,
          -0.009864961728453636,
          -0.02165851555764675,
          0.01112062856554985,
          -0.03840536251664162,
          0.014402011409401894,
          0.006583578418940306,
          0.004627235699445009,
          0.007901681587100029,
          0.0134030282497406,
          0.023226365447044373,
          -0.0032657741103321314,
          -0.04190180450677872,
          0.0036490645725280046,
          -0.00737444031983614,
          -0.011994739063084126,
          -0.03754512965679169,
          -0.044510263949632645,
          0.012952097691595554,
          -0.010086958296597004,
          -0.014887628145515919,
          -0.0024645060766488314,
          0.009962084703147411,
          -0.009920461103320122,
          0.013236531056463718,
          -0.0014386402908712626,
          0.014013517647981644,
          0.023448361083865166,
          -0.011377311311662197,
          -0.013437715359032154,
          -0.020326538011431694,
          0.0012487292988225818,
          0.012008613906800747,
          -0.0054909405298531055,
          -0.02766629122197628,
          0.03951534628868103,
          -0.01863381639122963,
          -0.03346594423055649,
          0.011620120145380497,
          -0.0071455067954957485,
          -0.020409787073731422,
          -0.004949824418872595,
          0.005830872338265181,
          0.0006885354523546994,
          0.007832307368516922,
          0.014263263903558254,
          0.018467318266630173,
          0.00662520295009017,
          0.004148556385189295,
          0.01592823676764965,
          0.021505894139409065,
          0.0007553077884949744,
          -0.02991400472819805,
          0.00495329312980175,
          0.02156139351427555,
          0.06887435913085938,
          0.020243288949131966,
          -0.010121644474565983,
          0.016247356310486794,
          -0.017731957137584686,
          -0.0083040501922369,
          -0.028179658576846123,
          -0.0068784174509346485,
          0.010884757153689861,
          0.020021293312311172,
          -0.008817416615784168,
          -0.0027315954212099314,
          0.01864769123494625,
          -0.008331799879670143,
          0.0390436016023159,
          0.010024521499872208,
          2.6591051209834404e-06,
          -0.033937688916921616,
          -0.018495067954063416,
          -0.02522433176636696,
          0.00551175232976675,
          -0.011800492182374,
          0.015165124088525772,
          0.021825013682246208,
          0.004249148536473513,
          -0.019938044250011444,
          0.031606726348400116,
          0.018564442172646523,
          -0.014415886253118515,
          -0.016830096021294594,
          0.002604988170787692,
          -0.0001792880502762273,
          0.004859638400375843,
          0.01178661733865738,
          -0.0028703431598842144,
          0.022047009319067,
          0.02483583800494671,
          -0.01139812357723713,
          0.016150232404470444,
          0.004408708307892084,
          0.026153942570090294,
          0.021381020545959473,
          0.0048041390255093575,
          -0.01154380850493908,
          0.0045578619465231895,
          -0.01931368000805378,
          0.012126549147069454,
          0.040736325085163116,
          0.0023899292573332787,
          -0.030441245064139366,
          0.017412835732102394,
          0.0061673354357481,
          -0.02930351532995701,
          0.008893727324903011,
          0.0163167305290699,
          0.020354287698864937,
          0.011620120145380497,
          -0.0004264323797542602,
          -0.01125243864953518,
          -0.010503200814127922,
          -0.016330605372786522,
          -0.028887271881103516,
          -0.009289158508181572,
          -0.021769514307379723,
          -0.019147183746099472,
          -0.007971055805683136,
          -0.011772742494940758,
          0.016705222427845,
          -0.03288320451974869,
          0.021117400377988815,
          0.014402011409401894,
          -0.027402671054005623,
          -0.05544358119368553,
          -0.0045474558137357235,
          0.012431793846189976,
          -0.011210814118385315,
          0.016094733029603958,
          -0.013201843947172165,
          -0.01043382752686739,
          0.005591532215476036,
          -0.0030715272296220064,
          -0.011349561624228954,
          -0.012202860787510872,
          -0.025765448808670044,
          0.009192035533487797,
          -0.010919444262981415,
          -0.03687914088368416,
          -0.01223060954362154,
          -0.020340412855148315,
          0.02348998561501503,
          0.01004533376544714,
          -0.013971894048154354,
          0.0008316190214827657,
          0.010274267755448818,
          -0.009212847799062729,
          0.0115091223269701,
          0.025848696008324623,
          0.017232464626431465,
          0.0031755880918353796,
          -0.030746491625905037,
          -0.01544261910021305,
          -0.022685248404741287,
          -0.028179658576846123,
          -0.021478144451975822,
          0.016261231154203415,
          0.007090007420629263,
          0.023656483739614487,
          0.017551584169268608,
          0.007901681587100029,
          -0.012577478773891926,
          0.007110819686204195,
          -0.0036351897288113832,
          0.012688477523624897,
          -0.008928414434194565,
          0.01499862689524889,
          0.009316908195614815,
          0.023628734052181244,
          -0.0003347288293298334,
          0.013139407150447369,
          -0.020548535510897636,
          -0.024322472512722015,
          -0.0384608618915081,
          0.030052753165364265,
          -0.0006035525002516806,
          -0.013847020454704762,
          0.019369179382920265,
          0.020701156929135323,
          0.0066737644374370575,
          -0.04833969846367836,
          -0.000462203286588192,
          -0.02250487729907036,
          0.03504766896367073,
          0.002089887158945203,
          -0.016288980841636658,
          -0.02310149185359478,
          -0.0038884044624865055,
          -0.01727408915758133,
          -0.0001881765783764422,
          -0.03163447603583336,
          -0.0022754622623324394,
          0.007638060953468084,
          0.015900487080216408,
          -0.015886612236499786,
          -0.019743798300623894,
          0.013715210370719433,
          -0.02397560328245163,
          -0.011072066612541676,
          0.005425035022199154,
          0.029164766892790794,
          0.041874054819345474,
          -0.023156991228461266,
          0.012251421809196472,
          -0.036351896822452545,
          -0.015262247063219547,
          0.0027021116111427546,
          -0.026556309312582016,
          0.011217751540243626,
          -0.013222656212747097,
          0.031800974160432816,
          0.009011663496494293,
          0.03990383818745613,
          -0.02115902490913868,
          0.013860895298421383,
          0.013354466296732426,
          -0.002244244096800685,
          -0.02533533051609993,
          0.0015400995034724474,
          0.007575624622404575,
          -0.01621960662305355,
          -0.010302016511559486,
          -0.000517702370416373,
          -0.002433287911117077,
          0.02913701720535755,
          0.0012912207748740911,
          0.0115576833486557,
          -0.0005276748561300337,
          -0.011349561624228954,
          -0.00019283762958366424,
          -0.01431876327842474,
          -0.033160701394081116,
          -0.01881418749690056,
          -0.0051440708339214325,
          0.0015721848467364907,
          -0.004058370366692543,
          -0.018425695598125458,
          -0.011897615157067776,
          0.014804380014538765,
          0.013729085214436054,
          0.010773759335279465,
          -0.003982059191912413,
          0.024780340492725372,
          0.007582562044262886,
          -0.003418396459892392,
          0.024044977501034737,
          0.008872915990650654,
          -0.03293870389461517,
          -0.012917411513626575,
          -0.04095832258462906,
          0.005355661269277334,
          0.01727408915758133,
          -0.015345496125519276,
          0.010912506841123104,
          0.02115902490913868,
          -0.022768497467041016,
          0.017912328243255615,
          0.0034114590380340815,
          0.0035935654304921627,
          -0.009427906014025211,
          -0.023628734052181244,
          -0.034603677690029144,
          0.003562347264960408,
          -0.02736104652285576,
          -0.007152444217354059,
          -0.013326716609299183,
          -0.016580350697040558,
          0.0007314605172723532,
          0.0013129001017659903,
          0.024974586442112923,
          -0.02863752655684948,
          -0.024697091430425644,
          0.042068302631378174,
          0.010510138235986233,
          0.02813803404569626,
          -0.011987801641225815,
          0.009018600918352604,
          0.008026554249227047,
          0.0010987083660438657,
          -0.019161058589816093,
          0.019660549238324165,
          0.016719097271561623,
          -0.00689229229465127,
          0.018286947160959244,
          0.015969861298799515,
          -0.01222367212176323,
          -0.004870044533163309,
          0.014929252676665783,
          0.015775613486766815,
          -0.017731957137584686,
          -0.04845069721341133,
          0.011751930229365826,
          0.015789488330483437,
          -0.0064691114239394665,
          -0.021200649440288544,
          -0.03174547478556633,
          -0.022962745279073715,
          0.0147627554833889,
          -0.009670714847743511,
          0.017149215564131737,
          -0.005910652223974466,
          -0.00752012524753809,
          0.015303871594369411,
          0.0048249512910842896,
          0.020839905366301537,
          -0.010364453308284283,
          -0.002800969174131751,
          -0.0030420434195548296,
          0.021214524284005165,
          -0.015095749869942665,
          0.004922074731439352,
          0.007423002272844315,
          -0.0049359495751559734,
          0.020173916593194008,
          0.008553795516490936,
          0.011273250915110111,
          -0.007367502897977829,
          0.012910474091768265,
          0.006972072180360556,
          -0.007194068282842636,
          -0.005466659553349018,
          0.027707915753126144,
          -0.020146166905760765,
          -0.006677233148366213,
          0.0015600444748997688,
          -0.009233659133315086,
          0.00722875539213419,
          -0.024017227813601494,
          -0.012959035113453865,
          -0.0012287843273952603,
          0.0024593030102550983,
          0.007214880548417568,
          0.019383054226636887,
          0.009254471398890018,
          -0.00460989261046052,
          0.008768854662775993,
          -0.0034669581800699234,
          -0.0328277051448822,
          0.00555684557184577,
          -0.002783625852316618,
          0.020853780210018158,
          -0.0328277051448822,
          0.0011984332231804729,
          0.016774596646428108,
          -0.008234675973653793,
          0.00630608294159174,
          0.001174152479507029,
          -0.01775970496237278,
          0.0028634057380259037,
          0.02428084798157215,
          -0.029359014704823494,
          0.014526884071528912,
          0.016705222427845,
          -0.0071455067954957485,
          -0.001681448658928275,
          0.018411820754408836,
          0.0019910295959562063,
          -0.002551223384216428,
          0.015622991137206554,
          -0.0231153666973114,
          -0.024891337379813194,
          -0.004571736790239811,
          -0.016677474603056908,
          -0.008366486057639122,
          -0.0021089650690555573,
          0.013853957876563072,
          0.01261216588318348,
          -0.01639997772872448,
          0.0023448362480849028,
          -0.01824532262980938,
          0.007554812356829643,
          0.017509959638118744,
          -0.007894744165241718,
          -0.006222834344953299,
          0.022449377924203873,
          -0.024710966274142265,
          0.0048873876221477985,
          -0.011814367026090622,
          0.00844279769808054,
          -0.020992526784539223,
          -0.04958842694759369,
          0.0017282760236412287,
          0.023267989978194237,
          -0.0006074548000469804,
          0.006153460592031479,
          -0.008789666928350925,
          -0.02269912324845791,
          0.0032345557119697332,
          -0.0027246579993516207,
          0.018384071066975594,
          -0.003196400124579668,
          0.013264280743896961,
          0.011002692393958569,
          0.016954969614744186,
          0.03057999350130558,
          0.008532983250916004,
          -0.01737121306359768,
          -0.02213025838136673,
          -0.012487293221056461,
          -0.012549730017781258,
          -0.03546391427516937,
          -0.015664614737033844,
          -0.020617907866835594,
          0.04143006354570389,
          -0.00422139884904027,
          -0.01835632137954235,
          -0.006632140371948481,
          -0.003430536948144436,
          -0.04032008349895477,
          -0.02454446814954281,
          -0.0013683992438018322,
          0.014027392491698265,
          0.003229352878406644,
          0.03668489307165146,
          -0.001163746346719563,
          0.0188419371843338,
          -0.0026015194598585367,
          0.003418396459892392,
          -0.009101849049329758,
          -0.014707256108522415,
          -0.00204999721609056,
          -0.006476048845797777,
          0.013375278562307358,
          0.007534000091254711,
          -0.026556309312582016,
          -0.0011212548706680536,
          0.018661566078662872,
          -0.006777825299650431,
          -0.0027090488001704216,
          0.02806865982711315,
          0.0003720172680914402,
          -0.007957180961966515,
          0.005941870156675577,
          0.006462174002081156,
          0.004127744119614363,
          0.006274865008890629,
          0.008678669109940529,
          -0.013278154656291008,
          0.011925364844501019,
          0.013222656212747097,
          -0.019729923456907272,
          -0.016483226791024208,
          -0.007790683303028345,
          0.014693381264805794,
          0.010392202995717525,
          -0.0006824652664363384,
          0.001703128102235496,
          -0.022199632599949837,
          0.005910652223974466,
          -0.019355304539203644,
          0.04728521779179573,
          0.005317505914717913,
          0.0009868430206552148,
          0.0240866020321846,
          -0.0017551584169268608,
          -0.011314875446259975,
          0.0018557505682110786,
          0.00325189926661551,
          0.005751092452555895,
          0.003395850071683526,
          0.02059015817940235,
          -0.020368162542581558,
          -0.01813432388007641,
          -0.006937385071069002,
          0.002254650229588151,
          -0.02999725379049778,
          -0.027333296835422516,
          -0.020742781460285187,
          -0.0005203039036132395,
          -0.02748592011630535,
          0.0222412571310997,
          0.012813350185751915,
          -0.014859878458082676,
          0.005983494687825441,
          -0.008095928467810154,
          0.00021733526955358684,
          -0.005674780812114477,
          -0.019924169406294823,
          0.007880869321525097,
          -0.019050059840083122,
          0.00941403117030859,
          0.012209798209369183,
          -0.015123499557375908,
          -0.01004533376544714,
          0.007984930649399757,
          0.01484600454568863,
          -0.02591807022690773,
          0.02321249060332775,
          0.2121174931526184,
          -0.035380665212869644,
          0.009594403207302094,
          0.02601519413292408,
          0.01756545901298523,
          -0.015650739893317223,
          0.028776273131370544,
          0.006250584032386541,
          -0.011439748108386993,
          0.010378328152000904,
          0.0006130913970991969,
          0.007221817970275879,
          -0.022477127611637115,
          -0.00091313332086429,
          0.011051254346966743,
          -0.03388218954205513,
          -0.046563729643821716,
          -0.02582094818353653,
          -0.0030819333624094725,
          0.015303871594369411,
          0.011079004034399986,
          0.0060147130861878395,
          -0.004096525721251965,
          -0.02716680057346821,
          0.019438553601503372,
          -0.011141440831124783,
          -0.001380539615638554,
          0.0072079431265592575,
          0.007818433456122875,
          0.012001676484942436,
          0.0011117159156128764,
          0.004242211114615202,
          0.0069512599147856236,
          -0.004550924524664879,
          0.009337720461189747,
          -0.0161224827170372,
          0.00582393491640687,
          -0.009705401957035065,
          0.006587047129869461,
          0.0171908400952816,
          0.0072079431265592575,
          0.0003715836792252958,
          0.02910926751792431,
          -0.03249471262097359,
          0.008102865889668465,
          0.02688930556178093,
          -0.004942886997014284,
          -0.008706417866051197,
          0.006465642713010311,
          0.0037219070363789797,
          -0.011800492182374,
          0.0314679779112339,
          0.030441245064139366,
          0.0378781221807003,
          -0.005137133877724409,
          0.00912266131490469,
          -0.03909910097718239,
          0.01863381639122963,
          0.010406077839434147,
          0.009830274619162083,
          -0.026875430718064308,
          -0.005456253420561552,
          0.0034964419901371002,
          0.025751573964953423,
          -0.016524851322174072,
          0.0014516478404402733,
          -0.0083526112139225,
          0.004346271976828575,
          0.011231626383960247,
          -0.02836002968251705,
          -0.007166318595409393,
          -0.013354466296732426,
          -0.032078467309474945,
          0.013479338958859444,
          -0.022393878549337387,
          -0.048200950026512146,
          0.03213396668434143,
          0.03840536251664162,
          0.011821304447948933,
          0.0394320972263813,
          -0.011640932410955429,
          -0.011807429604232311,
          -0.00752012524753809,
          -0.02133939601480961,
          -0.005986963398754597,
          -0.034714676439762115,
          0.01923043094575405,
          -0.023254115134477615,
          -0.014429761096835136,
          -0.014041267335414886,
          -0.01155074592679739,
          -0.013111657463014126,
          -0.009871899150311947,
          0.016136357560753822,
          0.007194068282842636,
          0.0025095990858972073,
          0.009192035533487797,
          -0.014346512034535408,
          -0.0012183783110231161,
          -0.024724841117858887,
          -0.016344480216503143,
          0.05261312797665596,
          0.03255021199584007,
          0.0041554938070476055,
          0.008678669109940529,
          0.010836195200681686,
          -0.0034270682372152805,
          0.011966989375650883,
          0.0033941157162189484,
          -0.002204354153946042,
          0.008213863708078861,
          -0.044010769575834274,
          0.01649710163474083,
          -0.004748640116304159,
          -0.011849054135382175,
          0.005584594793617725,
          0.0035259260330349207,
          -0.0030697928741574287,
          0.020812155678868294,
          -0.001413492253050208,
          -0.0009755697683431208,
          -0.02271299809217453,
          0.008109803311526775,
          -0.00230494630523026,
          -0.0032102749682962894,
          -0.02570994943380356,
          -0.016066983342170715,
          -0.005518689751625061,
          -0.040625326335430145,
          0.004124275408685207,
          0.007936368696391582,
          -0.019938044250011444,
          -0.0032605710439383984,
          0.019105559214949608,
          -0.01087088230997324,
          -0.002292805816978216,
          0.009025538340210915,
          -0.0088867899030447,
          -0.007672748062759638,
          -0.0021627298556268215,
          0.004103463143110275,
          0.017593208700418472,
          -0.0008897196385078132,
          0.0031877283472567797,
          0.026070693507790565,
          0.002962263533845544,
          0.008956164121627808,
          0.02922026626765728,
          -0.010995754972100258,
          -0.0033091327641159296,
          -0.02999725379049778,
          0.00436708377674222,
          0.0023344301152974367,
          -0.00124265905469656,
          0.018703190609812737,
          0.007631123531609774,
          -0.0363241471350193,
          0.003999402746558189,
          0.007561749778687954,
          0.021575268357992172,
          -0.04709096997976303,
          0.0008346541435457766,
          0.0030420434195548296,
          -0.013278154656291008,
          -0.0074021900072693825,
          -0.016066983342170715,
          -0.1791510283946991,
          -0.0174822099506855,
          0.00018969412485603243,
          -0.041513312608003616,
          0.011307938024401665,
          0.022296756505966187,
          0.012133486568927765,
          -0.00897697638720274,
          -0.034520428627729416,
          -0.003307398408651352,
          0.004117337986826897,
          -0.0018817656673491001,
          0.0009903117315843701,
          -0.011765805073082447,
          -0.011176127009093761,
          0.0044850194826722145,
          -0.007166318595409393,
          0.009608278051018715,
          0.0010232642525807023,
          0.003196400124579668,
          0.03163447603583336,
          -0.03268896043300629,
          -0.013479338958859444,
          -0.024419596418738365,
          0.011828241869807243,
          0.015650739893317223,
          -0.007478501182049513,
          0.023351239040493965,
          -0.006371988449245691,
          -0.03191197291016579,
          -0.017537709325551987,
          -0.010496263392269611,
          0.031412478536367416,
          -0.014332637190818787,
          0.012806412763893604,
          0.016372228041291237,
          0.02347611077129841,
          -0.00034968755790032446,
          -0.025030085816979408,
          0.016552601009607315,
          0.022574251517653465,
          0.024627717211842537,
          0.020756656304001808,
          0.012556667439639568,
          -0.026917053386569023,
          0.006760481745004654,
          0.023462235927581787,
          -0.030746491625905037,
          0.0022026197984814644,
          -0.010524013079702854,
          0.024627717211842537,
          -0.023628734052181244,
          0.0066113281063735485,
          0.005875965114682913,
          -0.006316489074379206,
          0.023850729689002037,
          -0.0038467799313366413,
          0.010211830958724022,
          -0.010406077839434147,
          -0.0024922555312514305,
          -0.0171908400952816,
          -0.010773759335279465,
          0.0005285420338623226,
          -0.0025182708632200956,
          -0.017024343833327293,
          -0.036240898072719574,
          -0.011960051953792572,
          0.0010432093404233456,
          -0.0252520814538002,
          0.0034929735120385885,
          -0.011744992807507515,
          0.0036351897288113832,
          -0.005927995778620243,
          -0.0038120930548757315,
          0.026070693507790565,
          0.01988254487514496,
          0.006933916360139847,
          0.022463252767920494,
          0.016968844458460808,
          -0.001080497750081122,
          -0.018994560465216637,
          0.017926203086972237,
          -0.0002926709421444684,
          0.017024343833327293,
          -0.017301838845014572,
          -0.009143473580479622,
          -0.006871480029076338,
          0.0164138525724411,
          -0.02028491348028183,
          -0.010635011829435825,
          0.0382666178047657,
          -0.01072519738227129,
          -0.005619281902909279,
          -0.01116918958723545,
          -0.002911967458203435,
          0.01513737440109253,
          0.0022650561295449734,
          -0.013423840515315533,
          -0.0027350641321390867,
          0.0004955894546583295,
          -0.005390348378568888,
          0.004779858514666557,
          -0.0019251243211328983,
          -0.0022459784522652626,
          0.026875430718064308,
          0.013715210370719433,
          -0.039931587874889374,
          0.01170336827635765,
          0.03546391427516937,
          -0.027513669803738594,
          -0.023323489353060722,
          -0.014735005795955658,
          -0.008699481375515461,
          -0.00448848819360137,
          -0.008921477012336254,
          0.00577190425246954,
          0.001181089784950018,
          -0.033549193292856216,
          0.018855812028050423,
          0.0008311854326166213,
          0.037822622805833817,
          -0.01834244653582573,
          -0.0031894627027213573,
          -0.006163866724818945,
          0.004273429047316313,
          -0.026736682280898094,
          -0.12365195155143738,
          -0.02668118290603161,
          0.01787070371210575,
          0.015192873775959015,
          -0.012195923365652561,
          0.034215182065963745,
          0.002917170524597168,
          0.047423966228961945,
          -0.024044977501034737,
          0.04550924524664879,
          -0.027152925729751587,
          -0.002644878113642335,
          0.013770709745585918,
          -0.0036698768381029367,
          0.029830755665898323,
          -0.010260392911732197,
          0.0017360806232318282,
          -0.018370196223258972,
          -0.042873039841651917,
          0.028013160452246666,
          0.02164464071393013,
          -0.009060224518179893,
          0.005265475250780582,
          -0.029969504103064537,
          -0.011883740313351154,
          -0.006094492971897125,
          -0.03579690679907799,
          0.02262975089251995,
          0.021145150065422058,
          0.005428503733128309,
          0.017246339470148087,
          -0.03760062903165817,
          -0.007318941410630941,
          -0.02572382427752018,
          0.02262975089251995,
          -0.004554393235594034,
          0.0007032774155959487,
          -0.014388136565685272,
          0.016843970865011215,
          -0.012258359231054783,
          -0.009046350605785847,
          0.007395252585411072,
          0.022060884162783623,
          -0.0025130677968263626,
          0.00543544115498662,
          -0.02922026626765728,
          -0.010066146031022072,
          0.021311646327376366,
          0.008650919422507286,
          -0.015026376582682133,
          -0.03618540242314339,
          -0.014200827106833458,
          -0.04764596000313759,
          0.021575268357992172,
          0.016066983342170715,
          0.00965684000402689,
          0.01222367212176323,
          0.019729923456907272,
          -0.009622152894735336,
          0.009434843435883522,
          -0.00951115507632494,
          0.002969200722873211,
          -0.03069099225103855,
          0.0068680113181471825,
          0.007131631951779127,
          0.0013259077677503228,
          -0.0016797144198790193,
          -0.02600131928920746,
          0.0034374743700027466,
          -0.0031443696934729815,
          -0.0029882786329835653,
          0.02096477709710598,
          -0.011363436467945576,
          0.007058789487928152,
          -0.002979606855660677,
          -0.0033039296977221966,
          -0.019632799550890923,
          -0.027402671054005623,
          -0.007006758823990822,
          0.001704862341284752,
          -0.009143473580479622,
          -0.016538726165890694,
          0.006226303055882454,
          -0.010600324720144272,
          0.0009712339378893375,
          -0.0030559180304408073,
          -0.016261231154203415,
          -0.0040028709918260574,
          -0.005230788607150316,
          -0.02095090225338936,
          0.0013319778954610229,
          0.03027474880218506,
          0.0024749122094362974,
          -0.0214642696082592,
          0.0035935654304921627,
          0.026736682280898094,
          -0.019549550488591194,
          -0.0061673354357481,
          0.036740392446517944,
          0.006028587464243174,
          -0.01087781973183155,
          0.012161236256361008,
          -0.05452784523367882,
          0.02378135547041893,
          0.015400994569063187,
          -0.0076588732190430164,
          0.006881886161863804,
          -0.01086394488811493,
          0.018578317016363144,
          -0.021769514307379723,
          0.01032976619899273,
          0.007950243540108204,
          -0.0211728997528553,
          0.022269006818532944,
          -0.0072703794576227665,
          -0.010621136985719204,
          -0.024100475013256073,
          0.0016675739316269755,
          0.03260571137070656,
          -0.0008099396945908666,
          0.013465464115142822,
          -0.0007800222374498844,
          0.00582393491640687,
          -0.02464159205555916,
          0.00638239411637187,
          0.010524013079702854,
          0.005386879667639732,
          -0.00604593101888895,
          -0.027999285608530045,
          0.014776630327105522,
          0.000476078042993322,
          -0.013576462864875793,
          -0.010378328152000904,
          -0.00965684000402689,
          -0.012168173678219318,
          0.0046064238995313644,
          -0.01378458458930254,
          -0.010905569419264793,
          0.025460204109549522,
          0.029719756916165352,
          0.019965793937444687,
          0.04628623276948929,
          -0.024308597669005394,
          -0.033743441104888916,
          0.00281657837331295,
          -0.018370196223258972,
          -0.00703797722235322,
          -0.01757933385670185,
          0.005175289232283831,
          -0.005827403627336025,
          0.030607743188738823,
          -0.001659769332036376,
          0.048006705939769745,
          0.016566475853323936,
          -0.02000741846859455,
          -0.025363080203533173,
          -0.008824354037642479,
          0.016732972115278244,
          0.016677474603056908,
          0.013285092078149319,
          0.010517075657844543,
          0.02174176461994648,
          0.020645657554268837,
          0.007277316879481077,
          0.010371390730142593,
          -0.009053288027644157,
          0.005362598691135645,
          -0.008241613395512104,
          -0.0134030282497406,
          -0.0083040501922369,
          0.0034426774363964796,
          -0.00217140163294971,
          0.00018958572763949633,
          0.00689229229465127,
          0.021381020545959473,
          0.007173256017267704,
          0.007298129145056009,
          -0.015747863799333572,
          0.0029917473439127207,
          0.00631302036345005,
          -0.01139812357723713,
          0.01246648095548153,
          -0.00043597130570560694,
          -0.005768435541540384,
          0.0023084147833287716,
          0.008706417866051197,
          0.01893906109035015,
          0.0015461697475984693,
          -0.0037670000456273556,
          0.0025911133270710707,
          -0.014263263903558254,
          -0.007540937513113022,
          0.0028391247615218163,
          -0.002025716472417116,
          -0.005463190842419863,
          0.02483583800494671,
          0.012938222847878933,
          0.0055533768609166145,
          -0.007776808924973011,
          0.005879433825612068,
          0.024322472512722015,
          0.004596017766743898,
          0.012695414945483208,
          -0.023448361083865166,
          -0.00819305144250393,
          -0.010905569419264793,
          -0.02805478498339653,
          0.01276478823274374,
          -0.04481550678610802,
          -0.022782372310757637,
          0.03540841490030289,
          0.022934995591640472,
          0.01208492461591959,
          -0.013264280743896961,
          0.006514204666018486,
          0.014346512034535408,
          -0.0276801660656929,
          0.0303024984896183,
          -0.0066841705702245235,
          -0.01757933385670185,
          -0.028373904526233673,
          0.024031102657318115,
          0.039265599101781845,
          0.004405239596962929,
          0.04822869971394539,
          0.000724089564755559,
          0.020853780210018158,
          0.0005940136034041643,
          0.01970217376947403,
          -0.02784666419029236,
          0.01639997772872448,
          -0.003524191677570343,
          -0.013215718790888786,
          -0.005074697080999613,
          -0.014929252676665783,
          -0.007686622906476259,
          -0.005699061788618565,
          -0.0013605946442112327,
          -0.018314696848392487,
          0.030441245064139366,
          0.010392202995717525,
          0.05844053253531456,
          0.015983736142516136,
          -0.008116740733385086,
          0.027999285608530045,
          -0.007707434706389904,
          0.0223383791744709,
          0.01620573177933693,
          0.026847681030631065,
          -0.0021141681354492903,
          -0.027319421991705894,
          -0.0008832158637233078,
          0.0007865260122343898,
          0.003912684973329306,
          -0.028498778119683266,
          -0.0027420015539973974,
          -0.014915377832949162,
          0.002481849631294608,
          0.02397560328245163,
          -0.008290175348520279,
          -0.009108786471188068,
          0.0404033325612545,
          -0.008255488239228725,
          0.015400994569063187,
          0.012105736881494522,
          -0.01630285568535328,
          0.008512171916663647,
          0.019147183746099472,
          0.009469530545175076,
          -0.002017044695094228,
          0.0017447524005547166,
          0.027208425104618073,
          0.019480178132653236,
          -0.031023986637592316,
          -0.014943127520382404,
          0.008963101543486118,
          0.0065523600205779076,
          0.004682735074311495,
          -0.02833227999508381,
          0.0007249567424878478,
          -0.006260990165174007,
          -0.004093057010322809,
          0.005726811476051807,
          -0.005723342765122652,
          -0.02407272718846798,
          -0.0026795649901032448,
          0.0013285093009471893,
          0.0028373904060572386,
          -0.010718259960412979,
          -0.01621960662305355
        ]
      },
      "type": "document"
    },
    {
      "id": "d4054310-41ff-4d85-bb2f-84ef02a66fb2",
      "properties": {
        "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nStuff we figured out about AI in 2023\n\n31st December 2023\n\n2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s.\n\nHere’s my attempt to round up the highlights in one place!\n\nLarge Language Models\n\nThey’re actually quite easy to build\n\nYou can run LLMs on your own devices\n\nHobbyists can build their own fine-tuned models\n\nWe don’t yet know how to build GPT-4\n\nVibes Based Development\n\nLLMs are really smart, and also really, really dumb\n\nGullibility is the biggest unsolved problem\n\nCode may be the best application\n\nThe ethics of this space remain diabolically complex\n\nMy blog in 2023\n\nHere’s the sequel to this post: Things we learned about LLMs in 2024.\n\nLarge Language Models\n\nIn the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software.\n\nLLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code.\n\nThey can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes.\n\nSo far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life.\n\nA lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity.\n\nThey’re actually quite easy to build\n\nThe most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build.\n\nIntuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version!\n\nWhat matters most is the training  data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is.\n\nIf you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM.\n\nA year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations.\n\nThe training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing.\n\nSo training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries).\n\nYou can run LLMs on your own devices\n\nIn January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them.\n\nThen in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook.\n\nI wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call!\n\nThis unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use.\n\nToday there are literally thousands of LLMs that can be run locally, on all manner of different devices.\n\nI run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins.\n\nYou can even run them entirely in your browser using WebAssembly and the latest Chrome!\n\nHobbyists can build their own fine-tuned models\n\nI said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely.\n\nThere’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too.\n\nThe Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours.\n\nThe best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data.\n\nThis is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them.\n\nWe don’t yet know how to build GPT-4\n\nFrustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4.\n\nOpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing.\n\nThis may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out.\n\nThe team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then.\n\nStill, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet.\n\nVibes Based Development\n\nAs a computer scientist and software engineer, LLMs are infuriating.\n\nEven the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them.\n\nI’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that!\n\nThe worst part is the challenge of evaluating them.\n\nThere are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task.\n\nI find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself!\n\nThe most frustrating thing for me is at the level of individual prompting.\n\nSometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out.\n\nWe’re left with what’s effectively Vibes Based Development. It’s vibes all the way down.\n\nI’d love to see us move beyond vibes in 2024!\n\nLLMs are really smart, and also really, really dumb\n\nOn the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun!\n\nBut on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb.\n\nDoes ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays?\n\nThe honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer.\n\nSometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead.\n\nThere are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works!\n\nGullibility is the biggest unsolved problem\n\nI coined the term prompt injection in September last year.\n\n15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem.\n\nI’ve written a ton about this already.\n\nBeyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility.\n\nLanguage Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt.\n\nIn order to be useful tools for us, we need them to believe what we feed them!\n\nBut it turns out a lot of the things we want to build need them not to be gullible.\n\nEveryone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited.\n\nA lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes.\n\nI think this is because of gullibility.\n\nCan we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true!\n\nCode may be the best application\n\nOver the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of.\n\nIf you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English.\n\nIt’s still astonishing to me how effective they are though.\n\nOne of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless.\n\nExcept... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works!\n\nSo hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language!\n\nHow should we feel about this as software engineers?\n\nOn the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you?\n\nOn the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can.\n\nThe ethics of this space remain diabolically complex\n\nIn September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion.\n\nSince then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data.\n\nJust this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere.\n\nThe legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future.\n\nLaw is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people?\n\nAs the quality of results produced by AI models has increased over the year, these questions have become even more pressing.\n\nThe impact on human society in terms of these models is already huge, if difficult to objectively measure.\n\nPeople have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators.\n\nThere are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic.\n\nMy blog in 2023\n\nHere’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard):\n\nThe top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78).\n\nI’ve written a lot about this stuff!\n\nI grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic:\n\nArticle Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k\n\nI also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023:\n\nPrompt injection explained, with video, slides, and a transcript\n\nCatching up on the weird world of LLMs\n\nMaking Large Language Models work for you\n\nOpen questions for AI engineering\n\nEmbeddings: What they are and why they matter\n\nFinancial sustainability for open source projects at GitHub Universe\n\nAnd in podcasts:\n\nWhat AI can do for you on the Theory of Change\n\nWorking in public on Path to Citus Con\n\nLLMs break the internet on the Changelog\n\nTalking Large Language Models on Rooftop Ruby\n\nThoughts on the OpenAI board situation on Newsroom Robots\n\nIndustry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations\n\nPosted \n\n31st December 2023 at 11:59 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\nblogging\n            68\n\nai\n            1091\n\ngenerative-ai\n            936\n\nllms\n            924\n\nNext: Tom Scott, and the formidable power of escalating streaks\n\nPrevious: Last weeknotes of 2023\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
        "document_metadata": {
          "source": "data/2023_llms.html"
        },
        "headlines": [
          "Large Language Models",
          "Vibes Based Development",
          "LLMs are really smart, and also really, really dumb",
          "Gullibility is the biggest unsolved problem",
          "Code may be the best application"
        ],
        "summary": "In 2023, Large Language Models (LLMs) emerged as a significant development in AI, with advancements making them easier to build and run on personal devices. Despite their capabilities, LLMs remain complex and unpredictable, with gullibility being a major unresolved issue. They excel in generating code, as errors can be tested and corrected, reducing the impact of hallucinations. The ethics of using unlicensed data for training these models are contentious, highlighted by legal actions like the New York Times lawsuit against OpenAI. The year also saw a proliferation of LLMs from various organizations, though none have surpassed GPT-4. The field continues to grapple with the challenges of understanding and controlling these models, often relying on 'Vibes Based Development' due to the lack of clear methodologies.",
        "summary_embedding": [
          -0.011880152858793736,
          0.005520491395145655,
          0.003946180455386639,
          -0.037700239568948746,
          -0.007885425351560116,
          0.010083912871778011,
          -0.017019202932715416,
          0.024648023769259453,
          -0.027394399046897888,
          -0.03700670972466469,
          0.021000059321522713,
          0.0209029670804739,
          -0.029183702543377876,
          0.0010593656916171312,
          -0.0022487679962068796,
          0.014550239779055119,
          0.023122258484363556,
          0.0017624307656660676,
          0.017684990540146828,
          -0.014827651903033257,
          0.005770161747932434,
          0.0033341411035507917,
          -0.018475614488124847,
          -0.01812884956598282,
          -0.004438586067408323,
          0.005416462197899818,
          0.018697543069720268,
          -0.037256382405757904,
          -0.01563214510679245,
          0.005780564621090889,
          0.01914140209555626,
          -0.00017869210569188,
          -0.03395518288016319,
          0.007455437444150448,
          -0.03176363185048103,
          -0.00686246994882822,
          0.024537058547139168,
          -0.00603717053309083,
          0.017879178747534752,
          0.009140713140368462,
          0.030154643580317497,
          0.024745117872953415,
          0.015299251303076744,
          -0.017851438373327255,
          -0.018517225980758667,
          0.017629509791731834,
          0.007608013693243265,
          -0.01976557821035385,
          -0.03215200826525688,
          0.018850119784474373,
          0.018392391502857208,
          0.029849492013454437,
          -0.01005617156624794,
          -0.01352381706237793,
          -0.00445592449977994,
          0.00506969727575779,
          -0.0028954839799553156,
          0.006734167225658894,
          0.013509945943951607,
          -0.001715617487207055,
          -0.006474093999713659,
          -0.020611684769392014,
          -0.004448988940566778,
          0.025313811376690865,
          -0.0043588303960859776,
          -0.007122543640434742,
          -0.023413540795445442,
          0.029183702543377876,
          0.031070102006196976,
          -0.013371240347623825,
          0.0006211419822648168,
          -0.0110201770439744,
          0.013052216731011868,
          -0.005551700014621019,
          0.014758298173546791,
          0.003214507130905986,
          -0.012344817630946636,
          -0.01361397560685873,
          -0.02595185860991478,
          0.00482002692297101,
          -0.003252651309594512,
          0.0050523593090474606,
          -0.010569383390247822,
          0.02278936468064785,
          0.017324356362223625,
          -0.0038074746262282133,
          -0.0057285502552986145,
          -0.018114978447556496,
          -0.004667450673878193,
          -0.014127187430858612,
          -0.006696023046970367,
          -0.005035020876675844,
          0.021860036998987198,
          0.017490802332758904,
          -0.008135096170008183,
          -0.006411676295101643,
          -0.012358687818050385,
          0.009952141903340816,
          -0.014702816493809223,
          -0.022775495424866676,
          -0.007261249236762524,
          0.0014988897601142526,
          -0.04383103549480438,
          -0.008738466538488865,
          -0.020694907754659653,
          0.004074483178555965,
          0.015271509997546673,
          0.022997424006462097,
          0.02051459066569805,
          0.014550239779055119,
          -0.012372558936476707,
          0.027990832924842834,
          0.005596779752522707,
          -0.026312492787837982,
          -0.00212393281981349,
          -0.009972947649657726,
          0.006040638312697411,
          0.001518828677944839,
          -0.001785837346687913,
          0.0013610507594421506,
          0.03267908841371536,
          0.01052083633840084,
          0.012892705388367176,
          0.0011243839981034398,
          0.023968365043401718,
          -0.011075659655034542,
          3.1615174520993605e-05,
          -0.020805872976779938,
          -0.011103400029242039,
          -0.0023406606633216143,
          0.004077950958162546,
          0.00500728003680706,
          0.008870236575603485,
          0.0070982701145112514,
          -0.03087591379880905,
          0.040640804916620255,
          -0.015618274919688702,
          -0.002240099012851715,
          0.006928355433046818,
          0.009889724664390087,
          0.004771479871124029,
          0.026950540021061897,
          -0.024009976536035538,
          0.019335590302944183,
          -0.011124206706881523,
          0.020403625443577766,
          0.0057458882220089436,
          0.016533732414245605,
          -0.0015214293962344527,
          -0.0012630898272618651,
          0.00803800206631422,
          -0.035286758095026016,
          -0.020833613350987434,
          0.016408897936344147,
          0.009189260192215443,
          0.005392188671976328,
          0.00906442478299141,
          0.030543019995093346,
          -0.038837626576423645,
          -0.015867944806814194,
          -0.013232534751296043,
          0.015743110328912735,
          -0.004001662600785494,
          0.015951167792081833,
          0.013856710866093636,
          0.021000059321522713,
          0.021582623943686485,
          -0.0030723337549716234,
          -0.007892360910773277,
          -0.011561129242181778,
          -0.017754344269633293,
          0.03595254570245743,
          -0.0342603363096714,
          0.01559053361415863,
          -0.009667795151472092,
          0.016811145469546318,
          0.02309451811015606,
          -0.0018499888246878982,
          -0.026881186291575432,
          -0.011783058755099773,
          0.02037588320672512,
          0.005343641620129347,
          0.008315413258969784,
          -0.00343123497441411,
          -0.021832294762134552,
          0.0033705513924360275,
          0.014085575006902218,
          0.0008309344993904233,
          0.01062486506998539,
          -0.02489769272506237,
          0.02871210314333439,
          0.01654760353267193,
          -0.005423397291451693,
          -0.01932171918451786,
          -0.6506966948509216,
          -0.03523127734661102,
          0.013974610716104507,
          -0.012781741097569466,
          -0.0027567781507968903,
          -0.006595461629331112,
          -0.005253482609987259,
          -0.01453636959195137,
          -0.02072264812886715,
          0.036729298532009125,
          -0.012358687818050385,
          0.002305984264239669,
          -0.003167693968862295,
          -0.0203342717140913,
          0.010721959173679352,
          -0.009189260192215443,
          0.001533566159196198,
          -0.025494128465652466,
          0.007774461060762405,
          0.01769886165857315,
          -0.0047541419044137,
          0.01611761562526226,
          -0.006300711538642645,
          -0.010569383390247822,
          -0.027338916435837746,
          0.0037346540484577417,
          0.013385111466050148,
          0.01690823957324028,
          -0.008322348818182945,
          0.006675217300653458,
          -0.014168798923492432,
          0.006616267375648022,
          -0.005707744043320417,
          0.008967330679297447,
          0.04904637485742569,
          0.00063111144118011,
          -0.018766896799206734,
          0.021971000358462334,
          0.0012232118751853704,
          0.007788331247866154,
          -0.04119562730193138,
          -0.012268529273569584,
          -0.004400441888719797,
          0.029433373361825943,
          -0.010500029660761356,
          0.030986879020929337,
          0.025702187791466713,
          -0.01158887054771185,
          -0.016519863158464432,
          -0.00633538793772459,
          0.0014286699006333947,
          0.0051598562858998775,
          0.0040952893905341625,
          0.0010567649733275175,
          0.0031867660582065582,
          0.012968993745744228,
          0.014231216162443161,
          -0.013828969560563564,
          0.0021586092188954353,
          -0.020805872976779938,
          -0.0008630102383904159,
          -0.014799910597503185,
          -0.026645386591553688,
          -0.030487537384033203,
          -0.015313121490180492,
          0.011276782490313053,
          0.006789649371057749,
          0.010742764919996262,
          -0.004930991679430008,
          -0.015701498836278915,
          -0.004594630096107721,
          0.04280461370944977,
          -0.0019332122756168246,
          -0.011609676294028759,
          -0.007809137459844351,
          0.014002352021634579,
          0.005416462197899818,
          -0.014453145675361156,
          -0.002104860730469227,
          0.01106178853660822,
          0.003309867577627301,
          -0.02161036618053913,
          -0.0003725551359821111,
          -0.0006566853262484074,
          0.0388098880648613,
          0.0036895745433866978,
          0.012788675725460052,
          -0.0009622715879231691,
          0.0010827722726389766,
          0.008703789673745632,
          0.005191064905375242,
          0.030321091413497925,
          -0.014952486380934715,
          -0.051348891109228134,
          0.004459391813725233,
          0.01690823957324028,
          -0.018558837473392487,
          0.014286698773503304,
          0.021069413051009178,
          -0.028268244117498398,
          -0.004608500748872757,
          -0.013822034001350403,
          0.042527202516794205,
          0.02538316324353218,
          0.012407234869897366,
          0.022553564980626106,
          0.0027116986457258463,
          0.001938413712196052,
          0.013822034001350403,
          -0.025979598984122276,
          -0.006706425920128822,
          0.0035040555521845818,
          -0.0005639258306473494,
          -0.006383934989571571,
          -0.0057458882220089436,
          -0.03217975050210953,
          -0.007171090692281723,
          -0.01255981158465147,
          0.011741447262465954,
          -0.026881186291575432,
          0.018031755462288857,
          -0.006914484780281782,
          0.02915596216917038,
          -0.0041715772822499275,
          -0.00017825864779297262,
          0.0009735414059832692,
          0.004088353831321001,
          -0.01016713585704565,
          -0.0035924806725233793,
          0.0242873877286911,
          -0.008488795720040798,
          -0.022428730502724648,
          0.016741791740059853,
          -0.012379493564367294,
          0.016755662858486176,
          0.013919128105044365,
          0.04849155247211456,
          -0.008336219005286694,
          0.009744083508849144,
          0.017005333676934242,
          -0.023690953850746155,
          0.0013411118416115642,
          0.010458418168127537,
          0.014508628286421299,
          -0.04058532044291496,
          -0.03287327662110329,
          -0.005527426488697529,
          -0.006321517284959555,
          0.005461541470140219,
          -0.014702816493809223,
          -0.014799910597503185,
          -0.01761563867330551,
          -0.01848948560655117,
          0.03412162885069847,
          -0.001908938749693334,
          -0.00776059040799737,
          -0.0091337775811553,
          -0.021984871476888657,
          -0.004424715414643288,
          -0.021332954987883568,
          0.010000688955187798,
          0.009265548549592495,
          0.004157706629484892,
          0.008481860160827637,
          0.016783403232693672,
          -0.02301129512488842,
          -0.01049309503287077,
          0.028989514335989952,
          -0.0384492501616478,
          -0.020792001858353615,
          0.0034295013174414635,
          -0.03764475882053375,
          0.014480886980891228,
          0.03181911259889603,
          -0.009397318586707115,
          0.027768904343247414,
          -0.0069318232126533985,
          0.0016688043251633644,
          0.007001176010817289,
          -0.013731875456869602,
          0.006720296572893858,
          0.029100479558110237,
          0.012712388299405575,
          -0.006318049971014261,
          0.013662522658705711,
          0.02309451811015606,
          0.0368957482278347,
          0.016838885843753815,
          -0.0014512095367535949,
          0.0040155332535505295,
          0.004580759443342686,
          0.036118995398283005,
          -0.0040155332535505295,
          0.0067445700988173485,
          -0.013697199523448944,
          0.026270881295204163,
          0.001154725905507803,
          -0.01905817911028862,
          0.007150284945964813,
          0.025854764506220818,
          0.012136758305132389,
          0.01778208464384079,
          0.01607600413262844,
          -0.012844158336520195,
          0.0073791490867733955,
          -0.023635471239686012,
          5.252940900390968e-05,
          -0.012268529273569584,
          -0.009106036275625229,
          0.016325674951076508,
          0.007940907962620258,
          0.0009822105057537556,
          -0.011034047231078148,
          -0.01521602738648653,
          0.0036861069966107607,
          0.029044996947050095,
          0.000787155469879508,
          0.016935979947447777,
          -0.00845411978662014,
          -9.189260163111612e-05,
          0.004965668078511953,
          0.005520491395145655,
          0.016145355999469757,
          -0.011380812153220177,
          0.0010775708360597491,
          0.01514667458832264,
          -0.018558837473392487,
          0.011165818199515343,
          -0.00408488605171442,
          -0.034315817058086395,
          0.013364304788410664,
          0.015951167792081833,
          0.022331636399030685,
          0.01765725016593933,
          0.004629306495189667,
          -0.011366941034793854,
          0.02266453020274639,
          -0.009473606944084167,
          0.02609056420624256,
          -3.0721170332981274e-05,
          -0.009230871684849262,
          0.012476587668061256,
          -0.0003751558833755553,
          -0.008031066507101059,
          0.034676454961299896,
          -0.007268184795975685,
          0.0376724973320961,
          -0.010617930442094803,
          -0.03209652379155159,
          0.004282542038708925,
          -0.03947567567229271,
          0.012226917780935764,
          -0.025965727865695953,
          -0.00034546415554359555,
          -0.00016861424956005067,
          -0.023954493924975395,
          0.00854427833110094,
          2.0562052668537945e-05,
          0.020098472014069557,
          0.008239124901592731,
          -0.012407234869897366,
          0.003056729445233941,
          0.0075317258015275,
          0.0029839088674634695,
          0.010201812721788883,
          -0.008904913440346718,
          -0.010007624514400959,
          0.0047541419044137,
          -0.015965038910508156,
          -0.016533732414245605,
          -0.02603508159518242,
          -0.0191968847066164,
          0.006553849671036005,
          -0.033622290939092636,
          0.04163948446512222,
          -0.0038421510253101587,
          0.006415144074708223,
          0.0014581448631361127,
          0.01690823957324028,
          0.04249946027994156,
          -0.021374566480517387,
          -0.03817183896899223,
          0.022678401321172714,
          0.005204935558140278,
          -0.0015769117744639516,
          -0.016880497336387634,
          -0.04541228339076042,
          0.009841177612543106,
          0.0029613692313432693,
          -0.013059152290225029,
          -0.006155070383101702,
          0.006106523331254721,
          -0.0036410277243703604,
          0.0028902823105454445,
          -0.012157564982771873,
          0.028961773961782455,
          0.0241070706397295,
          -0.004022468812763691,
          -0.00896039605140686,
          -0.01577085070312023,
          0.0032578527461737394,
          0.010063107125461102,
          -0.006432482041418552,
          -0.023524506017565727,
          0.02840695157647133,
          -0.00906442478299141,
          -0.040418874472379684,
          0.002739439718425274,
          0.0017130167689174414,
          -0.008197513408958912,
          -0.009411189705133438,
          0.00891184899955988,
          0.011221300810575485,
          0.004320686217397451,
          0.016963720321655273,
          0.017046945169568062,
          0.010687283240258694,
          0.005426865071058273,
          0.010763571597635746,
          0.008301543071866035,
          0.013322693295776844,
          -0.03933696821331978,
          -0.0001738157297950238,
          0.01314931083470583,
          0.07401341944932938,
          0.004119562450796366,
          -0.017449190840125084,
          0.0038386834785342216,
          -0.024356741458177567,
          -0.01918301358819008,
          -0.01861432008445263,
          -0.007060125935822725,
          0.0062660351395606995,
          0.028989514335989952,
          -0.01585407368838787,
          -0.00557597354054451,
          0.012608358636498451,
          -0.0013766551855951548,
          0.023968365043401718,
          0.020653296262025833,
          0.017684990540146828,
          -0.025175105780363083,
          -0.02893403358757496,
          -0.013932999223470688,
          0.00034914855496026576,
          0.0033740189392119646,
          0.016131486743688583,
          0.011276782490313053,
          0.012324011884629726,
          -0.012039664201438427,
          0.02489769272506237,
          0.015451828017830849,
          -0.03819958120584488,
          -0.019571390002965927,
          0.0048963152803480625,
          0.0067931171506643295,
          0.007524790242314339,
          0.0160205215215683,
          -0.006779246497899294,
          0.015368604101240635,
          0.016492120921611786,
          0.0012405500747263432,
          0.0064220791682600975,
          -0.001980025554075837,
          0.030265608802437782,
          0.027519233524799347,
          0.0017806359101086855,
          -0.008114290423691273,
          0.0018101108726114035,
          -0.024564798921346664,
          -0.001299500116147101,
          0.04105691984295845,
          0.00902281329035759,
          -0.03498160466551781,
          0.014369922690093517,
          -0.0010255561210215092,
          -0.023593859747052193,
          -0.006148135289549828,
          0.01585407368838787,
          0.016228580847382545,
          0.010250359773635864,
          -0.0014659470180049539,
          -0.004265203606337309,
          -0.017587896436452866,
          -0.018586579710245132,
          -0.033650029450654984,
          -0.00812122505158186,
          -0.022914201021194458,
          -0.010500029660761356,
          1.1398529750294983e-05,
          -0.025008657947182655,
          0.009820371866226196,
          -0.0463554821908474,
          0.008669113740324974,
          0.0013489139964804053,
          -0.028795326128602028,
          -0.05251402035355568,
          -0.004414312541484833,
          0.010916147381067276,
          -0.014716686680912971,
          0.026243140920996666,
          -0.006904081907123327,
          0.004240930080413818,
          0.013780422508716583,
          -0.006647475995123386,
          -0.006574655417352915,
          -0.010500029660761356,
          -0.007413825951516628,
          0.008329284377396107,
          -0.004712529946118593,
          -0.02187390625476837,
          -0.015229898504912853,
          0.00043172185542061925,
          0.01269158162176609,
          0.007212702184915543,
          -0.003935777582228184,
          -0.005922738462686539,
          0.015063451603055,
          -0.011873217299580574,
          0.015965038910508156,
          0.024842211976647377,
          0.011283718049526215,
          -0.0027862531132996082,
          -0.020126214250922203,
          -0.00907136034220457,
          -0.02037588320672512,
          -0.03104236163198948,
          -0.0191968847066164,
          0.008357025682926178,
          0.010007624514400959,
          0.024439964443445206,
          0.026021210476756096,
          0.0014312706189230084,
          -0.009327965788543224,
          0.006193214561790228,
          -0.007614949252456427,
          0.019793320447206497,
          -0.003623689291998744,
          0.017241133376955986,
          0.006928355433046818,
          0.016173098236322403,
          0.004372700583189726,
          0.018059497699141502,
          -0.024994786828756332,
          -0.0259934701025486,
          -0.04768705740571022,
          0.03179137408733368,
          0.009397318586707115,
          -0.011200494132936,
          0.024079328402876854,
          0.016630826517939568,
          0.011540323495864868,
          -0.03684026375412941,
          0.014057834632694721,
          0.003963518422096968,
          0.027214080095291138,
          0.00267355446703732,
          -0.0022088901605457067,
          -0.020306531339883804,
          -0.02072264812886715,
          -0.016131486743688583,
          0.013662522658705711,
          -0.01883624866604805,
          -0.013225599192082882,
          0.01656147465109825,
          0.024426093325018883,
          -0.0009206598624587059,
          -0.018059497699141502,
          0.022761624306440353,
          -0.026548292487859726,
          -0.009820371866226196,
          0.027255691587924957,
          0.01251126453280449,
          0.04874122142791748,
          -0.016325674951076508,
          0.021277472376823425,
          -0.04152851924300194,
          -0.02234550751745701,
          0.005790967959910631,
          -0.02265065908432007,
          0.0026787561364471912,
          0.003966986201703548,
          0.027949221432209015,
          0.00907136034220457,
          0.04496842622756958,
          -0.007497049402445555,
          0.007406890392303467,
          0.007358343340456486,
          -0.008710725232958794,
          -0.01297592930495739,
          -0.0013003670610487461,
          -0.005645326804369688,
          -0.010659541934728622,
          -0.0005288159009069204,
          -0.009757953695952892,
          -0.008315413258969784,
          0.026229269802570343,
          -0.007871555164456367,
          -0.012989799492061138,
          0.0031018087174743414,
          -0.014897004701197147,
          -0.008384766057133675,
          -0.020362013950943947,
          -0.02256743609905243,
          -0.02209583669900894,
          -0.002709964755922556,
          -0.0014486088184639812,
          0.01264997012913227,
          -0.0222206711769104,
          -0.005842982325702906,
          0.015604403801262379,
          0.013607040047645569,
          0.001834384398534894,
          -0.00048113579396158457,
          0.01812884956598282,
          0.004372700583189726,
          -0.008946524932980537,
          0.024967046454548836,
          0.005978220608085394,
          -0.04197238013148308,
          -0.005849917884916067,
          -0.0429433211684227,
          0.0021291342563927174,
          0.02577153965830803,
          0.0043865712359547615,
          0.01822594366967678,
          0.013260276056826115,
          -0.01163741759955883,
          0.007268184795975685,
          0.005988623481243849,
          0.0021395371295511723,
          -0.008065743371844292,
          -0.013364304788410664,
          -0.027172468602657318,
          -0.00675150565803051,
          -0.025494128465652466,
          -0.018947213888168335,
          -0.015576662495732307,
          -0.010749700479209423,
          -0.0053575122728943825,
          0.009820371866226196,
          0.031070102006196976,
          -0.029044996947050095,
          -0.026756351813673973,
          0.03495386615395546,
          0.016783403232693672,
          0.026229269802570343,
          -0.00401900103315711,
          0.02248421311378479,
          0.02459254115819931,
          0.006689087953418493,
          -0.015229898504912853,
          0.015035710297524929,
          0.018905602395534515,
          -0.0065295761451125145,
          0.012913511134684086,
          0.0007633154164068401,
          -0.019155273213982582,
          -0.016089875251054764,
          0.03187459707260132,
          0.011789994314312935,
          -0.030848173424601555,
          -0.045911625027656555,
          0.015909556299448013,
          0.013475270010530949,
          0.00794784352183342,
          -0.01778208464384079,
          -0.030099160969257355,
          -0.023025164380669594,
          0.010347453877329826,
          -0.0003229244612157345,
          0.02744987979531288,
          -0.004768012557178736,
          -0.017144039273262024,
          0.014113316312432289,
          -0.002328523900359869,
          0.014397663064301014,
          -0.008218319155275822,
          -0.011339200660586357,
          0.011353070847690105,
          0.013690263964235783,
          -0.007434631697833538,
          -0.011242106556892395,
          0.012927382253110409,
          0.00267355446703732,
          0.024495447054505348,
          0.014196540229022503,
          0.0013809897936880589,
          -0.004875509534031153,
          0.021069413051009178,
          0.018850119784474373,
          -0.010708088986575603,
          -0.001047228928655386,
          0.03215200826525688,
          -0.03392744064331055,
          -0.010666477493941784,
          0.005392188671976328,
          -0.01409251056611538,
          0.006789649371057749,
          -0.015132804401218891,
          -0.007705107796937227,
          -0.011755317449569702,
          0.01264303456991911,
          0.016048261895775795,
          0.024176422506570816,
          0.01814272068440914,
          -0.01158887054771185,
          0.0035109908785670996,
          -0.012982863932847977,
          -0.045606471598148346,
          -0.005437267944216728,
          -0.00506969727575779,
          0.008051872253417969,
          -0.019834931939840317,
          0.013079958036541939,
          0.019737837836146355,
          -0.025882504880428314,
          6.382634455803782e-05,
          -0.0055412971414625645,
          -0.028074055910110474,
          -0.0054823472164571285,
          0.016256321221590042,
          -0.023746434599161148,
          0.0021482063457369804,
          0.018378520384430885,
          0.0016401963075622916,
          -0.0040155332535505295,
          0.009764889255166054,
          -0.004504471085965633,
          -0.00019819760927930474,
          0.004906718153506517,
          -0.008863301947712898,
          -0.02564670518040657,
          -0.009279418736696243,
          -0.010950824245810509,
          0.01255981158465147,
          -0.0028885486535727978,
          -0.0012310141464695334,
          0.00633538793772459,
          -0.008142031729221344,
          0.007247378583997488,
          -0.006227890960872173,
          -0.005551700014621019,
          0.02450931817293167,
          -0.006741102784872055,
          0.0010610994650050998,
          0.007580272853374481,
          -0.020126214250922203,
          0.0106456708163023,
          -0.016436638310551643,
          0.002588597359135747,
          -0.013600105419754982,
          -0.040113721042871475,
          -0.00845411978662014,
          0.015368604101240635,
          0.0021638106554746628,
          0.00034242996480315924,
          -0.0028608073480427265,
          -0.013926063664257526,
          -0.00225050188601017,
          -0.009119907394051552,
          0.018558837473392487,
          0.007157220039516687,
          0.006276438012719154,
          0.0012838956899940968,
          0.035980287939310074,
          0.01510506309568882,
          0.008155901916325092,
          -0.02278936468064785,
          -0.005738953128457069,
          -0.018114978447556496,
          -0.014127187430858612,
          -0.03231845423579216,
          -0.012109017930924892,
          -0.034399040043354034,
          0.05814547836780548,
          -0.0011018443619832397,
          -0.02019556611776352,
          -0.008641372434794903,
          -0.017227262258529663,
          -0.03342810273170471,
          -0.012989799492061138,
          -0.003880295203998685,
          0.024315129965543747,
          0.012379493564367294,
          0.025674445554614067,
          0.00896039605140686,
          0.018017884343862534,
          -0.009536025114357471,
          0.007878489792346954,
          -0.011831605806946754,
          -0.009584572166204453,
          0.013440593145787716,
          -0.005402591545134783,
          -0.000983944395557046,
          0.00406061252579093,
          -0.023774176836013794,
          -0.0007325400947593153,
          0.0057285502552986145,
          -0.020223308354616165,
          -0.0039981952868402,
          0.009868918918073177,
          -0.013475270010530949,
          -0.011353070847690105,
          0.0169498510658741,
          -0.005617585498839617,
          -0.009848113171756268,
          0.004743739031255245,
          0.010798247531056404,
          -0.012636099942028522,
          -0.006855534855276346,
          -0.0010446282103657722,
          -0.018850119784474373,
          0.00042413637856952846,
          -0.005953947082161903,
          0.007084399461746216,
          0.004407377447932959,
          0.0028348001651465893,
          0.0058845942839980125,
          -0.004275606945157051,
          0.0033445439767092466,
          -0.01194257102906704,
          0.04932378605008125,
          0.008682983927428722,
          0.012629164382815361,
          0.02556348219513893,
          -0.0024776326026767492,
          0.008551213890314102,
          -0.006054508965462446,
          0.010735830292105675,
          0.012615294195711613,
          0.009355707094073296,
          0.03231845423579216,
          -0.03184685483574867,
          -0.024703506380319595,
          -0.00964005384594202,
          0.005308965221047401,
          -0.018406260758638382,
          -0.018808508291840553,
          -0.014328310266137123,
          0.0007100004004314542,
          -0.03645188733935356,
          0.017046945169568062,
          0.004667450673878193,
          -0.011477906256914139,
          0.00025508867111057043,
          -0.010312777012586594,
          0.011748382821679115,
          -0.008391701616346836,
          -0.028906291350722313,
          0.016825014725327492,
          -0.014675075188279152,
          0.0036410277243703604,
          0.003727718722075224,
          -0.0032699895091354847,
          -0.009751019068062305,
          0.009265548549592495,
          0.016145355999469757,
          -0.019391072914004326,
          -0.003710380522534251,
          0.20217759907245636,
          -0.024828340858221054,
          0.0011443229159340262,
          0.013294951990246773,
          -0.0015500375302508473,
          -0.019945895299315453,
          0.04077950865030289,
          0.0056210532784461975,
          0.0036930423229932785,
          0.00964005384594202,
          0.008065743371844292,
          -0.0051113092340528965,
          -0.02586863376200199,
          0.0008838161011226475,
          0.004362297710031271,
          -0.021721331402659416,
          -0.04879670590162277,
          -0.03722864016890526,
          -0.01412025187164545,
          0.0003144720976706594,
          -0.01769886165857315,
          0.008939589373767376,
          -0.021069413051009178,
          -0.029627561569213867,
          0.022678401321172714,
          -0.00679658493027091,
          0.0039045687299221754,
          0.01567375659942627,
          0.007042787503451109,
          0.014106381684541702,
          -0.00532283540815115,
          0.0010853729909285903,
          0.0014676809078082442,
          0.0070670610293745995,
          0.007809137459844351,
          -0.02463415265083313,
          -0.0024152148980647326,
          -0.0021516738925129175,
          0.014633463695645332,
          0.02181842364370823,
          0.016755662858486176,
          -0.005305497441440821,
          0.022858718410134315,
          -0.02643732726573944,
          0.0075317258015275,
          0.04571743682026863,
          -0.006238293834030628,
          -0.005551700014621019,
          0.002090990077704191,
          -0.001815312309190631,
          -0.028739845380187035,
          0.012594487518072128,
          0.01844787411391735,
          0.041389815509319305,
          0.0024637619499117136,
          0.007455437444150448,
          -0.017684990540146828,
          0.01865593157708645,
          -0.006841664202511311,
          0.005021150689572096,
          -0.030265608802437782,
          -0.02607669308781624,
          0.0024152148980647326,
          0.018253685906529427,
          -0.013059152290225029,
          0.00021239327907096595,
          -0.0032578527461737394,
          0.0036930423229932785,
          -0.008835560642182827,
          -0.006033702753484249,
          -0.005066229961812496,
          -0.004809624049812555,
          -0.01971009559929371,
          0.0002477199013810605,
          -0.0209029670804739,
          -0.04860251769423485,
          0.0384492501616478,
          0.03331713750958443,
          -0.0055898441933095455,
          0.02871210314333439,
          -0.007739784196019173,
          -0.015299251303076744,
          -0.0021846166346222162,
          -0.025105752050876617,
          -0.013398981653153896,
          -0.026367975398898125,
          0.012941252440214157,
          -0.02055620215833187,
          -0.01642276905477047,
          -0.008259931579232216,
          -0.004379636142402887,
          -0.015382475219666958,
          0.0044351182878017426,
          0.01571536809206009,
          -0.0033480115234851837,
          0.009015877731144428,
          0.019335590302944183,
          -0.0047888183034956455,
          0.002049378352239728,
          -0.016311803832650185,
          -0.018212072551250458,
          0.042388495057821274,
          0.033650029450654984,
          -0.00431375065818429,
          0.015410215593874454,
          0.012677711434662342,
          -0.016825014725327492,
          -0.0026007341220974922,
          -0.006845131982117891,
          -0.015646016225218773,
          -0.015326992608606815,
          -0.04369233176112175,
          0.014328310266137123,
          -0.0021221989300101995,
          -0.006220955867320299,
          0.011914829723536968,
          0.004674385767430067,
          0.0009934804402291775,
          0.026284752413630486,
          0.0018326506251469254,
          -0.0034069614484906197,
          -0.007503984495997429,
          0.005215338431298733,
          0.002540050307288766,
          0.005395655985921621,
          -0.015479568392038345,
          -0.018059497699141502,
          0.00397392176091671,
          -0.037089936435222626,
          0.008433313108980656,
          0.009293289855122566,
          -0.03209652379155159,
          0.01249045878648758,
          0.010708088986575603,
          0.001496288925409317,
          -0.006033702753484249,
          0.009203130379319191,
          -0.003817877499386668,
          -0.012344817630946636,
          -0.011817735619843006,
          -0.0014624794712290168,
          0.007240443490445614,
          -0.004431650973856449,
          -0.010728894732892513,
          0.015646016225218773,
          -0.0037519922479987144,
          0.012039664201438427,
          0.025355422869324684,
          -0.009244742803275585,
          -0.007001176010817289,
          -0.01407170481979847,
          -0.006886743474751711,
          0.0025677913799881935,
          0.0016722719883546233,
          0.015354733914136887,
          0.014508628286421299,
          -0.0201539546251297,
          0.006026767659932375,
          0.009036683477461338,
          0.021485529839992523,
          -0.0474373884499073,
          0.02278936468064785,
          0.020015249028801918,
          -0.004192383028566837,
          -0.012129823677241802,
          -0.023371929302811623,
          -0.17876406013965607,
          -0.009813436307013035,
          0.0037485247012227774,
          -0.059088677167892456,
          0.02660377509891987,
          0.016783403232693672,
          0.013835905119776726,
          -0.004910185933113098,
          -0.036868005990982056,
          0.0005465875728987157,
          0.006040638312697411,
          -0.01005617156624794,
          -0.021762942895293236,
          -0.012747064232826233,
          -0.009466671384871006,
          0.010971629992127419,
          -0.004109159577637911,
          0.018017884343862534,
          0.023788047954440117,
          0.001333309686742723,
          0.03414937108755112,
          -0.03087591379880905,
          -0.010049236007034779,
          -0.017893049865961075,
          0.009418124333024025,
          -0.0037970717530697584,
          -0.001407864037901163,
          0.016367286443710327,
          -0.013988480903208256,
          -0.024967046454548836,
          -0.010278101079165936,
          -0.015229898504912853,
          0.03118106722831726,
          -0.0052014682441949844,
          0.02244260162115097,
          0.019945895299315453,
          0.03487064316868782,
          0.004490600898861885,
          -0.030182385817170143,
          -0.003320270450785756,
          0.012504328973591328,
          0.03245716169476509,
          0.011873217299580574,
          0.00576322665438056,
          -0.014910874888300896,
          0.01743532158434391,
          0.026270881295204163,
          -0.023441283032298088,
          0.008086549118161201,
          -0.013905257917940617,
          0.026908928528428078,
          -0.025743799284100533,
          0.023524506017565727,
          -0.003824812825769186,
          0.011810800060629845,
          0.02765793912112713,
          0.0014017956564202905,
          0.003538732184097171,
          -0.010375195182859898,
          -0.02704763412475586,
          -0.008142031729221344,
          -0.017157908529043198,
          6.816090171923861e-05,
          -0.008703789673745632,
          -0.012851093895733356,
          -0.02455092966556549,
          -0.022775495424866676,
          0.005548232700675726,
          -0.0350370891392231,
          0.004570356570184231,
          -0.016935979947447777,
          -0.0003836082760244608,
          -0.007975583896040916,
          -0.013627845793962479,
          0.035286758095026016,
          0.027116985991597176,
          0.0003877260896842927,
          0.00907136034220457,
          0.021013930439949036,
          0.00858588982373476,
          -0.012344817630946636,
          0.01796240359544754,
          -0.0024602944031357765,
          0.016228580847382545,
          -0.010402936488389969,
          -0.01409251056611538,
          0.003474580589681864,
          0.015479568392038345,
          -0.026146046817302704,
          -0.009667795151472092,
          0.020098472014069557,
          -0.011172753758728504,
          0.0005678269080817699,
          -0.022054225206375122,
          -0.012268529273569584,
          0.004032871685922146,
          0.008343154564499855,
          0.0017997078830376267,
          -0.0027273029554635286,
          -0.005579441320151091,
          0.007136414293199778,
          0.008391701616346836,
          -0.0057562910951673985,
          -0.002380538498982787,
          0.03833828866481781,
          0.0005695607396773994,
          -0.037173159420490265,
          0.012219982221722603,
          0.03722864016890526,
          -0.018697543069720268,
          -0.025327682495117188,
          -0.015160545706748962,
          0.0015162279596552253,
          -0.0065295761451125145,
          -0.011165818199515343,
          0.005315900314599276,
          -0.01818433217704296,
          -0.016616957262158394,
          0.015535051003098488,
          0.003075801534578204,
          0.041251108050346375,
          0.006661346647888422,
          -0.006175876595079899,
          0.011103400029242039,
          -0.0055725062265992165,
          -0.014383792877197266,
          -0.1235036551952362,
          -0.025577351450920105,
          -0.002793188439682126,
          0.016616957262158394,
          -0.018697543069720268,
          0.03523127734661102,
          -0.0039981952868402,
          0.044940683990716934,
          -0.02726956270635128,
          0.04943475127220154,
          -0.02059781365096569,
          -0.008488795720040798,
          0.005652261897921562,
          -0.0015240301145240664,
          0.01194257102906704,
          -0.0017000131774693727,
          0.009653924964368343,
          -0.010174071416258812,
          -0.02923918515443802,
          0.024426093325018883,
          0.01201192382723093,
          -0.0022522355429828167,
          0.00601636478677392,
          -0.03021012619137764,
          -0.007035852409899235,
          -0.01052083633840084,
          -0.035675134509801865,
          0.03209652379155159,
          0.017116297036409378,
          0.004785350523889065,
          0.013093829154968262,
          -0.030681725591421127,
          -0.0012648236006498337,
          -0.009348771534860134,
          0.01201192382723093,
          -0.00966085959225893,
          0.010201812721788883,
          -0.011283718049526215,
          0.020778130739927292,
          -0.022803235799074173,
          -0.001422601519152522,
          0.014550239779055119,
          0.014134122058749199,
          -0.008308478631079197,
          -0.0005591578083112836,
          -0.021762942895293236,
          -0.010708088986575603,
          0.021887777373194695,
          0.009418124333024025,
          -0.017684990540146828,
          -0.03828280419111252,
          -0.018101109191775322,
          -0.0388098880648613,
          0.014023157767951488,
          0.01654760353267193,
          0.005749356001615524,
          0.011977246962487698,
          0.02339967153966427,
          -0.01909979060292244,
          -0.0013939933851361275,
          -0.01099937129765749,
          0.0015266308328136802,
          -0.030237866565585136,
          -0.002439488423988223,
          0.014702816493809223,
          0.0015613073483109474,
          0.0037623951211571693,
          -0.027325045317411423,
          0.011769188567996025,
          -0.010042301379144192,
          -0.001374054467305541,
          0.019266238436102867,
          -0.005336706060916185,
          0.004282542038708925,
          -0.01446701679378748,
          0.006942226085811853,
          -0.007663496304303408,
          -0.038144100457429886,
          -0.0013125037075951695,
          0.009889724664390087,
          -0.009515218436717987,
          -0.009501348249614239,
          0.01067341212183237,
          -0.005416462197899818,
          9.687734564067796e-05,
          -0.009217001497745514,
          -0.011346135288476944,
          -0.004695191979408264,
          -0.0009934804402291775,
          -0.01814272068440914,
          0.006602396722882986,
          0.03217975050210953,
          -0.0018846652237698436,
          -0.019210755825042725,
          0.0034069614484906197,
          0.011394682340323925,
          -0.016214709728956223,
          -0.012705452740192413,
          0.025674445554614067,
          0.0012509530643001199,
          -0.022276153787970543,
          0.010049236007034779,
          -0.05459460988640785,
          0.042360756546258926,
          0.0036861069966107607,
          -0.008974266238510609,
          -0.001708682277239859,
          -0.02094457857310772,
          0.015465698204934597,
          -0.022109705954790115,
          0.007372213993221521,
          0.009376512840390205,
          -0.016048261895775795,
          0.017102427780628204,
          -0.015257639810442924,
          -0.0058533851988613605,
          -0.024648023769259453,
          -0.010805183090269566,
          0.017532415688037872,
          -1.4070377574171289e-06,
          0.009959077462553978,
          0.006383934989571571,
          0.008003325201570988,
          -0.013870581053197384,
          0.02068103663623333,
          0.02041749656200409,
          0.01950203813612461,
          -0.014952486380934715,
          -0.024481575936079025,
          0.01517441589385271,
          -0.008884107694029808,
          -0.012899640947580338,
          -0.018239814788103104,
          -0.0040952893905341625,
          -0.008031066507101059,
          0.00907136034220457,
          -0.015229898504912853,
          -0.014147993177175522,
          0.016977591440081596,
          0.02629862166941166,
          0.02862888015806675,
          0.04738190770149231,
          -0.017671121284365654,
          -0.04197238013148308,
          0.008405572734773159,
          -0.014786039479076862,
          -0.007399955298751593,
          -0.021804554387927055,
          -0.012393364682793617,
          0.004053677432239056,
          0.02502252906560898,
          0.005596779752522707,
          0.039059557020664215,
          0.019959766417741776,
          -0.02982174977660179,
          -0.036784783005714417,
          -0.013142376206815243,
          0.014508628286421299,
          0.006033702753484249,
          -0.0006909283110871911,
          -0.005565570667386055,
          0.031153324991464615,
          0.032429419457912445,
          0.005485814996063709,
          0.009085230529308319,
          -0.004750674124807119,
          -7.639655814273283e-05,
          -0.003984324634075165,
          -0.004012065473943949,
          0.0016271925996989012,
          0.005846450105309486,
          0.007330602500587702,
          -0.0008387367124669254,
          0.013052216731011868,
          0.0025417839642614126,
          0.0025383164174854755,
          0.005506620742380619,
          -0.024342870339751244,
          0.018087238073349,
          0.01464733388274908,
          -0.017754344269633293,
          0.013600105419754982,
          0.0005639258306473494,
          -0.026756351813673973,
          0.00576322665438056,
          0.0035994157660752535,
          0.021000059321522713,
          0.005919270683079958,
          -0.016089875251054764,
          0.009286354295909405,
          -0.005999026354402304,
          -0.009210065938532352,
          -0.00040289704338647425,
          -0.0014503427082672715,
          -0.00998681876808405,
          0.01167902909219265,
          0.029655303806066513,
          -0.00847492553293705,
          -0.0024030781351029873,
          0.013600105419754982,
          0.01751854456961155,
          -0.003190233837813139,
          0.01676953211426735,
          -0.020015249028801918,
          0.00996601302176714,
          -0.017463061958551407,
          -0.032512642443180084,
          0.007042787503451109,
          -0.03392744064331055,
          -0.007143349386751652,
          0.0376724973320961,
          0.01654760353267193,
          0.016922108829021454,
          -0.005600247066468,
          0.01003536581993103,
          0.006904081907123327,
          -0.01769886165857315,
          0.019959766417741776,
          -0.011498712003231049,
          -0.006997708231210709,
          -0.03065398521721363,
          0.0380331352353096,
          0.04524583742022514,
          0.01792079210281372,
          0.04416393116116524,
          -0.014300569891929626,
          0.007774461060762405,
          0.002328523900359869,
          0.02893403358757496,
          -0.03134751319885254,
          0.01664469763636589,
          -0.014730557799339294,
          -0.0031815646216273308,
          -0.005607182625681162,
          -0.018766896799206734,
          0.0019366799388080835,
          -0.006120393984019756,
          -0.0005314166774041951,
          -0.00964005384594202,
          0.01656147465109825,
          -0.006175876595079899,
          0.054650090634822845,
          0.015840204432606697,
          0.00448019802570343,
          0.022553564980626106,
          -0.017365967854857445,
          0.019252367317676544,
          0.01196337677538395,
          0.027630198746919632,
          -0.0010689017362892628,
          -0.01567375659942627,
          0.004161174409091473,
          -0.00734447268769145,
          -6.501835014205426e-05,
          -0.03894859179854393,
          -0.012747064232826233,
          -0.003341076197102666,
          -0.0032214424572885036,
          0.013620911166071892,
          -0.008114290423691273,
          -0.011124206706881523,
          0.03448226675391197,
          0.006463691126555204,
          0.0222206711769104,
          0.009806500747799873,
          -0.00626950291916728,
          -0.0015977176371961832,
          0.024994786828756332,
          0.0020407093688845634,
          -0.0042790742591023445,
          -0.011672094464302063,
          0.035758357495069504,
          0.02398223616182804,
          -0.03095913678407669,
          -0.021013930439949036,
          -0.0033549468498677015,
          0.001775434473529458,
          0.015576662495732307,
          -0.036340922117233276,
          -0.005617585498839617,
          -0.006789649371057749,
          -0.007621884346008301,
          0.008239124901592731,
          0.0005409526638686657,
          -0.020583942532539368,
          0.0013315757969394326,
          -0.0014789507258683443,
          -0.01686662621796131,
          0.00042326946277171373,
          -0.015867944806814194
        ]
      },
      "type": "document"
    },
    {
      "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
      "properties": {
        "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
        "themes": [
          "Prompt driven app generation",
          "Universal access to AI models",
          "Inference-scaling reasoning models",
          "Environmental impact of AI",
          "Synthetic training data",
          "Knowledge distribution",
          "Criticism of LLMs",
          "Increased context lengths",
          "Competition in AI models",
          "Efficiency and cost reduction in LLMs"
        ],
        "entities": [
          "Apple",
          "Apple's MLX",
          "GPT-4",
          "OpenAI",
          "Google",
          "Gemini 1.5 Pro",
          "Claude 3",
          "Claude 3.5 Sonnet",
          "Anthropic",
          "Chatbot Arena Leaderboard"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
      "properties": {
        "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
        "themes": [
          "Pricing changes in AI models",
          "Increased competition and efficiency",
          "Environmental impact of AI",
          "Cost efficiency in AI processing",
          "Multi-modal LLMs",
          "Advancements in vision, audio, and video models",
          "Voice and live camera modes",
          "OpenAI's Whisper and TTS models",
          "Google's Gemini models",
          "Amazon Nova's voice mode"
        ],
        "entities": [
          "OpenAI",
          "GPT-4o",
          "GPT-3.5",
          "Anthropic",
          "Claude 3",
          "Google",
          "Gemini 1.5 Flash",
          "California Academy of Sciences",
          "ChatGPT",
          "Amazon Nova"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "a08bda4a-e802-4c63-8391-f2761c382205",
      "properties": {
        "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
        "themes": [
          "Real-time camera feed analysis",
          "Google Gemini",
          "OpenAI API access",
          "WebRTC API",
          "Prompt-driven app generation",
          "Claude Artifacts",
          "Interactive applications",
          "GitHub Spark",
          "Universal access to AI models",
          "AI agents and autonomy"
        ],
        "entities": [
          "Google Gemini",
          "ChatGPT",
          "OpenAI",
          "GPT-4",
          "Anthropic",
          "Claude Artifacts",
          "Claude 3.5 Sonnet",
          "GitHub",
          "GitHub Spark",
          "Mistral Chat"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
      "properties": {
        "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
        "entities": [
          "Anthropic",
          "Amanda Askell",
          "Claude",
          "Vercel",
          "Malte Ubl",
          "ASML",
          "Apple",
          "NVIDIA",
          "Hugging Face",
          "OpenAI"
        ],
        "themes": [
          "AGI and gullibility",
          "Test-driven development for system prompts",
          "Automated evaluations for LLMs",
          "Apple's MLX library",
          "Inference-scaling reasoning models",
          "OpenAI's o1 and o3 models",
          "Google's gemini-2.0-flash-thinking-exp",
          "Alibaba's Qwen and QvQ models",
          "DeepSeek models",
          "LLM architecture advancements"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
      "properties": {
        "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
        "themes": [
          "DeepSeek v3",
          "Large language models",
          "Training cost",
          "Environmental impact",
          "Infrastructure buildout",
          "AI-generated content",
          "Slop",
          "Synthetic training data",
          "Model collapse",
          "Energy efficiency"
        ],
        "entities": [
          "DeepSeek v3",
          "Meta",
          "Llama",
          "Claude 3.5 Sonnet",
          "Gemini 2.0",
          "OpenAI",
          "Google",
          "Amazon",
          "Microsoft",
          "New York"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
      "properties": {
        "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
        "entities": [
          "DeepSeek v3",
          "DeepSeek-R1",
          "Meta",
          "Llama 3.3",
          "OpenAI",
          "o1",
          "GPT-4o",
          "ChatGPT",
          "Claude",
          "Mastodon"
        ],
        "themes": [
          "Reasoning patterns",
          "Training data design",
          "Large language models (LLMs)",
          "User experience challenges",
          "Knowledge gap",
          "Criticism of LLMs",
          "Ethics and reliability",
          "Technological impact on society",
          "Education and understanding",
          "Positive and negative applications"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
      "properties": {
        "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
        "themes": [
          "Large Language Models",
          "GPT-4",
          "Technological advancements",
          "Cost reduction",
          "Multimodal vision",
          "Audio and video integration",
          "Voice technology",
          "Live camera mode",
          "Competition",
          "Increased efficiency"
        ],
        "entities": [
          "Simon Willison",
          "Weblog",
          "LLMs",
          "2024",
          "Large Language Models",
          "2023",
          "GPT-4"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
      "properties": {
        "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
        "themes": [
          "Artificial Intelligence",
          "Large Language Models (LLMs)",
          "Open Source",
          "Prompt Injection",
          "ChatGPT",
          "Claude",
          "Gemini",
          "AI Engineering",
          "Video Scraping",
          "Generative AI"
        ],
        "entities": [
          "Artificial Intelligence",
          "Open Source LLMs",
          "Gemini Pro 1.5",
          "GPT-4",
          "Claude",
          "ChatGPT",
          "Llama 3",
          "WWDC 2024",
          "PyCon US 2024",
          "OpenAI"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
      "properties": {
        "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
        "themes": [
          "Large Language Models (LLMs)",
          "Training data",
          "OpenAI",
          "Model training costs",
          "Local deployment of LLMs",
          "Fine-tuning models",
          "Open vs closed models",
          "GPT-4",
          "Innovation in AI",
          "Ethics of AI"
        ],
        "entities": [
          "2023",
          "2024",
          "OpenAI",
          "Anthropic",
          "Mistral",
          "Google",
          "Meta",
          "EleutherAI",
          "Stability AI",
          "TII in Abu Dhabi"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "cf5e6873-e081-420c-af50-def2978c3d69",
      "properties": {
        "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
        "themes": [
          "LLMs (Large Language Models)",
          "Black box nature of AI",
          "Prompting challenges",
          "Evaluation of AI models",
          "Vibes Based Development",
          "Gullibility of AI",
          "AI personal assistants",
          "Code generation",
          "Ethics of AI training data",
          "Legal issues in AI"
        ],
        "entities": [
          "LLMs",
          "ChatGPT",
          "December",
          "September",
          "AGI",
          "Python",
          "JavaScript",
          "Chinese",
          "Spanish",
          "English"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
      "properties": {
        "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
        "themes": [
          "Large Language Models",
          "Artificial Intelligence",
          "Breakthrough year",
          "Academic development",
          "Building LLMs",
          "Running LLMs on personal devices",
          "Hobbyist model building",
          "GPT-4",
          "Vibes Based Development",
          "Gullibility problem"
        ],
        "entities": [
          "Simon Willison",
          "Weblog",
          "AI",
          "2023",
          "Large Language Models",
          "LLMs",
          "Artificial Intelligence",
          "1950s",
          "GPT-4"
        ]
      },
      "type": "chunk"
    },
    {
      "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
      "properties": {
        "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
        "themes": [
          "Large Language Models (LLMs)",
          "AI ethics and legality",
          "Impact of AI on employment",
          "Generative AI",
          "Prompt injection",
          "AI-enhanced development",
          "OpenAI",
          "AI journalism",
          "AI model training",
          "AI in content creation"
        ],
        "entities": [
          "LLMs",
          "AI",
          "ChatGPT",
          "OpenAI",
          "Google",
          "Stable Diffusion",
          "DALL-E 3",
          "Stanford Alpaca",
          "Llama 2",
          "Simon Willison"
        ]
      },
      "type": "chunk"
    }
  ],
  "relationships": [
    {
      "id": "fac51add-fdf6-40bc-a796-479278db6db2",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "2cd7d657-6a5c-483a-a344-884829d96b7d",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "6cb323be-93ba-4b07-9f59-bc232e21f102",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "d98bddbe-cc67-4967-9cd2-112ec2f3ca18",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "40af0e64-ada1-4e18-bb7b-2607fd82e965",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "a71851a9-7c5e-4506-9f8e-8c10c0ba77ce",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "f9a9e1a8-2fa5-4934-acbf-20e684c11a93",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "efdbfbb7-2eca-44d8-849b-c793d3769210",
      "type": "child",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "2f99580f-03a4-40e2-9c1c-9a8f757beffd",
      "type": "next",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "9f9d0a3e-08f2-4c8b-9005-49f14d03c55b",
      "type": "next",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "a3a499eb-60e2-46f6-93e6-18f219bdda8b",
      "type": "next",
      "source": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "18d11c7a-0215-4577-89b0-f554e19f939d",
      "type": "next",
      "source": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "73f6c308-8b5d-40b2-b38b-5de5281d0826",
      "type": "next",
      "source": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "b9014e4a-b700-4d2c-aa7c-4771655a7f5e",
      "type": "next",
      "source": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "cf561537-c974-4ece-8d0a-4908032e0932",
      "type": "next",
      "source": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "8451bba5-7d92-4c15-9bdc-0e427602b639",
      "type": "child",
      "source": {
        "id": "d4054310-41ff-4d85-bb2f-84ef02a66fb2",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nStuff we figured out about AI in 2023\n\n31st December 2023\n\n2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s.\n\nHere’s my attempt to round up the highlights in one place!\n\nLarge Language Models\n\nThey’re actually quite easy to build\n\nYou can run LLMs on your own devices\n\nHobbyists can build their own fine-tuned models\n\nWe don’t yet know how to build GPT-4\n\nVibes Based Development\n\nLLMs are really smart, and also really, really dumb\n\nGullibility is the biggest unsolved problem\n\nCode may be the best application\n\nThe ethics of this space remain diabolically complex\n\nMy blog in 2023\n\nHere’s the sequel to this post: Things we learned about LLMs in 2024.\n\nLarge Language Models\n\nIn the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software.\n\nLLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code.\n\nThey can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes.\n\nSo far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life.\n\nA lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity.\n\nThey’re actually quite easy to build\n\nThe most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build.\n\nIntuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version!\n\nWhat matters most is the training  data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is.\n\nIf you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM.\n\nA year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations.\n\nThe training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing.\n\nSo training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries).\n\nYou can run LLMs on your own devices\n\nIn January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them.\n\nThen in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook.\n\nI wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call!\n\nThis unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use.\n\nToday there are literally thousands of LLMs that can be run locally, on all manner of different devices.\n\nI run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins.\n\nYou can even run them entirely in your browser using WebAssembly and the latest Chrome!\n\nHobbyists can build their own fine-tuned models\n\nI said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely.\n\nThere’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too.\n\nThe Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours.\n\nThe best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data.\n\nThis is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them.\n\nWe don’t yet know how to build GPT-4\n\nFrustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4.\n\nOpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing.\n\nThis may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out.\n\nThe team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then.\n\nStill, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet.\n\nVibes Based Development\n\nAs a computer scientist and software engineer, LLMs are infuriating.\n\nEven the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them.\n\nI’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that!\n\nThe worst part is the challenge of evaluating them.\n\nThere are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task.\n\nI find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself!\n\nThe most frustrating thing for me is at the level of individual prompting.\n\nSometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out.\n\nWe’re left with what’s effectively Vibes Based Development. It’s vibes all the way down.\n\nI’d love to see us move beyond vibes in 2024!\n\nLLMs are really smart, and also really, really dumb\n\nOn the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun!\n\nBut on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb.\n\nDoes ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays?\n\nThe honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer.\n\nSometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead.\n\nThere are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works!\n\nGullibility is the biggest unsolved problem\n\nI coined the term prompt injection in September last year.\n\n15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem.\n\nI’ve written a ton about this already.\n\nBeyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility.\n\nLanguage Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt.\n\nIn order to be useful tools for us, we need them to believe what we feed them!\n\nBut it turns out a lot of the things we want to build need them not to be gullible.\n\nEveryone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited.\n\nA lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes.\n\nI think this is because of gullibility.\n\nCan we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true!\n\nCode may be the best application\n\nOver the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of.\n\nIf you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English.\n\nIt’s still astonishing to me how effective they are though.\n\nOne of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless.\n\nExcept... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works!\n\nSo hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language!\n\nHow should we feel about this as software engineers?\n\nOn the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you?\n\nOn the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can.\n\nThe ethics of this space remain diabolically complex\n\nIn September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion.\n\nSince then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data.\n\nJust this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere.\n\nThe legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future.\n\nLaw is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people?\n\nAs the quality of results produced by AI models has increased over the year, these questions have become even more pressing.\n\nThe impact on human society in terms of these models is already huge, if difficult to objectively measure.\n\nPeople have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators.\n\nThere are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic.\n\nMy blog in 2023\n\nHere’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard):\n\nThe top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78).\n\nI’ve written a lot about this stuff!\n\nI grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic:\n\nArticle Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k\n\nI also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023:\n\nPrompt injection explained, with video, slides, and a transcript\n\nCatching up on the weird world of LLMs\n\nMaking Large Language Models work for you\n\nOpen questions for AI engineering\n\nEmbeddings: What they are and why they matter\n\nFinancial sustainability for open source projects at GitHub Universe\n\nAnd in podcasts:\n\nWhat AI can do for you on the Theory of Change\n\nWorking in public on Path to Citus Con\n\nLLMs break the internet on the Changelog\n\nTalking Large Language Models on Rooftop Ruby\n\nThoughts on the OpenAI board situation on Newsroom Robots\n\nIndustry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations\n\nPosted \n\n31st December 2023 at 11:59 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\nblogging\n            68\n\nai\n            1091\n\ngenerative-ai\n            936\n\nllms\n            924\n\nNext: Tom Scott, and the formidable power of escalating streaks\n\nPrevious: Last weeknotes of 2023\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2023_llms.html"
          },
          "headlines": [
            "Large Language Models",
            "Vibes Based Development",
            "LLMs are really smart, and also really, really dumb",
            "Gullibility is the biggest unsolved problem",
            "Code may be the best application"
          ],
          "summary": "In 2023, Large Language Models (LLMs) emerged as a significant development in AI, with advancements making them easier to build and run on personal devices. Despite their capabilities, LLMs remain complex and unpredictable, with gullibility being a major unresolved issue. They excel in generating code, as errors can be tested and corrected, reducing the impact of hallucinations. The ethics of using unlicensed data for training these models are contentious, highlighted by legal actions like the New York Times lawsuit against OpenAI. The year also saw a proliferation of LLMs from various organizations, though none have surpassed GPT-4. The field continues to grapple with the challenges of understanding and controlling these models, often relying on 'Vibes Based Development' due to the lack of clear methodologies.",
          "summary_embedding": [
            -0.011880152858793736,
            0.005520491395145655,
            0.003946180455386639,
            -0.037700239568948746,
            -0.007885425351560116,
            0.010083912871778011,
            -0.017019202932715416,
            0.024648023769259453,
            -0.027394399046897888,
            -0.03700670972466469,
            0.021000059321522713,
            0.0209029670804739,
            -0.029183702543377876,
            0.0010593656916171312,
            -0.0022487679962068796,
            0.014550239779055119,
            0.023122258484363556,
            0.0017624307656660676,
            0.017684990540146828,
            -0.014827651903033257,
            0.005770161747932434,
            0.0033341411035507917,
            -0.018475614488124847,
            -0.01812884956598282,
            -0.004438586067408323,
            0.005416462197899818,
            0.018697543069720268,
            -0.037256382405757904,
            -0.01563214510679245,
            0.005780564621090889,
            0.01914140209555626,
            -0.00017869210569188,
            -0.03395518288016319,
            0.007455437444150448,
            -0.03176363185048103,
            -0.00686246994882822,
            0.024537058547139168,
            -0.00603717053309083,
            0.017879178747534752,
            0.009140713140368462,
            0.030154643580317497,
            0.024745117872953415,
            0.015299251303076744,
            -0.017851438373327255,
            -0.018517225980758667,
            0.017629509791731834,
            0.007608013693243265,
            -0.01976557821035385,
            -0.03215200826525688,
            0.018850119784474373,
            0.018392391502857208,
            0.029849492013454437,
            -0.01005617156624794,
            -0.01352381706237793,
            -0.00445592449977994,
            0.00506969727575779,
            -0.0028954839799553156,
            0.006734167225658894,
            0.013509945943951607,
            -0.001715617487207055,
            -0.006474093999713659,
            -0.020611684769392014,
            -0.004448988940566778,
            0.025313811376690865,
            -0.0043588303960859776,
            -0.007122543640434742,
            -0.023413540795445442,
            0.029183702543377876,
            0.031070102006196976,
            -0.013371240347623825,
            0.0006211419822648168,
            -0.0110201770439744,
            0.013052216731011868,
            -0.005551700014621019,
            0.014758298173546791,
            0.003214507130905986,
            -0.012344817630946636,
            -0.01361397560685873,
            -0.02595185860991478,
            0.00482002692297101,
            -0.003252651309594512,
            0.0050523593090474606,
            -0.010569383390247822,
            0.02278936468064785,
            0.017324356362223625,
            -0.0038074746262282133,
            -0.0057285502552986145,
            -0.018114978447556496,
            -0.004667450673878193,
            -0.014127187430858612,
            -0.006696023046970367,
            -0.005035020876675844,
            0.021860036998987198,
            0.017490802332758904,
            -0.008135096170008183,
            -0.006411676295101643,
            -0.012358687818050385,
            0.009952141903340816,
            -0.014702816493809223,
            -0.022775495424866676,
            -0.007261249236762524,
            0.0014988897601142526,
            -0.04383103549480438,
            -0.008738466538488865,
            -0.020694907754659653,
            0.004074483178555965,
            0.015271509997546673,
            0.022997424006462097,
            0.02051459066569805,
            0.014550239779055119,
            -0.012372558936476707,
            0.027990832924842834,
            0.005596779752522707,
            -0.026312492787837982,
            -0.00212393281981349,
            -0.009972947649657726,
            0.006040638312697411,
            0.001518828677944839,
            -0.001785837346687913,
            0.0013610507594421506,
            0.03267908841371536,
            0.01052083633840084,
            0.012892705388367176,
            0.0011243839981034398,
            0.023968365043401718,
            -0.011075659655034542,
            3.1615174520993605e-05,
            -0.020805872976779938,
            -0.011103400029242039,
            -0.0023406606633216143,
            0.004077950958162546,
            0.00500728003680706,
            0.008870236575603485,
            0.0070982701145112514,
            -0.03087591379880905,
            0.040640804916620255,
            -0.015618274919688702,
            -0.002240099012851715,
            0.006928355433046818,
            0.009889724664390087,
            0.004771479871124029,
            0.026950540021061897,
            -0.024009976536035538,
            0.019335590302944183,
            -0.011124206706881523,
            0.020403625443577766,
            0.0057458882220089436,
            0.016533732414245605,
            -0.0015214293962344527,
            -0.0012630898272618651,
            0.00803800206631422,
            -0.035286758095026016,
            -0.020833613350987434,
            0.016408897936344147,
            0.009189260192215443,
            0.005392188671976328,
            0.00906442478299141,
            0.030543019995093346,
            -0.038837626576423645,
            -0.015867944806814194,
            -0.013232534751296043,
            0.015743110328912735,
            -0.004001662600785494,
            0.015951167792081833,
            0.013856710866093636,
            0.021000059321522713,
            0.021582623943686485,
            -0.0030723337549716234,
            -0.007892360910773277,
            -0.011561129242181778,
            -0.017754344269633293,
            0.03595254570245743,
            -0.0342603363096714,
            0.01559053361415863,
            -0.009667795151472092,
            0.016811145469546318,
            0.02309451811015606,
            -0.0018499888246878982,
            -0.026881186291575432,
            -0.011783058755099773,
            0.02037588320672512,
            0.005343641620129347,
            0.008315413258969784,
            -0.00343123497441411,
            -0.021832294762134552,
            0.0033705513924360275,
            0.014085575006902218,
            0.0008309344993904233,
            0.01062486506998539,
            -0.02489769272506237,
            0.02871210314333439,
            0.01654760353267193,
            -0.005423397291451693,
            -0.01932171918451786,
            -0.6506966948509216,
            -0.03523127734661102,
            0.013974610716104507,
            -0.012781741097569466,
            -0.0027567781507968903,
            -0.006595461629331112,
            -0.005253482609987259,
            -0.01453636959195137,
            -0.02072264812886715,
            0.036729298532009125,
            -0.012358687818050385,
            0.002305984264239669,
            -0.003167693968862295,
            -0.0203342717140913,
            0.010721959173679352,
            -0.009189260192215443,
            0.001533566159196198,
            -0.025494128465652466,
            0.007774461060762405,
            0.01769886165857315,
            -0.0047541419044137,
            0.01611761562526226,
            -0.006300711538642645,
            -0.010569383390247822,
            -0.027338916435837746,
            0.0037346540484577417,
            0.013385111466050148,
            0.01690823957324028,
            -0.008322348818182945,
            0.006675217300653458,
            -0.014168798923492432,
            0.006616267375648022,
            -0.005707744043320417,
            0.008967330679297447,
            0.04904637485742569,
            0.00063111144118011,
            -0.018766896799206734,
            0.021971000358462334,
            0.0012232118751853704,
            0.007788331247866154,
            -0.04119562730193138,
            -0.012268529273569584,
            -0.004400441888719797,
            0.029433373361825943,
            -0.010500029660761356,
            0.030986879020929337,
            0.025702187791466713,
            -0.01158887054771185,
            -0.016519863158464432,
            -0.00633538793772459,
            0.0014286699006333947,
            0.0051598562858998775,
            0.0040952893905341625,
            0.0010567649733275175,
            0.0031867660582065582,
            0.012968993745744228,
            0.014231216162443161,
            -0.013828969560563564,
            0.0021586092188954353,
            -0.020805872976779938,
            -0.0008630102383904159,
            -0.014799910597503185,
            -0.026645386591553688,
            -0.030487537384033203,
            -0.015313121490180492,
            0.011276782490313053,
            0.006789649371057749,
            0.010742764919996262,
            -0.004930991679430008,
            -0.015701498836278915,
            -0.004594630096107721,
            0.04280461370944977,
            -0.0019332122756168246,
            -0.011609676294028759,
            -0.007809137459844351,
            0.014002352021634579,
            0.005416462197899818,
            -0.014453145675361156,
            -0.002104860730469227,
            0.01106178853660822,
            0.003309867577627301,
            -0.02161036618053913,
            -0.0003725551359821111,
            -0.0006566853262484074,
            0.0388098880648613,
            0.0036895745433866978,
            0.012788675725460052,
            -0.0009622715879231691,
            0.0010827722726389766,
            0.008703789673745632,
            0.005191064905375242,
            0.030321091413497925,
            -0.014952486380934715,
            -0.051348891109228134,
            0.004459391813725233,
            0.01690823957324028,
            -0.018558837473392487,
            0.014286698773503304,
            0.021069413051009178,
            -0.028268244117498398,
            -0.004608500748872757,
            -0.013822034001350403,
            0.042527202516794205,
            0.02538316324353218,
            0.012407234869897366,
            0.022553564980626106,
            0.0027116986457258463,
            0.001938413712196052,
            0.013822034001350403,
            -0.025979598984122276,
            -0.006706425920128822,
            0.0035040555521845818,
            -0.0005639258306473494,
            -0.006383934989571571,
            -0.0057458882220089436,
            -0.03217975050210953,
            -0.007171090692281723,
            -0.01255981158465147,
            0.011741447262465954,
            -0.026881186291575432,
            0.018031755462288857,
            -0.006914484780281782,
            0.02915596216917038,
            -0.0041715772822499275,
            -0.00017825864779297262,
            0.0009735414059832692,
            0.004088353831321001,
            -0.01016713585704565,
            -0.0035924806725233793,
            0.0242873877286911,
            -0.008488795720040798,
            -0.022428730502724648,
            0.016741791740059853,
            -0.012379493564367294,
            0.016755662858486176,
            0.013919128105044365,
            0.04849155247211456,
            -0.008336219005286694,
            0.009744083508849144,
            0.017005333676934242,
            -0.023690953850746155,
            0.0013411118416115642,
            0.010458418168127537,
            0.014508628286421299,
            -0.04058532044291496,
            -0.03287327662110329,
            -0.005527426488697529,
            -0.006321517284959555,
            0.005461541470140219,
            -0.014702816493809223,
            -0.014799910597503185,
            -0.01761563867330551,
            -0.01848948560655117,
            0.03412162885069847,
            -0.001908938749693334,
            -0.00776059040799737,
            -0.0091337775811553,
            -0.021984871476888657,
            -0.004424715414643288,
            -0.021332954987883568,
            0.010000688955187798,
            0.009265548549592495,
            0.004157706629484892,
            0.008481860160827637,
            0.016783403232693672,
            -0.02301129512488842,
            -0.01049309503287077,
            0.028989514335989952,
            -0.0384492501616478,
            -0.020792001858353615,
            0.0034295013174414635,
            -0.03764475882053375,
            0.014480886980891228,
            0.03181911259889603,
            -0.009397318586707115,
            0.027768904343247414,
            -0.0069318232126533985,
            0.0016688043251633644,
            0.007001176010817289,
            -0.013731875456869602,
            0.006720296572893858,
            0.029100479558110237,
            0.012712388299405575,
            -0.006318049971014261,
            0.013662522658705711,
            0.02309451811015606,
            0.0368957482278347,
            0.016838885843753815,
            -0.0014512095367535949,
            0.0040155332535505295,
            0.004580759443342686,
            0.036118995398283005,
            -0.0040155332535505295,
            0.0067445700988173485,
            -0.013697199523448944,
            0.026270881295204163,
            0.001154725905507803,
            -0.01905817911028862,
            0.007150284945964813,
            0.025854764506220818,
            0.012136758305132389,
            0.01778208464384079,
            0.01607600413262844,
            -0.012844158336520195,
            0.0073791490867733955,
            -0.023635471239686012,
            5.252940900390968e-05,
            -0.012268529273569584,
            -0.009106036275625229,
            0.016325674951076508,
            0.007940907962620258,
            0.0009822105057537556,
            -0.011034047231078148,
            -0.01521602738648653,
            0.0036861069966107607,
            0.029044996947050095,
            0.000787155469879508,
            0.016935979947447777,
            -0.00845411978662014,
            -9.189260163111612e-05,
            0.004965668078511953,
            0.005520491395145655,
            0.016145355999469757,
            -0.011380812153220177,
            0.0010775708360597491,
            0.01514667458832264,
            -0.018558837473392487,
            0.011165818199515343,
            -0.00408488605171442,
            -0.034315817058086395,
            0.013364304788410664,
            0.015951167792081833,
            0.022331636399030685,
            0.01765725016593933,
            0.004629306495189667,
            -0.011366941034793854,
            0.02266453020274639,
            -0.009473606944084167,
            0.02609056420624256,
            -3.0721170332981274e-05,
            -0.009230871684849262,
            0.012476587668061256,
            -0.0003751558833755553,
            -0.008031066507101059,
            0.034676454961299896,
            -0.007268184795975685,
            0.0376724973320961,
            -0.010617930442094803,
            -0.03209652379155159,
            0.004282542038708925,
            -0.03947567567229271,
            0.012226917780935764,
            -0.025965727865695953,
            -0.00034546415554359555,
            -0.00016861424956005067,
            -0.023954493924975395,
            0.00854427833110094,
            2.0562052668537945e-05,
            0.020098472014069557,
            0.008239124901592731,
            -0.012407234869897366,
            0.003056729445233941,
            0.0075317258015275,
            0.0029839088674634695,
            0.010201812721788883,
            -0.008904913440346718,
            -0.010007624514400959,
            0.0047541419044137,
            -0.015965038910508156,
            -0.016533732414245605,
            -0.02603508159518242,
            -0.0191968847066164,
            0.006553849671036005,
            -0.033622290939092636,
            0.04163948446512222,
            -0.0038421510253101587,
            0.006415144074708223,
            0.0014581448631361127,
            0.01690823957324028,
            0.04249946027994156,
            -0.021374566480517387,
            -0.03817183896899223,
            0.022678401321172714,
            0.005204935558140278,
            -0.0015769117744639516,
            -0.016880497336387634,
            -0.04541228339076042,
            0.009841177612543106,
            0.0029613692313432693,
            -0.013059152290225029,
            -0.006155070383101702,
            0.006106523331254721,
            -0.0036410277243703604,
            0.0028902823105454445,
            -0.012157564982771873,
            0.028961773961782455,
            0.0241070706397295,
            -0.004022468812763691,
            -0.00896039605140686,
            -0.01577085070312023,
            0.0032578527461737394,
            0.010063107125461102,
            -0.006432482041418552,
            -0.023524506017565727,
            0.02840695157647133,
            -0.00906442478299141,
            -0.040418874472379684,
            0.002739439718425274,
            0.0017130167689174414,
            -0.008197513408958912,
            -0.009411189705133438,
            0.00891184899955988,
            0.011221300810575485,
            0.004320686217397451,
            0.016963720321655273,
            0.017046945169568062,
            0.010687283240258694,
            0.005426865071058273,
            0.010763571597635746,
            0.008301543071866035,
            0.013322693295776844,
            -0.03933696821331978,
            -0.0001738157297950238,
            0.01314931083470583,
            0.07401341944932938,
            0.004119562450796366,
            -0.017449190840125084,
            0.0038386834785342216,
            -0.024356741458177567,
            -0.01918301358819008,
            -0.01861432008445263,
            -0.007060125935822725,
            0.0062660351395606995,
            0.028989514335989952,
            -0.01585407368838787,
            -0.00557597354054451,
            0.012608358636498451,
            -0.0013766551855951548,
            0.023968365043401718,
            0.020653296262025833,
            0.017684990540146828,
            -0.025175105780363083,
            -0.02893403358757496,
            -0.013932999223470688,
            0.00034914855496026576,
            0.0033740189392119646,
            0.016131486743688583,
            0.011276782490313053,
            0.012324011884629726,
            -0.012039664201438427,
            0.02489769272506237,
            0.015451828017830849,
            -0.03819958120584488,
            -0.019571390002965927,
            0.0048963152803480625,
            0.0067931171506643295,
            0.007524790242314339,
            0.0160205215215683,
            -0.006779246497899294,
            0.015368604101240635,
            0.016492120921611786,
            0.0012405500747263432,
            0.0064220791682600975,
            -0.001980025554075837,
            0.030265608802437782,
            0.027519233524799347,
            0.0017806359101086855,
            -0.008114290423691273,
            0.0018101108726114035,
            -0.024564798921346664,
            -0.001299500116147101,
            0.04105691984295845,
            0.00902281329035759,
            -0.03498160466551781,
            0.014369922690093517,
            -0.0010255561210215092,
            -0.023593859747052193,
            -0.006148135289549828,
            0.01585407368838787,
            0.016228580847382545,
            0.010250359773635864,
            -0.0014659470180049539,
            -0.004265203606337309,
            -0.017587896436452866,
            -0.018586579710245132,
            -0.033650029450654984,
            -0.00812122505158186,
            -0.022914201021194458,
            -0.010500029660761356,
            1.1398529750294983e-05,
            -0.025008657947182655,
            0.009820371866226196,
            -0.0463554821908474,
            0.008669113740324974,
            0.0013489139964804053,
            -0.028795326128602028,
            -0.05251402035355568,
            -0.004414312541484833,
            0.010916147381067276,
            -0.014716686680912971,
            0.026243140920996666,
            -0.006904081907123327,
            0.004240930080413818,
            0.013780422508716583,
            -0.006647475995123386,
            -0.006574655417352915,
            -0.010500029660761356,
            -0.007413825951516628,
            0.008329284377396107,
            -0.004712529946118593,
            -0.02187390625476837,
            -0.015229898504912853,
            0.00043172185542061925,
            0.01269158162176609,
            0.007212702184915543,
            -0.003935777582228184,
            -0.005922738462686539,
            0.015063451603055,
            -0.011873217299580574,
            0.015965038910508156,
            0.024842211976647377,
            0.011283718049526215,
            -0.0027862531132996082,
            -0.020126214250922203,
            -0.00907136034220457,
            -0.02037588320672512,
            -0.03104236163198948,
            -0.0191968847066164,
            0.008357025682926178,
            0.010007624514400959,
            0.024439964443445206,
            0.026021210476756096,
            0.0014312706189230084,
            -0.009327965788543224,
            0.006193214561790228,
            -0.007614949252456427,
            0.019793320447206497,
            -0.003623689291998744,
            0.017241133376955986,
            0.006928355433046818,
            0.016173098236322403,
            0.004372700583189726,
            0.018059497699141502,
            -0.024994786828756332,
            -0.0259934701025486,
            -0.04768705740571022,
            0.03179137408733368,
            0.009397318586707115,
            -0.011200494132936,
            0.024079328402876854,
            0.016630826517939568,
            0.011540323495864868,
            -0.03684026375412941,
            0.014057834632694721,
            0.003963518422096968,
            0.027214080095291138,
            0.00267355446703732,
            -0.0022088901605457067,
            -0.020306531339883804,
            -0.02072264812886715,
            -0.016131486743688583,
            0.013662522658705711,
            -0.01883624866604805,
            -0.013225599192082882,
            0.01656147465109825,
            0.024426093325018883,
            -0.0009206598624587059,
            -0.018059497699141502,
            0.022761624306440353,
            -0.026548292487859726,
            -0.009820371866226196,
            0.027255691587924957,
            0.01251126453280449,
            0.04874122142791748,
            -0.016325674951076508,
            0.021277472376823425,
            -0.04152851924300194,
            -0.02234550751745701,
            0.005790967959910631,
            -0.02265065908432007,
            0.0026787561364471912,
            0.003966986201703548,
            0.027949221432209015,
            0.00907136034220457,
            0.04496842622756958,
            -0.007497049402445555,
            0.007406890392303467,
            0.007358343340456486,
            -0.008710725232958794,
            -0.01297592930495739,
            -0.0013003670610487461,
            -0.005645326804369688,
            -0.010659541934728622,
            -0.0005288159009069204,
            -0.009757953695952892,
            -0.008315413258969784,
            0.026229269802570343,
            -0.007871555164456367,
            -0.012989799492061138,
            0.0031018087174743414,
            -0.014897004701197147,
            -0.008384766057133675,
            -0.020362013950943947,
            -0.02256743609905243,
            -0.02209583669900894,
            -0.002709964755922556,
            -0.0014486088184639812,
            0.01264997012913227,
            -0.0222206711769104,
            -0.005842982325702906,
            0.015604403801262379,
            0.013607040047645569,
            0.001834384398534894,
            -0.00048113579396158457,
            0.01812884956598282,
            0.004372700583189726,
            -0.008946524932980537,
            0.024967046454548836,
            0.005978220608085394,
            -0.04197238013148308,
            -0.005849917884916067,
            -0.0429433211684227,
            0.0021291342563927174,
            0.02577153965830803,
            0.0043865712359547615,
            0.01822594366967678,
            0.013260276056826115,
            -0.01163741759955883,
            0.007268184795975685,
            0.005988623481243849,
            0.0021395371295511723,
            -0.008065743371844292,
            -0.013364304788410664,
            -0.027172468602657318,
            -0.00675150565803051,
            -0.025494128465652466,
            -0.018947213888168335,
            -0.015576662495732307,
            -0.010749700479209423,
            -0.0053575122728943825,
            0.009820371866226196,
            0.031070102006196976,
            -0.029044996947050095,
            -0.026756351813673973,
            0.03495386615395546,
            0.016783403232693672,
            0.026229269802570343,
            -0.00401900103315711,
            0.02248421311378479,
            0.02459254115819931,
            0.006689087953418493,
            -0.015229898504912853,
            0.015035710297524929,
            0.018905602395534515,
            -0.0065295761451125145,
            0.012913511134684086,
            0.0007633154164068401,
            -0.019155273213982582,
            -0.016089875251054764,
            0.03187459707260132,
            0.011789994314312935,
            -0.030848173424601555,
            -0.045911625027656555,
            0.015909556299448013,
            0.013475270010530949,
            0.00794784352183342,
            -0.01778208464384079,
            -0.030099160969257355,
            -0.023025164380669594,
            0.010347453877329826,
            -0.0003229244612157345,
            0.02744987979531288,
            -0.004768012557178736,
            -0.017144039273262024,
            0.014113316312432289,
            -0.002328523900359869,
            0.014397663064301014,
            -0.008218319155275822,
            -0.011339200660586357,
            0.011353070847690105,
            0.013690263964235783,
            -0.007434631697833538,
            -0.011242106556892395,
            0.012927382253110409,
            0.00267355446703732,
            0.024495447054505348,
            0.014196540229022503,
            0.0013809897936880589,
            -0.004875509534031153,
            0.021069413051009178,
            0.018850119784474373,
            -0.010708088986575603,
            -0.001047228928655386,
            0.03215200826525688,
            -0.03392744064331055,
            -0.010666477493941784,
            0.005392188671976328,
            -0.01409251056611538,
            0.006789649371057749,
            -0.015132804401218891,
            -0.007705107796937227,
            -0.011755317449569702,
            0.01264303456991911,
            0.016048261895775795,
            0.024176422506570816,
            0.01814272068440914,
            -0.01158887054771185,
            0.0035109908785670996,
            -0.012982863932847977,
            -0.045606471598148346,
            -0.005437267944216728,
            -0.00506969727575779,
            0.008051872253417969,
            -0.019834931939840317,
            0.013079958036541939,
            0.019737837836146355,
            -0.025882504880428314,
            6.382634455803782e-05,
            -0.0055412971414625645,
            -0.028074055910110474,
            -0.0054823472164571285,
            0.016256321221590042,
            -0.023746434599161148,
            0.0021482063457369804,
            0.018378520384430885,
            0.0016401963075622916,
            -0.0040155332535505295,
            0.009764889255166054,
            -0.004504471085965633,
            -0.00019819760927930474,
            0.004906718153506517,
            -0.008863301947712898,
            -0.02564670518040657,
            -0.009279418736696243,
            -0.010950824245810509,
            0.01255981158465147,
            -0.0028885486535727978,
            -0.0012310141464695334,
            0.00633538793772459,
            -0.008142031729221344,
            0.007247378583997488,
            -0.006227890960872173,
            -0.005551700014621019,
            0.02450931817293167,
            -0.006741102784872055,
            0.0010610994650050998,
            0.007580272853374481,
            -0.020126214250922203,
            0.0106456708163023,
            -0.016436638310551643,
            0.002588597359135747,
            -0.013600105419754982,
            -0.040113721042871475,
            -0.00845411978662014,
            0.015368604101240635,
            0.0021638106554746628,
            0.00034242996480315924,
            -0.0028608073480427265,
            -0.013926063664257526,
            -0.00225050188601017,
            -0.009119907394051552,
            0.018558837473392487,
            0.007157220039516687,
            0.006276438012719154,
            0.0012838956899940968,
            0.035980287939310074,
            0.01510506309568882,
            0.008155901916325092,
            -0.02278936468064785,
            -0.005738953128457069,
            -0.018114978447556496,
            -0.014127187430858612,
            -0.03231845423579216,
            -0.012109017930924892,
            -0.034399040043354034,
            0.05814547836780548,
            -0.0011018443619832397,
            -0.02019556611776352,
            -0.008641372434794903,
            -0.017227262258529663,
            -0.03342810273170471,
            -0.012989799492061138,
            -0.003880295203998685,
            0.024315129965543747,
            0.012379493564367294,
            0.025674445554614067,
            0.00896039605140686,
            0.018017884343862534,
            -0.009536025114357471,
            0.007878489792346954,
            -0.011831605806946754,
            -0.009584572166204453,
            0.013440593145787716,
            -0.005402591545134783,
            -0.000983944395557046,
            0.00406061252579093,
            -0.023774176836013794,
            -0.0007325400947593153,
            0.0057285502552986145,
            -0.020223308354616165,
            -0.0039981952868402,
            0.009868918918073177,
            -0.013475270010530949,
            -0.011353070847690105,
            0.0169498510658741,
            -0.005617585498839617,
            -0.009848113171756268,
            0.004743739031255245,
            0.010798247531056404,
            -0.012636099942028522,
            -0.006855534855276346,
            -0.0010446282103657722,
            -0.018850119784474373,
            0.00042413637856952846,
            -0.005953947082161903,
            0.007084399461746216,
            0.004407377447932959,
            0.0028348001651465893,
            0.0058845942839980125,
            -0.004275606945157051,
            0.0033445439767092466,
            -0.01194257102906704,
            0.04932378605008125,
            0.008682983927428722,
            0.012629164382815361,
            0.02556348219513893,
            -0.0024776326026767492,
            0.008551213890314102,
            -0.006054508965462446,
            0.010735830292105675,
            0.012615294195711613,
            0.009355707094073296,
            0.03231845423579216,
            -0.03184685483574867,
            -0.024703506380319595,
            -0.00964005384594202,
            0.005308965221047401,
            -0.018406260758638382,
            -0.018808508291840553,
            -0.014328310266137123,
            0.0007100004004314542,
            -0.03645188733935356,
            0.017046945169568062,
            0.004667450673878193,
            -0.011477906256914139,
            0.00025508867111057043,
            -0.010312777012586594,
            0.011748382821679115,
            -0.008391701616346836,
            -0.028906291350722313,
            0.016825014725327492,
            -0.014675075188279152,
            0.0036410277243703604,
            0.003727718722075224,
            -0.0032699895091354847,
            -0.009751019068062305,
            0.009265548549592495,
            0.016145355999469757,
            -0.019391072914004326,
            -0.003710380522534251,
            0.20217759907245636,
            -0.024828340858221054,
            0.0011443229159340262,
            0.013294951990246773,
            -0.0015500375302508473,
            -0.019945895299315453,
            0.04077950865030289,
            0.0056210532784461975,
            0.0036930423229932785,
            0.00964005384594202,
            0.008065743371844292,
            -0.0051113092340528965,
            -0.02586863376200199,
            0.0008838161011226475,
            0.004362297710031271,
            -0.021721331402659416,
            -0.04879670590162277,
            -0.03722864016890526,
            -0.01412025187164545,
            0.0003144720976706594,
            -0.01769886165857315,
            0.008939589373767376,
            -0.021069413051009178,
            -0.029627561569213867,
            0.022678401321172714,
            -0.00679658493027091,
            0.0039045687299221754,
            0.01567375659942627,
            0.007042787503451109,
            0.014106381684541702,
            -0.00532283540815115,
            0.0010853729909285903,
            0.0014676809078082442,
            0.0070670610293745995,
            0.007809137459844351,
            -0.02463415265083313,
            -0.0024152148980647326,
            -0.0021516738925129175,
            0.014633463695645332,
            0.02181842364370823,
            0.016755662858486176,
            -0.005305497441440821,
            0.022858718410134315,
            -0.02643732726573944,
            0.0075317258015275,
            0.04571743682026863,
            -0.006238293834030628,
            -0.005551700014621019,
            0.002090990077704191,
            -0.001815312309190631,
            -0.028739845380187035,
            0.012594487518072128,
            0.01844787411391735,
            0.041389815509319305,
            0.0024637619499117136,
            0.007455437444150448,
            -0.017684990540146828,
            0.01865593157708645,
            -0.006841664202511311,
            0.005021150689572096,
            -0.030265608802437782,
            -0.02607669308781624,
            0.0024152148980647326,
            0.018253685906529427,
            -0.013059152290225029,
            0.00021239327907096595,
            -0.0032578527461737394,
            0.0036930423229932785,
            -0.008835560642182827,
            -0.006033702753484249,
            -0.005066229961812496,
            -0.004809624049812555,
            -0.01971009559929371,
            0.0002477199013810605,
            -0.0209029670804739,
            -0.04860251769423485,
            0.0384492501616478,
            0.03331713750958443,
            -0.0055898441933095455,
            0.02871210314333439,
            -0.007739784196019173,
            -0.015299251303076744,
            -0.0021846166346222162,
            -0.025105752050876617,
            -0.013398981653153896,
            -0.026367975398898125,
            0.012941252440214157,
            -0.02055620215833187,
            -0.01642276905477047,
            -0.008259931579232216,
            -0.004379636142402887,
            -0.015382475219666958,
            0.0044351182878017426,
            0.01571536809206009,
            -0.0033480115234851837,
            0.009015877731144428,
            0.019335590302944183,
            -0.0047888183034956455,
            0.002049378352239728,
            -0.016311803832650185,
            -0.018212072551250458,
            0.042388495057821274,
            0.033650029450654984,
            -0.00431375065818429,
            0.015410215593874454,
            0.012677711434662342,
            -0.016825014725327492,
            -0.0026007341220974922,
            -0.006845131982117891,
            -0.015646016225218773,
            -0.015326992608606815,
            -0.04369233176112175,
            0.014328310266137123,
            -0.0021221989300101995,
            -0.006220955867320299,
            0.011914829723536968,
            0.004674385767430067,
            0.0009934804402291775,
            0.026284752413630486,
            0.0018326506251469254,
            -0.0034069614484906197,
            -0.007503984495997429,
            0.005215338431298733,
            0.002540050307288766,
            0.005395655985921621,
            -0.015479568392038345,
            -0.018059497699141502,
            0.00397392176091671,
            -0.037089936435222626,
            0.008433313108980656,
            0.009293289855122566,
            -0.03209652379155159,
            0.01249045878648758,
            0.010708088986575603,
            0.001496288925409317,
            -0.006033702753484249,
            0.009203130379319191,
            -0.003817877499386668,
            -0.012344817630946636,
            -0.011817735619843006,
            -0.0014624794712290168,
            0.007240443490445614,
            -0.004431650973856449,
            -0.010728894732892513,
            0.015646016225218773,
            -0.0037519922479987144,
            0.012039664201438427,
            0.025355422869324684,
            -0.009244742803275585,
            -0.007001176010817289,
            -0.01407170481979847,
            -0.006886743474751711,
            0.0025677913799881935,
            0.0016722719883546233,
            0.015354733914136887,
            0.014508628286421299,
            -0.0201539546251297,
            0.006026767659932375,
            0.009036683477461338,
            0.021485529839992523,
            -0.0474373884499073,
            0.02278936468064785,
            0.020015249028801918,
            -0.004192383028566837,
            -0.012129823677241802,
            -0.023371929302811623,
            -0.17876406013965607,
            -0.009813436307013035,
            0.0037485247012227774,
            -0.059088677167892456,
            0.02660377509891987,
            0.016783403232693672,
            0.013835905119776726,
            -0.004910185933113098,
            -0.036868005990982056,
            0.0005465875728987157,
            0.006040638312697411,
            -0.01005617156624794,
            -0.021762942895293236,
            -0.012747064232826233,
            -0.009466671384871006,
            0.010971629992127419,
            -0.004109159577637911,
            0.018017884343862534,
            0.023788047954440117,
            0.001333309686742723,
            0.03414937108755112,
            -0.03087591379880905,
            -0.010049236007034779,
            -0.017893049865961075,
            0.009418124333024025,
            -0.0037970717530697584,
            -0.001407864037901163,
            0.016367286443710327,
            -0.013988480903208256,
            -0.024967046454548836,
            -0.010278101079165936,
            -0.015229898504912853,
            0.03118106722831726,
            -0.0052014682441949844,
            0.02244260162115097,
            0.019945895299315453,
            0.03487064316868782,
            0.004490600898861885,
            -0.030182385817170143,
            -0.003320270450785756,
            0.012504328973591328,
            0.03245716169476509,
            0.011873217299580574,
            0.00576322665438056,
            -0.014910874888300896,
            0.01743532158434391,
            0.026270881295204163,
            -0.023441283032298088,
            0.008086549118161201,
            -0.013905257917940617,
            0.026908928528428078,
            -0.025743799284100533,
            0.023524506017565727,
            -0.003824812825769186,
            0.011810800060629845,
            0.02765793912112713,
            0.0014017956564202905,
            0.003538732184097171,
            -0.010375195182859898,
            -0.02704763412475586,
            -0.008142031729221344,
            -0.017157908529043198,
            6.816090171923861e-05,
            -0.008703789673745632,
            -0.012851093895733356,
            -0.02455092966556549,
            -0.022775495424866676,
            0.005548232700675726,
            -0.0350370891392231,
            0.004570356570184231,
            -0.016935979947447777,
            -0.0003836082760244608,
            -0.007975583896040916,
            -0.013627845793962479,
            0.035286758095026016,
            0.027116985991597176,
            0.0003877260896842927,
            0.00907136034220457,
            0.021013930439949036,
            0.00858588982373476,
            -0.012344817630946636,
            0.01796240359544754,
            -0.0024602944031357765,
            0.016228580847382545,
            -0.010402936488389969,
            -0.01409251056611538,
            0.003474580589681864,
            0.015479568392038345,
            -0.026146046817302704,
            -0.009667795151472092,
            0.020098472014069557,
            -0.011172753758728504,
            0.0005678269080817699,
            -0.022054225206375122,
            -0.012268529273569584,
            0.004032871685922146,
            0.008343154564499855,
            0.0017997078830376267,
            -0.0027273029554635286,
            -0.005579441320151091,
            0.007136414293199778,
            0.008391701616346836,
            -0.0057562910951673985,
            -0.002380538498982787,
            0.03833828866481781,
            0.0005695607396773994,
            -0.037173159420490265,
            0.012219982221722603,
            0.03722864016890526,
            -0.018697543069720268,
            -0.025327682495117188,
            -0.015160545706748962,
            0.0015162279596552253,
            -0.0065295761451125145,
            -0.011165818199515343,
            0.005315900314599276,
            -0.01818433217704296,
            -0.016616957262158394,
            0.015535051003098488,
            0.003075801534578204,
            0.041251108050346375,
            0.006661346647888422,
            -0.006175876595079899,
            0.011103400029242039,
            -0.0055725062265992165,
            -0.014383792877197266,
            -0.1235036551952362,
            -0.025577351450920105,
            -0.002793188439682126,
            0.016616957262158394,
            -0.018697543069720268,
            0.03523127734661102,
            -0.0039981952868402,
            0.044940683990716934,
            -0.02726956270635128,
            0.04943475127220154,
            -0.02059781365096569,
            -0.008488795720040798,
            0.005652261897921562,
            -0.0015240301145240664,
            0.01194257102906704,
            -0.0017000131774693727,
            0.009653924964368343,
            -0.010174071416258812,
            -0.02923918515443802,
            0.024426093325018883,
            0.01201192382723093,
            -0.0022522355429828167,
            0.00601636478677392,
            -0.03021012619137764,
            -0.007035852409899235,
            -0.01052083633840084,
            -0.035675134509801865,
            0.03209652379155159,
            0.017116297036409378,
            0.004785350523889065,
            0.013093829154968262,
            -0.030681725591421127,
            -0.0012648236006498337,
            -0.009348771534860134,
            0.01201192382723093,
            -0.00966085959225893,
            0.010201812721788883,
            -0.011283718049526215,
            0.020778130739927292,
            -0.022803235799074173,
            -0.001422601519152522,
            0.014550239779055119,
            0.014134122058749199,
            -0.008308478631079197,
            -0.0005591578083112836,
            -0.021762942895293236,
            -0.010708088986575603,
            0.021887777373194695,
            0.009418124333024025,
            -0.017684990540146828,
            -0.03828280419111252,
            -0.018101109191775322,
            -0.0388098880648613,
            0.014023157767951488,
            0.01654760353267193,
            0.005749356001615524,
            0.011977246962487698,
            0.02339967153966427,
            -0.01909979060292244,
            -0.0013939933851361275,
            -0.01099937129765749,
            0.0015266308328136802,
            -0.030237866565585136,
            -0.002439488423988223,
            0.014702816493809223,
            0.0015613073483109474,
            0.0037623951211571693,
            -0.027325045317411423,
            0.011769188567996025,
            -0.010042301379144192,
            -0.001374054467305541,
            0.019266238436102867,
            -0.005336706060916185,
            0.004282542038708925,
            -0.01446701679378748,
            0.006942226085811853,
            -0.007663496304303408,
            -0.038144100457429886,
            -0.0013125037075951695,
            0.009889724664390087,
            -0.009515218436717987,
            -0.009501348249614239,
            0.01067341212183237,
            -0.005416462197899818,
            9.687734564067796e-05,
            -0.009217001497745514,
            -0.011346135288476944,
            -0.004695191979408264,
            -0.0009934804402291775,
            -0.01814272068440914,
            0.006602396722882986,
            0.03217975050210953,
            -0.0018846652237698436,
            -0.019210755825042725,
            0.0034069614484906197,
            0.011394682340323925,
            -0.016214709728956223,
            -0.012705452740192413,
            0.025674445554614067,
            0.0012509530643001199,
            -0.022276153787970543,
            0.010049236007034779,
            -0.05459460988640785,
            0.042360756546258926,
            0.0036861069966107607,
            -0.008974266238510609,
            -0.001708682277239859,
            -0.02094457857310772,
            0.015465698204934597,
            -0.022109705954790115,
            0.007372213993221521,
            0.009376512840390205,
            -0.016048261895775795,
            0.017102427780628204,
            -0.015257639810442924,
            -0.0058533851988613605,
            -0.024648023769259453,
            -0.010805183090269566,
            0.017532415688037872,
            -1.4070377574171289e-06,
            0.009959077462553978,
            0.006383934989571571,
            0.008003325201570988,
            -0.013870581053197384,
            0.02068103663623333,
            0.02041749656200409,
            0.01950203813612461,
            -0.014952486380934715,
            -0.024481575936079025,
            0.01517441589385271,
            -0.008884107694029808,
            -0.012899640947580338,
            -0.018239814788103104,
            -0.0040952893905341625,
            -0.008031066507101059,
            0.00907136034220457,
            -0.015229898504912853,
            -0.014147993177175522,
            0.016977591440081596,
            0.02629862166941166,
            0.02862888015806675,
            0.04738190770149231,
            -0.017671121284365654,
            -0.04197238013148308,
            0.008405572734773159,
            -0.014786039479076862,
            -0.007399955298751593,
            -0.021804554387927055,
            -0.012393364682793617,
            0.004053677432239056,
            0.02502252906560898,
            0.005596779752522707,
            0.039059557020664215,
            0.019959766417741776,
            -0.02982174977660179,
            -0.036784783005714417,
            -0.013142376206815243,
            0.014508628286421299,
            0.006033702753484249,
            -0.0006909283110871911,
            -0.005565570667386055,
            0.031153324991464615,
            0.032429419457912445,
            0.005485814996063709,
            0.009085230529308319,
            -0.004750674124807119,
            -7.639655814273283e-05,
            -0.003984324634075165,
            -0.004012065473943949,
            0.0016271925996989012,
            0.005846450105309486,
            0.007330602500587702,
            -0.0008387367124669254,
            0.013052216731011868,
            0.0025417839642614126,
            0.0025383164174854755,
            0.005506620742380619,
            -0.024342870339751244,
            0.018087238073349,
            0.01464733388274908,
            -0.017754344269633293,
            0.013600105419754982,
            0.0005639258306473494,
            -0.026756351813673973,
            0.00576322665438056,
            0.0035994157660752535,
            0.021000059321522713,
            0.005919270683079958,
            -0.016089875251054764,
            0.009286354295909405,
            -0.005999026354402304,
            -0.009210065938532352,
            -0.00040289704338647425,
            -0.0014503427082672715,
            -0.00998681876808405,
            0.01167902909219265,
            0.029655303806066513,
            -0.00847492553293705,
            -0.0024030781351029873,
            0.013600105419754982,
            0.01751854456961155,
            -0.003190233837813139,
            0.01676953211426735,
            -0.020015249028801918,
            0.00996601302176714,
            -0.017463061958551407,
            -0.032512642443180084,
            0.007042787503451109,
            -0.03392744064331055,
            -0.007143349386751652,
            0.0376724973320961,
            0.01654760353267193,
            0.016922108829021454,
            -0.005600247066468,
            0.01003536581993103,
            0.006904081907123327,
            -0.01769886165857315,
            0.019959766417741776,
            -0.011498712003231049,
            -0.006997708231210709,
            -0.03065398521721363,
            0.0380331352353096,
            0.04524583742022514,
            0.01792079210281372,
            0.04416393116116524,
            -0.014300569891929626,
            0.007774461060762405,
            0.002328523900359869,
            0.02893403358757496,
            -0.03134751319885254,
            0.01664469763636589,
            -0.014730557799339294,
            -0.0031815646216273308,
            -0.005607182625681162,
            -0.018766896799206734,
            0.0019366799388080835,
            -0.006120393984019756,
            -0.0005314166774041951,
            -0.00964005384594202,
            0.01656147465109825,
            -0.006175876595079899,
            0.054650090634822845,
            0.015840204432606697,
            0.00448019802570343,
            0.022553564980626106,
            -0.017365967854857445,
            0.019252367317676544,
            0.01196337677538395,
            0.027630198746919632,
            -0.0010689017362892628,
            -0.01567375659942627,
            0.004161174409091473,
            -0.00734447268769145,
            -6.501835014205426e-05,
            -0.03894859179854393,
            -0.012747064232826233,
            -0.003341076197102666,
            -0.0032214424572885036,
            0.013620911166071892,
            -0.008114290423691273,
            -0.011124206706881523,
            0.03448226675391197,
            0.006463691126555204,
            0.0222206711769104,
            0.009806500747799873,
            -0.00626950291916728,
            -0.0015977176371961832,
            0.024994786828756332,
            0.0020407093688845634,
            -0.0042790742591023445,
            -0.011672094464302063,
            0.035758357495069504,
            0.02398223616182804,
            -0.03095913678407669,
            -0.021013930439949036,
            -0.0033549468498677015,
            0.001775434473529458,
            0.015576662495732307,
            -0.036340922117233276,
            -0.005617585498839617,
            -0.006789649371057749,
            -0.007621884346008301,
            0.008239124901592731,
            0.0005409526638686657,
            -0.020583942532539368,
            0.0013315757969394326,
            -0.0014789507258683443,
            -0.01686662621796131,
            0.00042326946277171373,
            -0.015867944806814194
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "4529061a-aecc-4052-aa94-52176da3f668",
      "type": "child",
      "source": {
        "id": "d4054310-41ff-4d85-bb2f-84ef02a66fb2",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nStuff we figured out about AI in 2023\n\n31st December 2023\n\n2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s.\n\nHere’s my attempt to round up the highlights in one place!\n\nLarge Language Models\n\nThey’re actually quite easy to build\n\nYou can run LLMs on your own devices\n\nHobbyists can build their own fine-tuned models\n\nWe don’t yet know how to build GPT-4\n\nVibes Based Development\n\nLLMs are really smart, and also really, really dumb\n\nGullibility is the biggest unsolved problem\n\nCode may be the best application\n\nThe ethics of this space remain diabolically complex\n\nMy blog in 2023\n\nHere’s the sequel to this post: Things we learned about LLMs in 2024.\n\nLarge Language Models\n\nIn the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software.\n\nLLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code.\n\nThey can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes.\n\nSo far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life.\n\nA lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity.\n\nThey’re actually quite easy to build\n\nThe most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build.\n\nIntuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version!\n\nWhat matters most is the training  data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is.\n\nIf you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM.\n\nA year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations.\n\nThe training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing.\n\nSo training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries).\n\nYou can run LLMs on your own devices\n\nIn January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them.\n\nThen in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook.\n\nI wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call!\n\nThis unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use.\n\nToday there are literally thousands of LLMs that can be run locally, on all manner of different devices.\n\nI run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins.\n\nYou can even run them entirely in your browser using WebAssembly and the latest Chrome!\n\nHobbyists can build their own fine-tuned models\n\nI said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely.\n\nThere’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too.\n\nThe Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours.\n\nThe best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data.\n\nThis is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them.\n\nWe don’t yet know how to build GPT-4\n\nFrustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4.\n\nOpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing.\n\nThis may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out.\n\nThe team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then.\n\nStill, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet.\n\nVibes Based Development\n\nAs a computer scientist and software engineer, LLMs are infuriating.\n\nEven the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them.\n\nI’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that!\n\nThe worst part is the challenge of evaluating them.\n\nThere are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task.\n\nI find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself!\n\nThe most frustrating thing for me is at the level of individual prompting.\n\nSometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out.\n\nWe’re left with what’s effectively Vibes Based Development. It’s vibes all the way down.\n\nI’d love to see us move beyond vibes in 2024!\n\nLLMs are really smart, and also really, really dumb\n\nOn the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun!\n\nBut on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb.\n\nDoes ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays?\n\nThe honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer.\n\nSometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead.\n\nThere are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works!\n\nGullibility is the biggest unsolved problem\n\nI coined the term prompt injection in September last year.\n\n15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem.\n\nI’ve written a ton about this already.\n\nBeyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility.\n\nLanguage Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt.\n\nIn order to be useful tools for us, we need them to believe what we feed them!\n\nBut it turns out a lot of the things we want to build need them not to be gullible.\n\nEveryone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited.\n\nA lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes.\n\nI think this is because of gullibility.\n\nCan we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true!\n\nCode may be the best application\n\nOver the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of.\n\nIf you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English.\n\nIt’s still astonishing to me how effective they are though.\n\nOne of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless.\n\nExcept... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works!\n\nSo hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language!\n\nHow should we feel about this as software engineers?\n\nOn the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you?\n\nOn the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can.\n\nThe ethics of this space remain diabolically complex\n\nIn September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion.\n\nSince then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data.\n\nJust this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere.\n\nThe legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future.\n\nLaw is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people?\n\nAs the quality of results produced by AI models has increased over the year, these questions have become even more pressing.\n\nThe impact on human society in terms of these models is already huge, if difficult to objectively measure.\n\nPeople have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators.\n\nThere are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic.\n\nMy blog in 2023\n\nHere’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard):\n\nThe top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78).\n\nI’ve written a lot about this stuff!\n\nI grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic:\n\nArticle Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k\n\nI also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023:\n\nPrompt injection explained, with video, slides, and a transcript\n\nCatching up on the weird world of LLMs\n\nMaking Large Language Models work for you\n\nOpen questions for AI engineering\n\nEmbeddings: What they are and why they matter\n\nFinancial sustainability for open source projects at GitHub Universe\n\nAnd in podcasts:\n\nWhat AI can do for you on the Theory of Change\n\nWorking in public on Path to Citus Con\n\nLLMs break the internet on the Changelog\n\nTalking Large Language Models on Rooftop Ruby\n\nThoughts on the OpenAI board situation on Newsroom Robots\n\nIndustry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations\n\nPosted \n\n31st December 2023 at 11:59 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\nblogging\n            68\n\nai\n            1091\n\ngenerative-ai\n            936\n\nllms\n            924\n\nNext: Tom Scott, and the formidable power of escalating streaks\n\nPrevious: Last weeknotes of 2023\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2023_llms.html"
          },
          "headlines": [
            "Large Language Models",
            "Vibes Based Development",
            "LLMs are really smart, and also really, really dumb",
            "Gullibility is the biggest unsolved problem",
            "Code may be the best application"
          ],
          "summary": "In 2023, Large Language Models (LLMs) emerged as a significant development in AI, with advancements making them easier to build and run on personal devices. Despite their capabilities, LLMs remain complex and unpredictable, with gullibility being a major unresolved issue. They excel in generating code, as errors can be tested and corrected, reducing the impact of hallucinations. The ethics of using unlicensed data for training these models are contentious, highlighted by legal actions like the New York Times lawsuit against OpenAI. The year also saw a proliferation of LLMs from various organizations, though none have surpassed GPT-4. The field continues to grapple with the challenges of understanding and controlling these models, often relying on 'Vibes Based Development' due to the lack of clear methodologies.",
          "summary_embedding": [
            -0.011880152858793736,
            0.005520491395145655,
            0.003946180455386639,
            -0.037700239568948746,
            -0.007885425351560116,
            0.010083912871778011,
            -0.017019202932715416,
            0.024648023769259453,
            -0.027394399046897888,
            -0.03700670972466469,
            0.021000059321522713,
            0.0209029670804739,
            -0.029183702543377876,
            0.0010593656916171312,
            -0.0022487679962068796,
            0.014550239779055119,
            0.023122258484363556,
            0.0017624307656660676,
            0.017684990540146828,
            -0.014827651903033257,
            0.005770161747932434,
            0.0033341411035507917,
            -0.018475614488124847,
            -0.01812884956598282,
            -0.004438586067408323,
            0.005416462197899818,
            0.018697543069720268,
            -0.037256382405757904,
            -0.01563214510679245,
            0.005780564621090889,
            0.01914140209555626,
            -0.00017869210569188,
            -0.03395518288016319,
            0.007455437444150448,
            -0.03176363185048103,
            -0.00686246994882822,
            0.024537058547139168,
            -0.00603717053309083,
            0.017879178747534752,
            0.009140713140368462,
            0.030154643580317497,
            0.024745117872953415,
            0.015299251303076744,
            -0.017851438373327255,
            -0.018517225980758667,
            0.017629509791731834,
            0.007608013693243265,
            -0.01976557821035385,
            -0.03215200826525688,
            0.018850119784474373,
            0.018392391502857208,
            0.029849492013454437,
            -0.01005617156624794,
            -0.01352381706237793,
            -0.00445592449977994,
            0.00506969727575779,
            -0.0028954839799553156,
            0.006734167225658894,
            0.013509945943951607,
            -0.001715617487207055,
            -0.006474093999713659,
            -0.020611684769392014,
            -0.004448988940566778,
            0.025313811376690865,
            -0.0043588303960859776,
            -0.007122543640434742,
            -0.023413540795445442,
            0.029183702543377876,
            0.031070102006196976,
            -0.013371240347623825,
            0.0006211419822648168,
            -0.0110201770439744,
            0.013052216731011868,
            -0.005551700014621019,
            0.014758298173546791,
            0.003214507130905986,
            -0.012344817630946636,
            -0.01361397560685873,
            -0.02595185860991478,
            0.00482002692297101,
            -0.003252651309594512,
            0.0050523593090474606,
            -0.010569383390247822,
            0.02278936468064785,
            0.017324356362223625,
            -0.0038074746262282133,
            -0.0057285502552986145,
            -0.018114978447556496,
            -0.004667450673878193,
            -0.014127187430858612,
            -0.006696023046970367,
            -0.005035020876675844,
            0.021860036998987198,
            0.017490802332758904,
            -0.008135096170008183,
            -0.006411676295101643,
            -0.012358687818050385,
            0.009952141903340816,
            -0.014702816493809223,
            -0.022775495424866676,
            -0.007261249236762524,
            0.0014988897601142526,
            -0.04383103549480438,
            -0.008738466538488865,
            -0.020694907754659653,
            0.004074483178555965,
            0.015271509997546673,
            0.022997424006462097,
            0.02051459066569805,
            0.014550239779055119,
            -0.012372558936476707,
            0.027990832924842834,
            0.005596779752522707,
            -0.026312492787837982,
            -0.00212393281981349,
            -0.009972947649657726,
            0.006040638312697411,
            0.001518828677944839,
            -0.001785837346687913,
            0.0013610507594421506,
            0.03267908841371536,
            0.01052083633840084,
            0.012892705388367176,
            0.0011243839981034398,
            0.023968365043401718,
            -0.011075659655034542,
            3.1615174520993605e-05,
            -0.020805872976779938,
            -0.011103400029242039,
            -0.0023406606633216143,
            0.004077950958162546,
            0.00500728003680706,
            0.008870236575603485,
            0.0070982701145112514,
            -0.03087591379880905,
            0.040640804916620255,
            -0.015618274919688702,
            -0.002240099012851715,
            0.006928355433046818,
            0.009889724664390087,
            0.004771479871124029,
            0.026950540021061897,
            -0.024009976536035538,
            0.019335590302944183,
            -0.011124206706881523,
            0.020403625443577766,
            0.0057458882220089436,
            0.016533732414245605,
            -0.0015214293962344527,
            -0.0012630898272618651,
            0.00803800206631422,
            -0.035286758095026016,
            -0.020833613350987434,
            0.016408897936344147,
            0.009189260192215443,
            0.005392188671976328,
            0.00906442478299141,
            0.030543019995093346,
            -0.038837626576423645,
            -0.015867944806814194,
            -0.013232534751296043,
            0.015743110328912735,
            -0.004001662600785494,
            0.015951167792081833,
            0.013856710866093636,
            0.021000059321522713,
            0.021582623943686485,
            -0.0030723337549716234,
            -0.007892360910773277,
            -0.011561129242181778,
            -0.017754344269633293,
            0.03595254570245743,
            -0.0342603363096714,
            0.01559053361415863,
            -0.009667795151472092,
            0.016811145469546318,
            0.02309451811015606,
            -0.0018499888246878982,
            -0.026881186291575432,
            -0.011783058755099773,
            0.02037588320672512,
            0.005343641620129347,
            0.008315413258969784,
            -0.00343123497441411,
            -0.021832294762134552,
            0.0033705513924360275,
            0.014085575006902218,
            0.0008309344993904233,
            0.01062486506998539,
            -0.02489769272506237,
            0.02871210314333439,
            0.01654760353267193,
            -0.005423397291451693,
            -0.01932171918451786,
            -0.6506966948509216,
            -0.03523127734661102,
            0.013974610716104507,
            -0.012781741097569466,
            -0.0027567781507968903,
            -0.006595461629331112,
            -0.005253482609987259,
            -0.01453636959195137,
            -0.02072264812886715,
            0.036729298532009125,
            -0.012358687818050385,
            0.002305984264239669,
            -0.003167693968862295,
            -0.0203342717140913,
            0.010721959173679352,
            -0.009189260192215443,
            0.001533566159196198,
            -0.025494128465652466,
            0.007774461060762405,
            0.01769886165857315,
            -0.0047541419044137,
            0.01611761562526226,
            -0.006300711538642645,
            -0.010569383390247822,
            -0.027338916435837746,
            0.0037346540484577417,
            0.013385111466050148,
            0.01690823957324028,
            -0.008322348818182945,
            0.006675217300653458,
            -0.014168798923492432,
            0.006616267375648022,
            -0.005707744043320417,
            0.008967330679297447,
            0.04904637485742569,
            0.00063111144118011,
            -0.018766896799206734,
            0.021971000358462334,
            0.0012232118751853704,
            0.007788331247866154,
            -0.04119562730193138,
            -0.012268529273569584,
            -0.004400441888719797,
            0.029433373361825943,
            -0.010500029660761356,
            0.030986879020929337,
            0.025702187791466713,
            -0.01158887054771185,
            -0.016519863158464432,
            -0.00633538793772459,
            0.0014286699006333947,
            0.0051598562858998775,
            0.0040952893905341625,
            0.0010567649733275175,
            0.0031867660582065582,
            0.012968993745744228,
            0.014231216162443161,
            -0.013828969560563564,
            0.0021586092188954353,
            -0.020805872976779938,
            -0.0008630102383904159,
            -0.014799910597503185,
            -0.026645386591553688,
            -0.030487537384033203,
            -0.015313121490180492,
            0.011276782490313053,
            0.006789649371057749,
            0.010742764919996262,
            -0.004930991679430008,
            -0.015701498836278915,
            -0.004594630096107721,
            0.04280461370944977,
            -0.0019332122756168246,
            -0.011609676294028759,
            -0.007809137459844351,
            0.014002352021634579,
            0.005416462197899818,
            -0.014453145675361156,
            -0.002104860730469227,
            0.01106178853660822,
            0.003309867577627301,
            -0.02161036618053913,
            -0.0003725551359821111,
            -0.0006566853262484074,
            0.0388098880648613,
            0.0036895745433866978,
            0.012788675725460052,
            -0.0009622715879231691,
            0.0010827722726389766,
            0.008703789673745632,
            0.005191064905375242,
            0.030321091413497925,
            -0.014952486380934715,
            -0.051348891109228134,
            0.004459391813725233,
            0.01690823957324028,
            -0.018558837473392487,
            0.014286698773503304,
            0.021069413051009178,
            -0.028268244117498398,
            -0.004608500748872757,
            -0.013822034001350403,
            0.042527202516794205,
            0.02538316324353218,
            0.012407234869897366,
            0.022553564980626106,
            0.0027116986457258463,
            0.001938413712196052,
            0.013822034001350403,
            -0.025979598984122276,
            -0.006706425920128822,
            0.0035040555521845818,
            -0.0005639258306473494,
            -0.006383934989571571,
            -0.0057458882220089436,
            -0.03217975050210953,
            -0.007171090692281723,
            -0.01255981158465147,
            0.011741447262465954,
            -0.026881186291575432,
            0.018031755462288857,
            -0.006914484780281782,
            0.02915596216917038,
            -0.0041715772822499275,
            -0.00017825864779297262,
            0.0009735414059832692,
            0.004088353831321001,
            -0.01016713585704565,
            -0.0035924806725233793,
            0.0242873877286911,
            -0.008488795720040798,
            -0.022428730502724648,
            0.016741791740059853,
            -0.012379493564367294,
            0.016755662858486176,
            0.013919128105044365,
            0.04849155247211456,
            -0.008336219005286694,
            0.009744083508849144,
            0.017005333676934242,
            -0.023690953850746155,
            0.0013411118416115642,
            0.010458418168127537,
            0.014508628286421299,
            -0.04058532044291496,
            -0.03287327662110329,
            -0.005527426488697529,
            -0.006321517284959555,
            0.005461541470140219,
            -0.014702816493809223,
            -0.014799910597503185,
            -0.01761563867330551,
            -0.01848948560655117,
            0.03412162885069847,
            -0.001908938749693334,
            -0.00776059040799737,
            -0.0091337775811553,
            -0.021984871476888657,
            -0.004424715414643288,
            -0.021332954987883568,
            0.010000688955187798,
            0.009265548549592495,
            0.004157706629484892,
            0.008481860160827637,
            0.016783403232693672,
            -0.02301129512488842,
            -0.01049309503287077,
            0.028989514335989952,
            -0.0384492501616478,
            -0.020792001858353615,
            0.0034295013174414635,
            -0.03764475882053375,
            0.014480886980891228,
            0.03181911259889603,
            -0.009397318586707115,
            0.027768904343247414,
            -0.0069318232126533985,
            0.0016688043251633644,
            0.007001176010817289,
            -0.013731875456869602,
            0.006720296572893858,
            0.029100479558110237,
            0.012712388299405575,
            -0.006318049971014261,
            0.013662522658705711,
            0.02309451811015606,
            0.0368957482278347,
            0.016838885843753815,
            -0.0014512095367535949,
            0.0040155332535505295,
            0.004580759443342686,
            0.036118995398283005,
            -0.0040155332535505295,
            0.0067445700988173485,
            -0.013697199523448944,
            0.026270881295204163,
            0.001154725905507803,
            -0.01905817911028862,
            0.007150284945964813,
            0.025854764506220818,
            0.012136758305132389,
            0.01778208464384079,
            0.01607600413262844,
            -0.012844158336520195,
            0.0073791490867733955,
            -0.023635471239686012,
            5.252940900390968e-05,
            -0.012268529273569584,
            -0.009106036275625229,
            0.016325674951076508,
            0.007940907962620258,
            0.0009822105057537556,
            -0.011034047231078148,
            -0.01521602738648653,
            0.0036861069966107607,
            0.029044996947050095,
            0.000787155469879508,
            0.016935979947447777,
            -0.00845411978662014,
            -9.189260163111612e-05,
            0.004965668078511953,
            0.005520491395145655,
            0.016145355999469757,
            -0.011380812153220177,
            0.0010775708360597491,
            0.01514667458832264,
            -0.018558837473392487,
            0.011165818199515343,
            -0.00408488605171442,
            -0.034315817058086395,
            0.013364304788410664,
            0.015951167792081833,
            0.022331636399030685,
            0.01765725016593933,
            0.004629306495189667,
            -0.011366941034793854,
            0.02266453020274639,
            -0.009473606944084167,
            0.02609056420624256,
            -3.0721170332981274e-05,
            -0.009230871684849262,
            0.012476587668061256,
            -0.0003751558833755553,
            -0.008031066507101059,
            0.034676454961299896,
            -0.007268184795975685,
            0.0376724973320961,
            -0.010617930442094803,
            -0.03209652379155159,
            0.004282542038708925,
            -0.03947567567229271,
            0.012226917780935764,
            -0.025965727865695953,
            -0.00034546415554359555,
            -0.00016861424956005067,
            -0.023954493924975395,
            0.00854427833110094,
            2.0562052668537945e-05,
            0.020098472014069557,
            0.008239124901592731,
            -0.012407234869897366,
            0.003056729445233941,
            0.0075317258015275,
            0.0029839088674634695,
            0.010201812721788883,
            -0.008904913440346718,
            -0.010007624514400959,
            0.0047541419044137,
            -0.015965038910508156,
            -0.016533732414245605,
            -0.02603508159518242,
            -0.0191968847066164,
            0.006553849671036005,
            -0.033622290939092636,
            0.04163948446512222,
            -0.0038421510253101587,
            0.006415144074708223,
            0.0014581448631361127,
            0.01690823957324028,
            0.04249946027994156,
            -0.021374566480517387,
            -0.03817183896899223,
            0.022678401321172714,
            0.005204935558140278,
            -0.0015769117744639516,
            -0.016880497336387634,
            -0.04541228339076042,
            0.009841177612543106,
            0.0029613692313432693,
            -0.013059152290225029,
            -0.006155070383101702,
            0.006106523331254721,
            -0.0036410277243703604,
            0.0028902823105454445,
            -0.012157564982771873,
            0.028961773961782455,
            0.0241070706397295,
            -0.004022468812763691,
            -0.00896039605140686,
            -0.01577085070312023,
            0.0032578527461737394,
            0.010063107125461102,
            -0.006432482041418552,
            -0.023524506017565727,
            0.02840695157647133,
            -0.00906442478299141,
            -0.040418874472379684,
            0.002739439718425274,
            0.0017130167689174414,
            -0.008197513408958912,
            -0.009411189705133438,
            0.00891184899955988,
            0.011221300810575485,
            0.004320686217397451,
            0.016963720321655273,
            0.017046945169568062,
            0.010687283240258694,
            0.005426865071058273,
            0.010763571597635746,
            0.008301543071866035,
            0.013322693295776844,
            -0.03933696821331978,
            -0.0001738157297950238,
            0.01314931083470583,
            0.07401341944932938,
            0.004119562450796366,
            -0.017449190840125084,
            0.0038386834785342216,
            -0.024356741458177567,
            -0.01918301358819008,
            -0.01861432008445263,
            -0.007060125935822725,
            0.0062660351395606995,
            0.028989514335989952,
            -0.01585407368838787,
            -0.00557597354054451,
            0.012608358636498451,
            -0.0013766551855951548,
            0.023968365043401718,
            0.020653296262025833,
            0.017684990540146828,
            -0.025175105780363083,
            -0.02893403358757496,
            -0.013932999223470688,
            0.00034914855496026576,
            0.0033740189392119646,
            0.016131486743688583,
            0.011276782490313053,
            0.012324011884629726,
            -0.012039664201438427,
            0.02489769272506237,
            0.015451828017830849,
            -0.03819958120584488,
            -0.019571390002965927,
            0.0048963152803480625,
            0.0067931171506643295,
            0.007524790242314339,
            0.0160205215215683,
            -0.006779246497899294,
            0.015368604101240635,
            0.016492120921611786,
            0.0012405500747263432,
            0.0064220791682600975,
            -0.001980025554075837,
            0.030265608802437782,
            0.027519233524799347,
            0.0017806359101086855,
            -0.008114290423691273,
            0.0018101108726114035,
            -0.024564798921346664,
            -0.001299500116147101,
            0.04105691984295845,
            0.00902281329035759,
            -0.03498160466551781,
            0.014369922690093517,
            -0.0010255561210215092,
            -0.023593859747052193,
            -0.006148135289549828,
            0.01585407368838787,
            0.016228580847382545,
            0.010250359773635864,
            -0.0014659470180049539,
            -0.004265203606337309,
            -0.017587896436452866,
            -0.018586579710245132,
            -0.033650029450654984,
            -0.00812122505158186,
            -0.022914201021194458,
            -0.010500029660761356,
            1.1398529750294983e-05,
            -0.025008657947182655,
            0.009820371866226196,
            -0.0463554821908474,
            0.008669113740324974,
            0.0013489139964804053,
            -0.028795326128602028,
            -0.05251402035355568,
            -0.004414312541484833,
            0.010916147381067276,
            -0.014716686680912971,
            0.026243140920996666,
            -0.006904081907123327,
            0.004240930080413818,
            0.013780422508716583,
            -0.006647475995123386,
            -0.006574655417352915,
            -0.010500029660761356,
            -0.007413825951516628,
            0.008329284377396107,
            -0.004712529946118593,
            -0.02187390625476837,
            -0.015229898504912853,
            0.00043172185542061925,
            0.01269158162176609,
            0.007212702184915543,
            -0.003935777582228184,
            -0.005922738462686539,
            0.015063451603055,
            -0.011873217299580574,
            0.015965038910508156,
            0.024842211976647377,
            0.011283718049526215,
            -0.0027862531132996082,
            -0.020126214250922203,
            -0.00907136034220457,
            -0.02037588320672512,
            -0.03104236163198948,
            -0.0191968847066164,
            0.008357025682926178,
            0.010007624514400959,
            0.024439964443445206,
            0.026021210476756096,
            0.0014312706189230084,
            -0.009327965788543224,
            0.006193214561790228,
            -0.007614949252456427,
            0.019793320447206497,
            -0.003623689291998744,
            0.017241133376955986,
            0.006928355433046818,
            0.016173098236322403,
            0.004372700583189726,
            0.018059497699141502,
            -0.024994786828756332,
            -0.0259934701025486,
            -0.04768705740571022,
            0.03179137408733368,
            0.009397318586707115,
            -0.011200494132936,
            0.024079328402876854,
            0.016630826517939568,
            0.011540323495864868,
            -0.03684026375412941,
            0.014057834632694721,
            0.003963518422096968,
            0.027214080095291138,
            0.00267355446703732,
            -0.0022088901605457067,
            -0.020306531339883804,
            -0.02072264812886715,
            -0.016131486743688583,
            0.013662522658705711,
            -0.01883624866604805,
            -0.013225599192082882,
            0.01656147465109825,
            0.024426093325018883,
            -0.0009206598624587059,
            -0.018059497699141502,
            0.022761624306440353,
            -0.026548292487859726,
            -0.009820371866226196,
            0.027255691587924957,
            0.01251126453280449,
            0.04874122142791748,
            -0.016325674951076508,
            0.021277472376823425,
            -0.04152851924300194,
            -0.02234550751745701,
            0.005790967959910631,
            -0.02265065908432007,
            0.0026787561364471912,
            0.003966986201703548,
            0.027949221432209015,
            0.00907136034220457,
            0.04496842622756958,
            -0.007497049402445555,
            0.007406890392303467,
            0.007358343340456486,
            -0.008710725232958794,
            -0.01297592930495739,
            -0.0013003670610487461,
            -0.005645326804369688,
            -0.010659541934728622,
            -0.0005288159009069204,
            -0.009757953695952892,
            -0.008315413258969784,
            0.026229269802570343,
            -0.007871555164456367,
            -0.012989799492061138,
            0.0031018087174743414,
            -0.014897004701197147,
            -0.008384766057133675,
            -0.020362013950943947,
            -0.02256743609905243,
            -0.02209583669900894,
            -0.002709964755922556,
            -0.0014486088184639812,
            0.01264997012913227,
            -0.0222206711769104,
            -0.005842982325702906,
            0.015604403801262379,
            0.013607040047645569,
            0.001834384398534894,
            -0.00048113579396158457,
            0.01812884956598282,
            0.004372700583189726,
            -0.008946524932980537,
            0.024967046454548836,
            0.005978220608085394,
            -0.04197238013148308,
            -0.005849917884916067,
            -0.0429433211684227,
            0.0021291342563927174,
            0.02577153965830803,
            0.0043865712359547615,
            0.01822594366967678,
            0.013260276056826115,
            -0.01163741759955883,
            0.007268184795975685,
            0.005988623481243849,
            0.0021395371295511723,
            -0.008065743371844292,
            -0.013364304788410664,
            -0.027172468602657318,
            -0.00675150565803051,
            -0.025494128465652466,
            -0.018947213888168335,
            -0.015576662495732307,
            -0.010749700479209423,
            -0.0053575122728943825,
            0.009820371866226196,
            0.031070102006196976,
            -0.029044996947050095,
            -0.026756351813673973,
            0.03495386615395546,
            0.016783403232693672,
            0.026229269802570343,
            -0.00401900103315711,
            0.02248421311378479,
            0.02459254115819931,
            0.006689087953418493,
            -0.015229898504912853,
            0.015035710297524929,
            0.018905602395534515,
            -0.0065295761451125145,
            0.012913511134684086,
            0.0007633154164068401,
            -0.019155273213982582,
            -0.016089875251054764,
            0.03187459707260132,
            0.011789994314312935,
            -0.030848173424601555,
            -0.045911625027656555,
            0.015909556299448013,
            0.013475270010530949,
            0.00794784352183342,
            -0.01778208464384079,
            -0.030099160969257355,
            -0.023025164380669594,
            0.010347453877329826,
            -0.0003229244612157345,
            0.02744987979531288,
            -0.004768012557178736,
            -0.017144039273262024,
            0.014113316312432289,
            -0.002328523900359869,
            0.014397663064301014,
            -0.008218319155275822,
            -0.011339200660586357,
            0.011353070847690105,
            0.013690263964235783,
            -0.007434631697833538,
            -0.011242106556892395,
            0.012927382253110409,
            0.00267355446703732,
            0.024495447054505348,
            0.014196540229022503,
            0.0013809897936880589,
            -0.004875509534031153,
            0.021069413051009178,
            0.018850119784474373,
            -0.010708088986575603,
            -0.001047228928655386,
            0.03215200826525688,
            -0.03392744064331055,
            -0.010666477493941784,
            0.005392188671976328,
            -0.01409251056611538,
            0.006789649371057749,
            -0.015132804401218891,
            -0.007705107796937227,
            -0.011755317449569702,
            0.01264303456991911,
            0.016048261895775795,
            0.024176422506570816,
            0.01814272068440914,
            -0.01158887054771185,
            0.0035109908785670996,
            -0.012982863932847977,
            -0.045606471598148346,
            -0.005437267944216728,
            -0.00506969727575779,
            0.008051872253417969,
            -0.019834931939840317,
            0.013079958036541939,
            0.019737837836146355,
            -0.025882504880428314,
            6.382634455803782e-05,
            -0.0055412971414625645,
            -0.028074055910110474,
            -0.0054823472164571285,
            0.016256321221590042,
            -0.023746434599161148,
            0.0021482063457369804,
            0.018378520384430885,
            0.0016401963075622916,
            -0.0040155332535505295,
            0.009764889255166054,
            -0.004504471085965633,
            -0.00019819760927930474,
            0.004906718153506517,
            -0.008863301947712898,
            -0.02564670518040657,
            -0.009279418736696243,
            -0.010950824245810509,
            0.01255981158465147,
            -0.0028885486535727978,
            -0.0012310141464695334,
            0.00633538793772459,
            -0.008142031729221344,
            0.007247378583997488,
            -0.006227890960872173,
            -0.005551700014621019,
            0.02450931817293167,
            -0.006741102784872055,
            0.0010610994650050998,
            0.007580272853374481,
            -0.020126214250922203,
            0.0106456708163023,
            -0.016436638310551643,
            0.002588597359135747,
            -0.013600105419754982,
            -0.040113721042871475,
            -0.00845411978662014,
            0.015368604101240635,
            0.0021638106554746628,
            0.00034242996480315924,
            -0.0028608073480427265,
            -0.013926063664257526,
            -0.00225050188601017,
            -0.009119907394051552,
            0.018558837473392487,
            0.007157220039516687,
            0.006276438012719154,
            0.0012838956899940968,
            0.035980287939310074,
            0.01510506309568882,
            0.008155901916325092,
            -0.02278936468064785,
            -0.005738953128457069,
            -0.018114978447556496,
            -0.014127187430858612,
            -0.03231845423579216,
            -0.012109017930924892,
            -0.034399040043354034,
            0.05814547836780548,
            -0.0011018443619832397,
            -0.02019556611776352,
            -0.008641372434794903,
            -0.017227262258529663,
            -0.03342810273170471,
            -0.012989799492061138,
            -0.003880295203998685,
            0.024315129965543747,
            0.012379493564367294,
            0.025674445554614067,
            0.00896039605140686,
            0.018017884343862534,
            -0.009536025114357471,
            0.007878489792346954,
            -0.011831605806946754,
            -0.009584572166204453,
            0.013440593145787716,
            -0.005402591545134783,
            -0.000983944395557046,
            0.00406061252579093,
            -0.023774176836013794,
            -0.0007325400947593153,
            0.0057285502552986145,
            -0.020223308354616165,
            -0.0039981952868402,
            0.009868918918073177,
            -0.013475270010530949,
            -0.011353070847690105,
            0.0169498510658741,
            -0.005617585498839617,
            -0.009848113171756268,
            0.004743739031255245,
            0.010798247531056404,
            -0.012636099942028522,
            -0.006855534855276346,
            -0.0010446282103657722,
            -0.018850119784474373,
            0.00042413637856952846,
            -0.005953947082161903,
            0.007084399461746216,
            0.004407377447932959,
            0.0028348001651465893,
            0.0058845942839980125,
            -0.004275606945157051,
            0.0033445439767092466,
            -0.01194257102906704,
            0.04932378605008125,
            0.008682983927428722,
            0.012629164382815361,
            0.02556348219513893,
            -0.0024776326026767492,
            0.008551213890314102,
            -0.006054508965462446,
            0.010735830292105675,
            0.012615294195711613,
            0.009355707094073296,
            0.03231845423579216,
            -0.03184685483574867,
            -0.024703506380319595,
            -0.00964005384594202,
            0.005308965221047401,
            -0.018406260758638382,
            -0.018808508291840553,
            -0.014328310266137123,
            0.0007100004004314542,
            -0.03645188733935356,
            0.017046945169568062,
            0.004667450673878193,
            -0.011477906256914139,
            0.00025508867111057043,
            -0.010312777012586594,
            0.011748382821679115,
            -0.008391701616346836,
            -0.028906291350722313,
            0.016825014725327492,
            -0.014675075188279152,
            0.0036410277243703604,
            0.003727718722075224,
            -0.0032699895091354847,
            -0.009751019068062305,
            0.009265548549592495,
            0.016145355999469757,
            -0.019391072914004326,
            -0.003710380522534251,
            0.20217759907245636,
            -0.024828340858221054,
            0.0011443229159340262,
            0.013294951990246773,
            -0.0015500375302508473,
            -0.019945895299315453,
            0.04077950865030289,
            0.0056210532784461975,
            0.0036930423229932785,
            0.00964005384594202,
            0.008065743371844292,
            -0.0051113092340528965,
            -0.02586863376200199,
            0.0008838161011226475,
            0.004362297710031271,
            -0.021721331402659416,
            -0.04879670590162277,
            -0.03722864016890526,
            -0.01412025187164545,
            0.0003144720976706594,
            -0.01769886165857315,
            0.008939589373767376,
            -0.021069413051009178,
            -0.029627561569213867,
            0.022678401321172714,
            -0.00679658493027091,
            0.0039045687299221754,
            0.01567375659942627,
            0.007042787503451109,
            0.014106381684541702,
            -0.00532283540815115,
            0.0010853729909285903,
            0.0014676809078082442,
            0.0070670610293745995,
            0.007809137459844351,
            -0.02463415265083313,
            -0.0024152148980647326,
            -0.0021516738925129175,
            0.014633463695645332,
            0.02181842364370823,
            0.016755662858486176,
            -0.005305497441440821,
            0.022858718410134315,
            -0.02643732726573944,
            0.0075317258015275,
            0.04571743682026863,
            -0.006238293834030628,
            -0.005551700014621019,
            0.002090990077704191,
            -0.001815312309190631,
            -0.028739845380187035,
            0.012594487518072128,
            0.01844787411391735,
            0.041389815509319305,
            0.0024637619499117136,
            0.007455437444150448,
            -0.017684990540146828,
            0.01865593157708645,
            -0.006841664202511311,
            0.005021150689572096,
            -0.030265608802437782,
            -0.02607669308781624,
            0.0024152148980647326,
            0.018253685906529427,
            -0.013059152290225029,
            0.00021239327907096595,
            -0.0032578527461737394,
            0.0036930423229932785,
            -0.008835560642182827,
            -0.006033702753484249,
            -0.005066229961812496,
            -0.004809624049812555,
            -0.01971009559929371,
            0.0002477199013810605,
            -0.0209029670804739,
            -0.04860251769423485,
            0.0384492501616478,
            0.03331713750958443,
            -0.0055898441933095455,
            0.02871210314333439,
            -0.007739784196019173,
            -0.015299251303076744,
            -0.0021846166346222162,
            -0.025105752050876617,
            -0.013398981653153896,
            -0.026367975398898125,
            0.012941252440214157,
            -0.02055620215833187,
            -0.01642276905477047,
            -0.008259931579232216,
            -0.004379636142402887,
            -0.015382475219666958,
            0.0044351182878017426,
            0.01571536809206009,
            -0.0033480115234851837,
            0.009015877731144428,
            0.019335590302944183,
            -0.0047888183034956455,
            0.002049378352239728,
            -0.016311803832650185,
            -0.018212072551250458,
            0.042388495057821274,
            0.033650029450654984,
            -0.00431375065818429,
            0.015410215593874454,
            0.012677711434662342,
            -0.016825014725327492,
            -0.0026007341220974922,
            -0.006845131982117891,
            -0.015646016225218773,
            -0.015326992608606815,
            -0.04369233176112175,
            0.014328310266137123,
            -0.0021221989300101995,
            -0.006220955867320299,
            0.011914829723536968,
            0.004674385767430067,
            0.0009934804402291775,
            0.026284752413630486,
            0.0018326506251469254,
            -0.0034069614484906197,
            -0.007503984495997429,
            0.005215338431298733,
            0.002540050307288766,
            0.005395655985921621,
            -0.015479568392038345,
            -0.018059497699141502,
            0.00397392176091671,
            -0.037089936435222626,
            0.008433313108980656,
            0.009293289855122566,
            -0.03209652379155159,
            0.01249045878648758,
            0.010708088986575603,
            0.001496288925409317,
            -0.006033702753484249,
            0.009203130379319191,
            -0.003817877499386668,
            -0.012344817630946636,
            -0.011817735619843006,
            -0.0014624794712290168,
            0.007240443490445614,
            -0.004431650973856449,
            -0.010728894732892513,
            0.015646016225218773,
            -0.0037519922479987144,
            0.012039664201438427,
            0.025355422869324684,
            -0.009244742803275585,
            -0.007001176010817289,
            -0.01407170481979847,
            -0.006886743474751711,
            0.0025677913799881935,
            0.0016722719883546233,
            0.015354733914136887,
            0.014508628286421299,
            -0.0201539546251297,
            0.006026767659932375,
            0.009036683477461338,
            0.021485529839992523,
            -0.0474373884499073,
            0.02278936468064785,
            0.020015249028801918,
            -0.004192383028566837,
            -0.012129823677241802,
            -0.023371929302811623,
            -0.17876406013965607,
            -0.009813436307013035,
            0.0037485247012227774,
            -0.059088677167892456,
            0.02660377509891987,
            0.016783403232693672,
            0.013835905119776726,
            -0.004910185933113098,
            -0.036868005990982056,
            0.0005465875728987157,
            0.006040638312697411,
            -0.01005617156624794,
            -0.021762942895293236,
            -0.012747064232826233,
            -0.009466671384871006,
            0.010971629992127419,
            -0.004109159577637911,
            0.018017884343862534,
            0.023788047954440117,
            0.001333309686742723,
            0.03414937108755112,
            -0.03087591379880905,
            -0.010049236007034779,
            -0.017893049865961075,
            0.009418124333024025,
            -0.0037970717530697584,
            -0.001407864037901163,
            0.016367286443710327,
            -0.013988480903208256,
            -0.024967046454548836,
            -0.010278101079165936,
            -0.015229898504912853,
            0.03118106722831726,
            -0.0052014682441949844,
            0.02244260162115097,
            0.019945895299315453,
            0.03487064316868782,
            0.004490600898861885,
            -0.030182385817170143,
            -0.003320270450785756,
            0.012504328973591328,
            0.03245716169476509,
            0.011873217299580574,
            0.00576322665438056,
            -0.014910874888300896,
            0.01743532158434391,
            0.026270881295204163,
            -0.023441283032298088,
            0.008086549118161201,
            -0.013905257917940617,
            0.026908928528428078,
            -0.025743799284100533,
            0.023524506017565727,
            -0.003824812825769186,
            0.011810800060629845,
            0.02765793912112713,
            0.0014017956564202905,
            0.003538732184097171,
            -0.010375195182859898,
            -0.02704763412475586,
            -0.008142031729221344,
            -0.017157908529043198,
            6.816090171923861e-05,
            -0.008703789673745632,
            -0.012851093895733356,
            -0.02455092966556549,
            -0.022775495424866676,
            0.005548232700675726,
            -0.0350370891392231,
            0.004570356570184231,
            -0.016935979947447777,
            -0.0003836082760244608,
            -0.007975583896040916,
            -0.013627845793962479,
            0.035286758095026016,
            0.027116985991597176,
            0.0003877260896842927,
            0.00907136034220457,
            0.021013930439949036,
            0.00858588982373476,
            -0.012344817630946636,
            0.01796240359544754,
            -0.0024602944031357765,
            0.016228580847382545,
            -0.010402936488389969,
            -0.01409251056611538,
            0.003474580589681864,
            0.015479568392038345,
            -0.026146046817302704,
            -0.009667795151472092,
            0.020098472014069557,
            -0.011172753758728504,
            0.0005678269080817699,
            -0.022054225206375122,
            -0.012268529273569584,
            0.004032871685922146,
            0.008343154564499855,
            0.0017997078830376267,
            -0.0027273029554635286,
            -0.005579441320151091,
            0.007136414293199778,
            0.008391701616346836,
            -0.0057562910951673985,
            -0.002380538498982787,
            0.03833828866481781,
            0.0005695607396773994,
            -0.037173159420490265,
            0.012219982221722603,
            0.03722864016890526,
            -0.018697543069720268,
            -0.025327682495117188,
            -0.015160545706748962,
            0.0015162279596552253,
            -0.0065295761451125145,
            -0.011165818199515343,
            0.005315900314599276,
            -0.01818433217704296,
            -0.016616957262158394,
            0.015535051003098488,
            0.003075801534578204,
            0.041251108050346375,
            0.006661346647888422,
            -0.006175876595079899,
            0.011103400029242039,
            -0.0055725062265992165,
            -0.014383792877197266,
            -0.1235036551952362,
            -0.025577351450920105,
            -0.002793188439682126,
            0.016616957262158394,
            -0.018697543069720268,
            0.03523127734661102,
            -0.0039981952868402,
            0.044940683990716934,
            -0.02726956270635128,
            0.04943475127220154,
            -0.02059781365096569,
            -0.008488795720040798,
            0.005652261897921562,
            -0.0015240301145240664,
            0.01194257102906704,
            -0.0017000131774693727,
            0.009653924964368343,
            -0.010174071416258812,
            -0.02923918515443802,
            0.024426093325018883,
            0.01201192382723093,
            -0.0022522355429828167,
            0.00601636478677392,
            -0.03021012619137764,
            -0.007035852409899235,
            -0.01052083633840084,
            -0.035675134509801865,
            0.03209652379155159,
            0.017116297036409378,
            0.004785350523889065,
            0.013093829154968262,
            -0.030681725591421127,
            -0.0012648236006498337,
            -0.009348771534860134,
            0.01201192382723093,
            -0.00966085959225893,
            0.010201812721788883,
            -0.011283718049526215,
            0.020778130739927292,
            -0.022803235799074173,
            -0.001422601519152522,
            0.014550239779055119,
            0.014134122058749199,
            -0.008308478631079197,
            -0.0005591578083112836,
            -0.021762942895293236,
            -0.010708088986575603,
            0.021887777373194695,
            0.009418124333024025,
            -0.017684990540146828,
            -0.03828280419111252,
            -0.018101109191775322,
            -0.0388098880648613,
            0.014023157767951488,
            0.01654760353267193,
            0.005749356001615524,
            0.011977246962487698,
            0.02339967153966427,
            -0.01909979060292244,
            -0.0013939933851361275,
            -0.01099937129765749,
            0.0015266308328136802,
            -0.030237866565585136,
            -0.002439488423988223,
            0.014702816493809223,
            0.0015613073483109474,
            0.0037623951211571693,
            -0.027325045317411423,
            0.011769188567996025,
            -0.010042301379144192,
            -0.001374054467305541,
            0.019266238436102867,
            -0.005336706060916185,
            0.004282542038708925,
            -0.01446701679378748,
            0.006942226085811853,
            -0.007663496304303408,
            -0.038144100457429886,
            -0.0013125037075951695,
            0.009889724664390087,
            -0.009515218436717987,
            -0.009501348249614239,
            0.01067341212183237,
            -0.005416462197899818,
            9.687734564067796e-05,
            -0.009217001497745514,
            -0.011346135288476944,
            -0.004695191979408264,
            -0.0009934804402291775,
            -0.01814272068440914,
            0.006602396722882986,
            0.03217975050210953,
            -0.0018846652237698436,
            -0.019210755825042725,
            0.0034069614484906197,
            0.011394682340323925,
            -0.016214709728956223,
            -0.012705452740192413,
            0.025674445554614067,
            0.0012509530643001199,
            -0.022276153787970543,
            0.010049236007034779,
            -0.05459460988640785,
            0.042360756546258926,
            0.0036861069966107607,
            -0.008974266238510609,
            -0.001708682277239859,
            -0.02094457857310772,
            0.015465698204934597,
            -0.022109705954790115,
            0.007372213993221521,
            0.009376512840390205,
            -0.016048261895775795,
            0.017102427780628204,
            -0.015257639810442924,
            -0.0058533851988613605,
            -0.024648023769259453,
            -0.010805183090269566,
            0.017532415688037872,
            -1.4070377574171289e-06,
            0.009959077462553978,
            0.006383934989571571,
            0.008003325201570988,
            -0.013870581053197384,
            0.02068103663623333,
            0.02041749656200409,
            0.01950203813612461,
            -0.014952486380934715,
            -0.024481575936079025,
            0.01517441589385271,
            -0.008884107694029808,
            -0.012899640947580338,
            -0.018239814788103104,
            -0.0040952893905341625,
            -0.008031066507101059,
            0.00907136034220457,
            -0.015229898504912853,
            -0.014147993177175522,
            0.016977591440081596,
            0.02629862166941166,
            0.02862888015806675,
            0.04738190770149231,
            -0.017671121284365654,
            -0.04197238013148308,
            0.008405572734773159,
            -0.014786039479076862,
            -0.007399955298751593,
            -0.021804554387927055,
            -0.012393364682793617,
            0.004053677432239056,
            0.02502252906560898,
            0.005596779752522707,
            0.039059557020664215,
            0.019959766417741776,
            -0.02982174977660179,
            -0.036784783005714417,
            -0.013142376206815243,
            0.014508628286421299,
            0.006033702753484249,
            -0.0006909283110871911,
            -0.005565570667386055,
            0.031153324991464615,
            0.032429419457912445,
            0.005485814996063709,
            0.009085230529308319,
            -0.004750674124807119,
            -7.639655814273283e-05,
            -0.003984324634075165,
            -0.004012065473943949,
            0.0016271925996989012,
            0.005846450105309486,
            0.007330602500587702,
            -0.0008387367124669254,
            0.013052216731011868,
            0.0025417839642614126,
            0.0025383164174854755,
            0.005506620742380619,
            -0.024342870339751244,
            0.018087238073349,
            0.01464733388274908,
            -0.017754344269633293,
            0.013600105419754982,
            0.0005639258306473494,
            -0.026756351813673973,
            0.00576322665438056,
            0.0035994157660752535,
            0.021000059321522713,
            0.005919270683079958,
            -0.016089875251054764,
            0.009286354295909405,
            -0.005999026354402304,
            -0.009210065938532352,
            -0.00040289704338647425,
            -0.0014503427082672715,
            -0.00998681876808405,
            0.01167902909219265,
            0.029655303806066513,
            -0.00847492553293705,
            -0.0024030781351029873,
            0.013600105419754982,
            0.01751854456961155,
            -0.003190233837813139,
            0.01676953211426735,
            -0.020015249028801918,
            0.00996601302176714,
            -0.017463061958551407,
            -0.032512642443180084,
            0.007042787503451109,
            -0.03392744064331055,
            -0.007143349386751652,
            0.0376724973320961,
            0.01654760353267193,
            0.016922108829021454,
            -0.005600247066468,
            0.01003536581993103,
            0.006904081907123327,
            -0.01769886165857315,
            0.019959766417741776,
            -0.011498712003231049,
            -0.006997708231210709,
            -0.03065398521721363,
            0.0380331352353096,
            0.04524583742022514,
            0.01792079210281372,
            0.04416393116116524,
            -0.014300569891929626,
            0.007774461060762405,
            0.002328523900359869,
            0.02893403358757496,
            -0.03134751319885254,
            0.01664469763636589,
            -0.014730557799339294,
            -0.0031815646216273308,
            -0.005607182625681162,
            -0.018766896799206734,
            0.0019366799388080835,
            -0.006120393984019756,
            -0.0005314166774041951,
            -0.00964005384594202,
            0.01656147465109825,
            -0.006175876595079899,
            0.054650090634822845,
            0.015840204432606697,
            0.00448019802570343,
            0.022553564980626106,
            -0.017365967854857445,
            0.019252367317676544,
            0.01196337677538395,
            0.027630198746919632,
            -0.0010689017362892628,
            -0.01567375659942627,
            0.004161174409091473,
            -0.00734447268769145,
            -6.501835014205426e-05,
            -0.03894859179854393,
            -0.012747064232826233,
            -0.003341076197102666,
            -0.0032214424572885036,
            0.013620911166071892,
            -0.008114290423691273,
            -0.011124206706881523,
            0.03448226675391197,
            0.006463691126555204,
            0.0222206711769104,
            0.009806500747799873,
            -0.00626950291916728,
            -0.0015977176371961832,
            0.024994786828756332,
            0.0020407093688845634,
            -0.0042790742591023445,
            -0.011672094464302063,
            0.035758357495069504,
            0.02398223616182804,
            -0.03095913678407669,
            -0.021013930439949036,
            -0.0033549468498677015,
            0.001775434473529458,
            0.015576662495732307,
            -0.036340922117233276,
            -0.005617585498839617,
            -0.006789649371057749,
            -0.007621884346008301,
            0.008239124901592731,
            0.0005409526638686657,
            -0.020583942532539368,
            0.0013315757969394326,
            -0.0014789507258683443,
            -0.01686662621796131,
            0.00042326946277171373,
            -0.015867944806814194
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "cf5e6873-e081-420c-af50-def2978c3d69",
        "properties": {
          "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
          "themes": [
            "LLMs (Large Language Models)",
            "Black box nature of AI",
            "Prompting challenges",
            "Evaluation of AI models",
            "Vibes Based Development",
            "Gullibility of AI",
            "AI personal assistants",
            "Code generation",
            "Ethics of AI training data",
            "Legal issues in AI"
          ],
          "entities": [
            "LLMs",
            "ChatGPT",
            "December",
            "September",
            "AGI",
            "Python",
            "JavaScript",
            "Chinese",
            "Spanish",
            "English"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "88d7cf4f-e43e-4577-906c-9843c88540f9",
      "type": "child",
      "source": {
        "id": "d4054310-41ff-4d85-bb2f-84ef02a66fb2",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nStuff we figured out about AI in 2023\n\n31st December 2023\n\n2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s.\n\nHere’s my attempt to round up the highlights in one place!\n\nLarge Language Models\n\nThey’re actually quite easy to build\n\nYou can run LLMs on your own devices\n\nHobbyists can build their own fine-tuned models\n\nWe don’t yet know how to build GPT-4\n\nVibes Based Development\n\nLLMs are really smart, and also really, really dumb\n\nGullibility is the biggest unsolved problem\n\nCode may be the best application\n\nThe ethics of this space remain diabolically complex\n\nMy blog in 2023\n\nHere’s the sequel to this post: Things we learned about LLMs in 2024.\n\nLarge Language Models\n\nIn the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software.\n\nLLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code.\n\nThey can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes.\n\nSo far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life.\n\nA lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity.\n\nThey’re actually quite easy to build\n\nThe most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build.\n\nIntuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version!\n\nWhat matters most is the training  data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is.\n\nIf you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM.\n\nA year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations.\n\nThe training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing.\n\nSo training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries).\n\nYou can run LLMs on your own devices\n\nIn January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them.\n\nThen in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook.\n\nI wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call!\n\nThis unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use.\n\nToday there are literally thousands of LLMs that can be run locally, on all manner of different devices.\n\nI run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins.\n\nYou can even run them entirely in your browser using WebAssembly and the latest Chrome!\n\nHobbyists can build their own fine-tuned models\n\nI said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely.\n\nThere’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too.\n\nThe Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours.\n\nThe best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data.\n\nThis is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them.\n\nWe don’t yet know how to build GPT-4\n\nFrustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4.\n\nOpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing.\n\nThis may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out.\n\nThe team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then.\n\nStill, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet.\n\nVibes Based Development\n\nAs a computer scientist and software engineer, LLMs are infuriating.\n\nEven the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them.\n\nI’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that!\n\nThe worst part is the challenge of evaluating them.\n\nThere are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task.\n\nI find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself!\n\nThe most frustrating thing for me is at the level of individual prompting.\n\nSometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out.\n\nWe’re left with what’s effectively Vibes Based Development. It’s vibes all the way down.\n\nI’d love to see us move beyond vibes in 2024!\n\nLLMs are really smart, and also really, really dumb\n\nOn the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun!\n\nBut on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb.\n\nDoes ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays?\n\nThe honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer.\n\nSometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead.\n\nThere are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works!\n\nGullibility is the biggest unsolved problem\n\nI coined the term prompt injection in September last year.\n\n15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem.\n\nI’ve written a ton about this already.\n\nBeyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility.\n\nLanguage Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt.\n\nIn order to be useful tools for us, we need them to believe what we feed them!\n\nBut it turns out a lot of the things we want to build need them not to be gullible.\n\nEveryone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited.\n\nA lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes.\n\nI think this is because of gullibility.\n\nCan we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true!\n\nCode may be the best application\n\nOver the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of.\n\nIf you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English.\n\nIt’s still astonishing to me how effective they are though.\n\nOne of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless.\n\nExcept... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works!\n\nSo hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language!\n\nHow should we feel about this as software engineers?\n\nOn the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you?\n\nOn the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can.\n\nThe ethics of this space remain diabolically complex\n\nIn September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion.\n\nSince then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data.\n\nJust this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere.\n\nThe legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future.\n\nLaw is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people?\n\nAs the quality of results produced by AI models has increased over the year, these questions have become even more pressing.\n\nThe impact on human society in terms of these models is already huge, if difficult to objectively measure.\n\nPeople have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators.\n\nThere are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic.\n\nMy blog in 2023\n\nHere’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard):\n\nThe top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78).\n\nI’ve written a lot about this stuff!\n\nI grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic:\n\nArticle Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k\n\nI also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023:\n\nPrompt injection explained, with video, slides, and a transcript\n\nCatching up on the weird world of LLMs\n\nMaking Large Language Models work for you\n\nOpen questions for AI engineering\n\nEmbeddings: What they are and why they matter\n\nFinancial sustainability for open source projects at GitHub Universe\n\nAnd in podcasts:\n\nWhat AI can do for you on the Theory of Change\n\nWorking in public on Path to Citus Con\n\nLLMs break the internet on the Changelog\n\nTalking Large Language Models on Rooftop Ruby\n\nThoughts on the OpenAI board situation on Newsroom Robots\n\nIndustry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations\n\nPosted \n\n31st December 2023 at 11:59 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\nblogging\n            68\n\nai\n            1091\n\ngenerative-ai\n            936\n\nllms\n            924\n\nNext: Tom Scott, and the formidable power of escalating streaks\n\nPrevious: Last weeknotes of 2023\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2023_llms.html"
          },
          "headlines": [
            "Large Language Models",
            "Vibes Based Development",
            "LLMs are really smart, and also really, really dumb",
            "Gullibility is the biggest unsolved problem",
            "Code may be the best application"
          ],
          "summary": "In 2023, Large Language Models (LLMs) emerged as a significant development in AI, with advancements making them easier to build and run on personal devices. Despite their capabilities, LLMs remain complex and unpredictable, with gullibility being a major unresolved issue. They excel in generating code, as errors can be tested and corrected, reducing the impact of hallucinations. The ethics of using unlicensed data for training these models are contentious, highlighted by legal actions like the New York Times lawsuit against OpenAI. The year also saw a proliferation of LLMs from various organizations, though none have surpassed GPT-4. The field continues to grapple with the challenges of understanding and controlling these models, often relying on 'Vibes Based Development' due to the lack of clear methodologies.",
          "summary_embedding": [
            -0.011880152858793736,
            0.005520491395145655,
            0.003946180455386639,
            -0.037700239568948746,
            -0.007885425351560116,
            0.010083912871778011,
            -0.017019202932715416,
            0.024648023769259453,
            -0.027394399046897888,
            -0.03700670972466469,
            0.021000059321522713,
            0.0209029670804739,
            -0.029183702543377876,
            0.0010593656916171312,
            -0.0022487679962068796,
            0.014550239779055119,
            0.023122258484363556,
            0.0017624307656660676,
            0.017684990540146828,
            -0.014827651903033257,
            0.005770161747932434,
            0.0033341411035507917,
            -0.018475614488124847,
            -0.01812884956598282,
            -0.004438586067408323,
            0.005416462197899818,
            0.018697543069720268,
            -0.037256382405757904,
            -0.01563214510679245,
            0.005780564621090889,
            0.01914140209555626,
            -0.00017869210569188,
            -0.03395518288016319,
            0.007455437444150448,
            -0.03176363185048103,
            -0.00686246994882822,
            0.024537058547139168,
            -0.00603717053309083,
            0.017879178747534752,
            0.009140713140368462,
            0.030154643580317497,
            0.024745117872953415,
            0.015299251303076744,
            -0.017851438373327255,
            -0.018517225980758667,
            0.017629509791731834,
            0.007608013693243265,
            -0.01976557821035385,
            -0.03215200826525688,
            0.018850119784474373,
            0.018392391502857208,
            0.029849492013454437,
            -0.01005617156624794,
            -0.01352381706237793,
            -0.00445592449977994,
            0.00506969727575779,
            -0.0028954839799553156,
            0.006734167225658894,
            0.013509945943951607,
            -0.001715617487207055,
            -0.006474093999713659,
            -0.020611684769392014,
            -0.004448988940566778,
            0.025313811376690865,
            -0.0043588303960859776,
            -0.007122543640434742,
            -0.023413540795445442,
            0.029183702543377876,
            0.031070102006196976,
            -0.013371240347623825,
            0.0006211419822648168,
            -0.0110201770439744,
            0.013052216731011868,
            -0.005551700014621019,
            0.014758298173546791,
            0.003214507130905986,
            -0.012344817630946636,
            -0.01361397560685873,
            -0.02595185860991478,
            0.00482002692297101,
            -0.003252651309594512,
            0.0050523593090474606,
            -0.010569383390247822,
            0.02278936468064785,
            0.017324356362223625,
            -0.0038074746262282133,
            -0.0057285502552986145,
            -0.018114978447556496,
            -0.004667450673878193,
            -0.014127187430858612,
            -0.006696023046970367,
            -0.005035020876675844,
            0.021860036998987198,
            0.017490802332758904,
            -0.008135096170008183,
            -0.006411676295101643,
            -0.012358687818050385,
            0.009952141903340816,
            -0.014702816493809223,
            -0.022775495424866676,
            -0.007261249236762524,
            0.0014988897601142526,
            -0.04383103549480438,
            -0.008738466538488865,
            -0.020694907754659653,
            0.004074483178555965,
            0.015271509997546673,
            0.022997424006462097,
            0.02051459066569805,
            0.014550239779055119,
            -0.012372558936476707,
            0.027990832924842834,
            0.005596779752522707,
            -0.026312492787837982,
            -0.00212393281981349,
            -0.009972947649657726,
            0.006040638312697411,
            0.001518828677944839,
            -0.001785837346687913,
            0.0013610507594421506,
            0.03267908841371536,
            0.01052083633840084,
            0.012892705388367176,
            0.0011243839981034398,
            0.023968365043401718,
            -0.011075659655034542,
            3.1615174520993605e-05,
            -0.020805872976779938,
            -0.011103400029242039,
            -0.0023406606633216143,
            0.004077950958162546,
            0.00500728003680706,
            0.008870236575603485,
            0.0070982701145112514,
            -0.03087591379880905,
            0.040640804916620255,
            -0.015618274919688702,
            -0.002240099012851715,
            0.006928355433046818,
            0.009889724664390087,
            0.004771479871124029,
            0.026950540021061897,
            -0.024009976536035538,
            0.019335590302944183,
            -0.011124206706881523,
            0.020403625443577766,
            0.0057458882220089436,
            0.016533732414245605,
            -0.0015214293962344527,
            -0.0012630898272618651,
            0.00803800206631422,
            -0.035286758095026016,
            -0.020833613350987434,
            0.016408897936344147,
            0.009189260192215443,
            0.005392188671976328,
            0.00906442478299141,
            0.030543019995093346,
            -0.038837626576423645,
            -0.015867944806814194,
            -0.013232534751296043,
            0.015743110328912735,
            -0.004001662600785494,
            0.015951167792081833,
            0.013856710866093636,
            0.021000059321522713,
            0.021582623943686485,
            -0.0030723337549716234,
            -0.007892360910773277,
            -0.011561129242181778,
            -0.017754344269633293,
            0.03595254570245743,
            -0.0342603363096714,
            0.01559053361415863,
            -0.009667795151472092,
            0.016811145469546318,
            0.02309451811015606,
            -0.0018499888246878982,
            -0.026881186291575432,
            -0.011783058755099773,
            0.02037588320672512,
            0.005343641620129347,
            0.008315413258969784,
            -0.00343123497441411,
            -0.021832294762134552,
            0.0033705513924360275,
            0.014085575006902218,
            0.0008309344993904233,
            0.01062486506998539,
            -0.02489769272506237,
            0.02871210314333439,
            0.01654760353267193,
            -0.005423397291451693,
            -0.01932171918451786,
            -0.6506966948509216,
            -0.03523127734661102,
            0.013974610716104507,
            -0.012781741097569466,
            -0.0027567781507968903,
            -0.006595461629331112,
            -0.005253482609987259,
            -0.01453636959195137,
            -0.02072264812886715,
            0.036729298532009125,
            -0.012358687818050385,
            0.002305984264239669,
            -0.003167693968862295,
            -0.0203342717140913,
            0.010721959173679352,
            -0.009189260192215443,
            0.001533566159196198,
            -0.025494128465652466,
            0.007774461060762405,
            0.01769886165857315,
            -0.0047541419044137,
            0.01611761562526226,
            -0.006300711538642645,
            -0.010569383390247822,
            -0.027338916435837746,
            0.0037346540484577417,
            0.013385111466050148,
            0.01690823957324028,
            -0.008322348818182945,
            0.006675217300653458,
            -0.014168798923492432,
            0.006616267375648022,
            -0.005707744043320417,
            0.008967330679297447,
            0.04904637485742569,
            0.00063111144118011,
            -0.018766896799206734,
            0.021971000358462334,
            0.0012232118751853704,
            0.007788331247866154,
            -0.04119562730193138,
            -0.012268529273569584,
            -0.004400441888719797,
            0.029433373361825943,
            -0.010500029660761356,
            0.030986879020929337,
            0.025702187791466713,
            -0.01158887054771185,
            -0.016519863158464432,
            -0.00633538793772459,
            0.0014286699006333947,
            0.0051598562858998775,
            0.0040952893905341625,
            0.0010567649733275175,
            0.0031867660582065582,
            0.012968993745744228,
            0.014231216162443161,
            -0.013828969560563564,
            0.0021586092188954353,
            -0.020805872976779938,
            -0.0008630102383904159,
            -0.014799910597503185,
            -0.026645386591553688,
            -0.030487537384033203,
            -0.015313121490180492,
            0.011276782490313053,
            0.006789649371057749,
            0.010742764919996262,
            -0.004930991679430008,
            -0.015701498836278915,
            -0.004594630096107721,
            0.04280461370944977,
            -0.0019332122756168246,
            -0.011609676294028759,
            -0.007809137459844351,
            0.014002352021634579,
            0.005416462197899818,
            -0.014453145675361156,
            -0.002104860730469227,
            0.01106178853660822,
            0.003309867577627301,
            -0.02161036618053913,
            -0.0003725551359821111,
            -0.0006566853262484074,
            0.0388098880648613,
            0.0036895745433866978,
            0.012788675725460052,
            -0.0009622715879231691,
            0.0010827722726389766,
            0.008703789673745632,
            0.005191064905375242,
            0.030321091413497925,
            -0.014952486380934715,
            -0.051348891109228134,
            0.004459391813725233,
            0.01690823957324028,
            -0.018558837473392487,
            0.014286698773503304,
            0.021069413051009178,
            -0.028268244117498398,
            -0.004608500748872757,
            -0.013822034001350403,
            0.042527202516794205,
            0.02538316324353218,
            0.012407234869897366,
            0.022553564980626106,
            0.0027116986457258463,
            0.001938413712196052,
            0.013822034001350403,
            -0.025979598984122276,
            -0.006706425920128822,
            0.0035040555521845818,
            -0.0005639258306473494,
            -0.006383934989571571,
            -0.0057458882220089436,
            -0.03217975050210953,
            -0.007171090692281723,
            -0.01255981158465147,
            0.011741447262465954,
            -0.026881186291575432,
            0.018031755462288857,
            -0.006914484780281782,
            0.02915596216917038,
            -0.0041715772822499275,
            -0.00017825864779297262,
            0.0009735414059832692,
            0.004088353831321001,
            -0.01016713585704565,
            -0.0035924806725233793,
            0.0242873877286911,
            -0.008488795720040798,
            -0.022428730502724648,
            0.016741791740059853,
            -0.012379493564367294,
            0.016755662858486176,
            0.013919128105044365,
            0.04849155247211456,
            -0.008336219005286694,
            0.009744083508849144,
            0.017005333676934242,
            -0.023690953850746155,
            0.0013411118416115642,
            0.010458418168127537,
            0.014508628286421299,
            -0.04058532044291496,
            -0.03287327662110329,
            -0.005527426488697529,
            -0.006321517284959555,
            0.005461541470140219,
            -0.014702816493809223,
            -0.014799910597503185,
            -0.01761563867330551,
            -0.01848948560655117,
            0.03412162885069847,
            -0.001908938749693334,
            -0.00776059040799737,
            -0.0091337775811553,
            -0.021984871476888657,
            -0.004424715414643288,
            -0.021332954987883568,
            0.010000688955187798,
            0.009265548549592495,
            0.004157706629484892,
            0.008481860160827637,
            0.016783403232693672,
            -0.02301129512488842,
            -0.01049309503287077,
            0.028989514335989952,
            -0.0384492501616478,
            -0.020792001858353615,
            0.0034295013174414635,
            -0.03764475882053375,
            0.014480886980891228,
            0.03181911259889603,
            -0.009397318586707115,
            0.027768904343247414,
            -0.0069318232126533985,
            0.0016688043251633644,
            0.007001176010817289,
            -0.013731875456869602,
            0.006720296572893858,
            0.029100479558110237,
            0.012712388299405575,
            -0.006318049971014261,
            0.013662522658705711,
            0.02309451811015606,
            0.0368957482278347,
            0.016838885843753815,
            -0.0014512095367535949,
            0.0040155332535505295,
            0.004580759443342686,
            0.036118995398283005,
            -0.0040155332535505295,
            0.0067445700988173485,
            -0.013697199523448944,
            0.026270881295204163,
            0.001154725905507803,
            -0.01905817911028862,
            0.007150284945964813,
            0.025854764506220818,
            0.012136758305132389,
            0.01778208464384079,
            0.01607600413262844,
            -0.012844158336520195,
            0.0073791490867733955,
            -0.023635471239686012,
            5.252940900390968e-05,
            -0.012268529273569584,
            -0.009106036275625229,
            0.016325674951076508,
            0.007940907962620258,
            0.0009822105057537556,
            -0.011034047231078148,
            -0.01521602738648653,
            0.0036861069966107607,
            0.029044996947050095,
            0.000787155469879508,
            0.016935979947447777,
            -0.00845411978662014,
            -9.189260163111612e-05,
            0.004965668078511953,
            0.005520491395145655,
            0.016145355999469757,
            -0.011380812153220177,
            0.0010775708360597491,
            0.01514667458832264,
            -0.018558837473392487,
            0.011165818199515343,
            -0.00408488605171442,
            -0.034315817058086395,
            0.013364304788410664,
            0.015951167792081833,
            0.022331636399030685,
            0.01765725016593933,
            0.004629306495189667,
            -0.011366941034793854,
            0.02266453020274639,
            -0.009473606944084167,
            0.02609056420624256,
            -3.0721170332981274e-05,
            -0.009230871684849262,
            0.012476587668061256,
            -0.0003751558833755553,
            -0.008031066507101059,
            0.034676454961299896,
            -0.007268184795975685,
            0.0376724973320961,
            -0.010617930442094803,
            -0.03209652379155159,
            0.004282542038708925,
            -0.03947567567229271,
            0.012226917780935764,
            -0.025965727865695953,
            -0.00034546415554359555,
            -0.00016861424956005067,
            -0.023954493924975395,
            0.00854427833110094,
            2.0562052668537945e-05,
            0.020098472014069557,
            0.008239124901592731,
            -0.012407234869897366,
            0.003056729445233941,
            0.0075317258015275,
            0.0029839088674634695,
            0.010201812721788883,
            -0.008904913440346718,
            -0.010007624514400959,
            0.0047541419044137,
            -0.015965038910508156,
            -0.016533732414245605,
            -0.02603508159518242,
            -0.0191968847066164,
            0.006553849671036005,
            -0.033622290939092636,
            0.04163948446512222,
            -0.0038421510253101587,
            0.006415144074708223,
            0.0014581448631361127,
            0.01690823957324028,
            0.04249946027994156,
            -0.021374566480517387,
            -0.03817183896899223,
            0.022678401321172714,
            0.005204935558140278,
            -0.0015769117744639516,
            -0.016880497336387634,
            -0.04541228339076042,
            0.009841177612543106,
            0.0029613692313432693,
            -0.013059152290225029,
            -0.006155070383101702,
            0.006106523331254721,
            -0.0036410277243703604,
            0.0028902823105454445,
            -0.012157564982771873,
            0.028961773961782455,
            0.0241070706397295,
            -0.004022468812763691,
            -0.00896039605140686,
            -0.01577085070312023,
            0.0032578527461737394,
            0.010063107125461102,
            -0.006432482041418552,
            -0.023524506017565727,
            0.02840695157647133,
            -0.00906442478299141,
            -0.040418874472379684,
            0.002739439718425274,
            0.0017130167689174414,
            -0.008197513408958912,
            -0.009411189705133438,
            0.00891184899955988,
            0.011221300810575485,
            0.004320686217397451,
            0.016963720321655273,
            0.017046945169568062,
            0.010687283240258694,
            0.005426865071058273,
            0.010763571597635746,
            0.008301543071866035,
            0.013322693295776844,
            -0.03933696821331978,
            -0.0001738157297950238,
            0.01314931083470583,
            0.07401341944932938,
            0.004119562450796366,
            -0.017449190840125084,
            0.0038386834785342216,
            -0.024356741458177567,
            -0.01918301358819008,
            -0.01861432008445263,
            -0.007060125935822725,
            0.0062660351395606995,
            0.028989514335989952,
            -0.01585407368838787,
            -0.00557597354054451,
            0.012608358636498451,
            -0.0013766551855951548,
            0.023968365043401718,
            0.020653296262025833,
            0.017684990540146828,
            -0.025175105780363083,
            -0.02893403358757496,
            -0.013932999223470688,
            0.00034914855496026576,
            0.0033740189392119646,
            0.016131486743688583,
            0.011276782490313053,
            0.012324011884629726,
            -0.012039664201438427,
            0.02489769272506237,
            0.015451828017830849,
            -0.03819958120584488,
            -0.019571390002965927,
            0.0048963152803480625,
            0.0067931171506643295,
            0.007524790242314339,
            0.0160205215215683,
            -0.006779246497899294,
            0.015368604101240635,
            0.016492120921611786,
            0.0012405500747263432,
            0.0064220791682600975,
            -0.001980025554075837,
            0.030265608802437782,
            0.027519233524799347,
            0.0017806359101086855,
            -0.008114290423691273,
            0.0018101108726114035,
            -0.024564798921346664,
            -0.001299500116147101,
            0.04105691984295845,
            0.00902281329035759,
            -0.03498160466551781,
            0.014369922690093517,
            -0.0010255561210215092,
            -0.023593859747052193,
            -0.006148135289549828,
            0.01585407368838787,
            0.016228580847382545,
            0.010250359773635864,
            -0.0014659470180049539,
            -0.004265203606337309,
            -0.017587896436452866,
            -0.018586579710245132,
            -0.033650029450654984,
            -0.00812122505158186,
            -0.022914201021194458,
            -0.010500029660761356,
            1.1398529750294983e-05,
            -0.025008657947182655,
            0.009820371866226196,
            -0.0463554821908474,
            0.008669113740324974,
            0.0013489139964804053,
            -0.028795326128602028,
            -0.05251402035355568,
            -0.004414312541484833,
            0.010916147381067276,
            -0.014716686680912971,
            0.026243140920996666,
            -0.006904081907123327,
            0.004240930080413818,
            0.013780422508716583,
            -0.006647475995123386,
            -0.006574655417352915,
            -0.010500029660761356,
            -0.007413825951516628,
            0.008329284377396107,
            -0.004712529946118593,
            -0.02187390625476837,
            -0.015229898504912853,
            0.00043172185542061925,
            0.01269158162176609,
            0.007212702184915543,
            -0.003935777582228184,
            -0.005922738462686539,
            0.015063451603055,
            -0.011873217299580574,
            0.015965038910508156,
            0.024842211976647377,
            0.011283718049526215,
            -0.0027862531132996082,
            -0.020126214250922203,
            -0.00907136034220457,
            -0.02037588320672512,
            -0.03104236163198948,
            -0.0191968847066164,
            0.008357025682926178,
            0.010007624514400959,
            0.024439964443445206,
            0.026021210476756096,
            0.0014312706189230084,
            -0.009327965788543224,
            0.006193214561790228,
            -0.007614949252456427,
            0.019793320447206497,
            -0.003623689291998744,
            0.017241133376955986,
            0.006928355433046818,
            0.016173098236322403,
            0.004372700583189726,
            0.018059497699141502,
            -0.024994786828756332,
            -0.0259934701025486,
            -0.04768705740571022,
            0.03179137408733368,
            0.009397318586707115,
            -0.011200494132936,
            0.024079328402876854,
            0.016630826517939568,
            0.011540323495864868,
            -0.03684026375412941,
            0.014057834632694721,
            0.003963518422096968,
            0.027214080095291138,
            0.00267355446703732,
            -0.0022088901605457067,
            -0.020306531339883804,
            -0.02072264812886715,
            -0.016131486743688583,
            0.013662522658705711,
            -0.01883624866604805,
            -0.013225599192082882,
            0.01656147465109825,
            0.024426093325018883,
            -0.0009206598624587059,
            -0.018059497699141502,
            0.022761624306440353,
            -0.026548292487859726,
            -0.009820371866226196,
            0.027255691587924957,
            0.01251126453280449,
            0.04874122142791748,
            -0.016325674951076508,
            0.021277472376823425,
            -0.04152851924300194,
            -0.02234550751745701,
            0.005790967959910631,
            -0.02265065908432007,
            0.0026787561364471912,
            0.003966986201703548,
            0.027949221432209015,
            0.00907136034220457,
            0.04496842622756958,
            -0.007497049402445555,
            0.007406890392303467,
            0.007358343340456486,
            -0.008710725232958794,
            -0.01297592930495739,
            -0.0013003670610487461,
            -0.005645326804369688,
            -0.010659541934728622,
            -0.0005288159009069204,
            -0.009757953695952892,
            -0.008315413258969784,
            0.026229269802570343,
            -0.007871555164456367,
            -0.012989799492061138,
            0.0031018087174743414,
            -0.014897004701197147,
            -0.008384766057133675,
            -0.020362013950943947,
            -0.02256743609905243,
            -0.02209583669900894,
            -0.002709964755922556,
            -0.0014486088184639812,
            0.01264997012913227,
            -0.0222206711769104,
            -0.005842982325702906,
            0.015604403801262379,
            0.013607040047645569,
            0.001834384398534894,
            -0.00048113579396158457,
            0.01812884956598282,
            0.004372700583189726,
            -0.008946524932980537,
            0.024967046454548836,
            0.005978220608085394,
            -0.04197238013148308,
            -0.005849917884916067,
            -0.0429433211684227,
            0.0021291342563927174,
            0.02577153965830803,
            0.0043865712359547615,
            0.01822594366967678,
            0.013260276056826115,
            -0.01163741759955883,
            0.007268184795975685,
            0.005988623481243849,
            0.0021395371295511723,
            -0.008065743371844292,
            -0.013364304788410664,
            -0.027172468602657318,
            -0.00675150565803051,
            -0.025494128465652466,
            -0.018947213888168335,
            -0.015576662495732307,
            -0.010749700479209423,
            -0.0053575122728943825,
            0.009820371866226196,
            0.031070102006196976,
            -0.029044996947050095,
            -0.026756351813673973,
            0.03495386615395546,
            0.016783403232693672,
            0.026229269802570343,
            -0.00401900103315711,
            0.02248421311378479,
            0.02459254115819931,
            0.006689087953418493,
            -0.015229898504912853,
            0.015035710297524929,
            0.018905602395534515,
            -0.0065295761451125145,
            0.012913511134684086,
            0.0007633154164068401,
            -0.019155273213982582,
            -0.016089875251054764,
            0.03187459707260132,
            0.011789994314312935,
            -0.030848173424601555,
            -0.045911625027656555,
            0.015909556299448013,
            0.013475270010530949,
            0.00794784352183342,
            -0.01778208464384079,
            -0.030099160969257355,
            -0.023025164380669594,
            0.010347453877329826,
            -0.0003229244612157345,
            0.02744987979531288,
            -0.004768012557178736,
            -0.017144039273262024,
            0.014113316312432289,
            -0.002328523900359869,
            0.014397663064301014,
            -0.008218319155275822,
            -0.011339200660586357,
            0.011353070847690105,
            0.013690263964235783,
            -0.007434631697833538,
            -0.011242106556892395,
            0.012927382253110409,
            0.00267355446703732,
            0.024495447054505348,
            0.014196540229022503,
            0.0013809897936880589,
            -0.004875509534031153,
            0.021069413051009178,
            0.018850119784474373,
            -0.010708088986575603,
            -0.001047228928655386,
            0.03215200826525688,
            -0.03392744064331055,
            -0.010666477493941784,
            0.005392188671976328,
            -0.01409251056611538,
            0.006789649371057749,
            -0.015132804401218891,
            -0.007705107796937227,
            -0.011755317449569702,
            0.01264303456991911,
            0.016048261895775795,
            0.024176422506570816,
            0.01814272068440914,
            -0.01158887054771185,
            0.0035109908785670996,
            -0.012982863932847977,
            -0.045606471598148346,
            -0.005437267944216728,
            -0.00506969727575779,
            0.008051872253417969,
            -0.019834931939840317,
            0.013079958036541939,
            0.019737837836146355,
            -0.025882504880428314,
            6.382634455803782e-05,
            -0.0055412971414625645,
            -0.028074055910110474,
            -0.0054823472164571285,
            0.016256321221590042,
            -0.023746434599161148,
            0.0021482063457369804,
            0.018378520384430885,
            0.0016401963075622916,
            -0.0040155332535505295,
            0.009764889255166054,
            -0.004504471085965633,
            -0.00019819760927930474,
            0.004906718153506517,
            -0.008863301947712898,
            -0.02564670518040657,
            -0.009279418736696243,
            -0.010950824245810509,
            0.01255981158465147,
            -0.0028885486535727978,
            -0.0012310141464695334,
            0.00633538793772459,
            -0.008142031729221344,
            0.007247378583997488,
            -0.006227890960872173,
            -0.005551700014621019,
            0.02450931817293167,
            -0.006741102784872055,
            0.0010610994650050998,
            0.007580272853374481,
            -0.020126214250922203,
            0.0106456708163023,
            -0.016436638310551643,
            0.002588597359135747,
            -0.013600105419754982,
            -0.040113721042871475,
            -0.00845411978662014,
            0.015368604101240635,
            0.0021638106554746628,
            0.00034242996480315924,
            -0.0028608073480427265,
            -0.013926063664257526,
            -0.00225050188601017,
            -0.009119907394051552,
            0.018558837473392487,
            0.007157220039516687,
            0.006276438012719154,
            0.0012838956899940968,
            0.035980287939310074,
            0.01510506309568882,
            0.008155901916325092,
            -0.02278936468064785,
            -0.005738953128457069,
            -0.018114978447556496,
            -0.014127187430858612,
            -0.03231845423579216,
            -0.012109017930924892,
            -0.034399040043354034,
            0.05814547836780548,
            -0.0011018443619832397,
            -0.02019556611776352,
            -0.008641372434794903,
            -0.017227262258529663,
            -0.03342810273170471,
            -0.012989799492061138,
            -0.003880295203998685,
            0.024315129965543747,
            0.012379493564367294,
            0.025674445554614067,
            0.00896039605140686,
            0.018017884343862534,
            -0.009536025114357471,
            0.007878489792346954,
            -0.011831605806946754,
            -0.009584572166204453,
            0.013440593145787716,
            -0.005402591545134783,
            -0.000983944395557046,
            0.00406061252579093,
            -0.023774176836013794,
            -0.0007325400947593153,
            0.0057285502552986145,
            -0.020223308354616165,
            -0.0039981952868402,
            0.009868918918073177,
            -0.013475270010530949,
            -0.011353070847690105,
            0.0169498510658741,
            -0.005617585498839617,
            -0.009848113171756268,
            0.004743739031255245,
            0.010798247531056404,
            -0.012636099942028522,
            -0.006855534855276346,
            -0.0010446282103657722,
            -0.018850119784474373,
            0.00042413637856952846,
            -0.005953947082161903,
            0.007084399461746216,
            0.004407377447932959,
            0.0028348001651465893,
            0.0058845942839980125,
            -0.004275606945157051,
            0.0033445439767092466,
            -0.01194257102906704,
            0.04932378605008125,
            0.008682983927428722,
            0.012629164382815361,
            0.02556348219513893,
            -0.0024776326026767492,
            0.008551213890314102,
            -0.006054508965462446,
            0.010735830292105675,
            0.012615294195711613,
            0.009355707094073296,
            0.03231845423579216,
            -0.03184685483574867,
            -0.024703506380319595,
            -0.00964005384594202,
            0.005308965221047401,
            -0.018406260758638382,
            -0.018808508291840553,
            -0.014328310266137123,
            0.0007100004004314542,
            -0.03645188733935356,
            0.017046945169568062,
            0.004667450673878193,
            -0.011477906256914139,
            0.00025508867111057043,
            -0.010312777012586594,
            0.011748382821679115,
            -0.008391701616346836,
            -0.028906291350722313,
            0.016825014725327492,
            -0.014675075188279152,
            0.0036410277243703604,
            0.003727718722075224,
            -0.0032699895091354847,
            -0.009751019068062305,
            0.009265548549592495,
            0.016145355999469757,
            -0.019391072914004326,
            -0.003710380522534251,
            0.20217759907245636,
            -0.024828340858221054,
            0.0011443229159340262,
            0.013294951990246773,
            -0.0015500375302508473,
            -0.019945895299315453,
            0.04077950865030289,
            0.0056210532784461975,
            0.0036930423229932785,
            0.00964005384594202,
            0.008065743371844292,
            -0.0051113092340528965,
            -0.02586863376200199,
            0.0008838161011226475,
            0.004362297710031271,
            -0.021721331402659416,
            -0.04879670590162277,
            -0.03722864016890526,
            -0.01412025187164545,
            0.0003144720976706594,
            -0.01769886165857315,
            0.008939589373767376,
            -0.021069413051009178,
            -0.029627561569213867,
            0.022678401321172714,
            -0.00679658493027091,
            0.0039045687299221754,
            0.01567375659942627,
            0.007042787503451109,
            0.014106381684541702,
            -0.00532283540815115,
            0.0010853729909285903,
            0.0014676809078082442,
            0.0070670610293745995,
            0.007809137459844351,
            -0.02463415265083313,
            -0.0024152148980647326,
            -0.0021516738925129175,
            0.014633463695645332,
            0.02181842364370823,
            0.016755662858486176,
            -0.005305497441440821,
            0.022858718410134315,
            -0.02643732726573944,
            0.0075317258015275,
            0.04571743682026863,
            -0.006238293834030628,
            -0.005551700014621019,
            0.002090990077704191,
            -0.001815312309190631,
            -0.028739845380187035,
            0.012594487518072128,
            0.01844787411391735,
            0.041389815509319305,
            0.0024637619499117136,
            0.007455437444150448,
            -0.017684990540146828,
            0.01865593157708645,
            -0.006841664202511311,
            0.005021150689572096,
            -0.030265608802437782,
            -0.02607669308781624,
            0.0024152148980647326,
            0.018253685906529427,
            -0.013059152290225029,
            0.00021239327907096595,
            -0.0032578527461737394,
            0.0036930423229932785,
            -0.008835560642182827,
            -0.006033702753484249,
            -0.005066229961812496,
            -0.004809624049812555,
            -0.01971009559929371,
            0.0002477199013810605,
            -0.0209029670804739,
            -0.04860251769423485,
            0.0384492501616478,
            0.03331713750958443,
            -0.0055898441933095455,
            0.02871210314333439,
            -0.007739784196019173,
            -0.015299251303076744,
            -0.0021846166346222162,
            -0.025105752050876617,
            -0.013398981653153896,
            -0.026367975398898125,
            0.012941252440214157,
            -0.02055620215833187,
            -0.01642276905477047,
            -0.008259931579232216,
            -0.004379636142402887,
            -0.015382475219666958,
            0.0044351182878017426,
            0.01571536809206009,
            -0.0033480115234851837,
            0.009015877731144428,
            0.019335590302944183,
            -0.0047888183034956455,
            0.002049378352239728,
            -0.016311803832650185,
            -0.018212072551250458,
            0.042388495057821274,
            0.033650029450654984,
            -0.00431375065818429,
            0.015410215593874454,
            0.012677711434662342,
            -0.016825014725327492,
            -0.0026007341220974922,
            -0.006845131982117891,
            -0.015646016225218773,
            -0.015326992608606815,
            -0.04369233176112175,
            0.014328310266137123,
            -0.0021221989300101995,
            -0.006220955867320299,
            0.011914829723536968,
            0.004674385767430067,
            0.0009934804402291775,
            0.026284752413630486,
            0.0018326506251469254,
            -0.0034069614484906197,
            -0.007503984495997429,
            0.005215338431298733,
            0.002540050307288766,
            0.005395655985921621,
            -0.015479568392038345,
            -0.018059497699141502,
            0.00397392176091671,
            -0.037089936435222626,
            0.008433313108980656,
            0.009293289855122566,
            -0.03209652379155159,
            0.01249045878648758,
            0.010708088986575603,
            0.001496288925409317,
            -0.006033702753484249,
            0.009203130379319191,
            -0.003817877499386668,
            -0.012344817630946636,
            -0.011817735619843006,
            -0.0014624794712290168,
            0.007240443490445614,
            -0.004431650973856449,
            -0.010728894732892513,
            0.015646016225218773,
            -0.0037519922479987144,
            0.012039664201438427,
            0.025355422869324684,
            -0.009244742803275585,
            -0.007001176010817289,
            -0.01407170481979847,
            -0.006886743474751711,
            0.0025677913799881935,
            0.0016722719883546233,
            0.015354733914136887,
            0.014508628286421299,
            -0.0201539546251297,
            0.006026767659932375,
            0.009036683477461338,
            0.021485529839992523,
            -0.0474373884499073,
            0.02278936468064785,
            0.020015249028801918,
            -0.004192383028566837,
            -0.012129823677241802,
            -0.023371929302811623,
            -0.17876406013965607,
            -0.009813436307013035,
            0.0037485247012227774,
            -0.059088677167892456,
            0.02660377509891987,
            0.016783403232693672,
            0.013835905119776726,
            -0.004910185933113098,
            -0.036868005990982056,
            0.0005465875728987157,
            0.006040638312697411,
            -0.01005617156624794,
            -0.021762942895293236,
            -0.012747064232826233,
            -0.009466671384871006,
            0.010971629992127419,
            -0.004109159577637911,
            0.018017884343862534,
            0.023788047954440117,
            0.001333309686742723,
            0.03414937108755112,
            -0.03087591379880905,
            -0.010049236007034779,
            -0.017893049865961075,
            0.009418124333024025,
            -0.0037970717530697584,
            -0.001407864037901163,
            0.016367286443710327,
            -0.013988480903208256,
            -0.024967046454548836,
            -0.010278101079165936,
            -0.015229898504912853,
            0.03118106722831726,
            -0.0052014682441949844,
            0.02244260162115097,
            0.019945895299315453,
            0.03487064316868782,
            0.004490600898861885,
            -0.030182385817170143,
            -0.003320270450785756,
            0.012504328973591328,
            0.03245716169476509,
            0.011873217299580574,
            0.00576322665438056,
            -0.014910874888300896,
            0.01743532158434391,
            0.026270881295204163,
            -0.023441283032298088,
            0.008086549118161201,
            -0.013905257917940617,
            0.026908928528428078,
            -0.025743799284100533,
            0.023524506017565727,
            -0.003824812825769186,
            0.011810800060629845,
            0.02765793912112713,
            0.0014017956564202905,
            0.003538732184097171,
            -0.010375195182859898,
            -0.02704763412475586,
            -0.008142031729221344,
            -0.017157908529043198,
            6.816090171923861e-05,
            -0.008703789673745632,
            -0.012851093895733356,
            -0.02455092966556549,
            -0.022775495424866676,
            0.005548232700675726,
            -0.0350370891392231,
            0.004570356570184231,
            -0.016935979947447777,
            -0.0003836082760244608,
            -0.007975583896040916,
            -0.013627845793962479,
            0.035286758095026016,
            0.027116985991597176,
            0.0003877260896842927,
            0.00907136034220457,
            0.021013930439949036,
            0.00858588982373476,
            -0.012344817630946636,
            0.01796240359544754,
            -0.0024602944031357765,
            0.016228580847382545,
            -0.010402936488389969,
            -0.01409251056611538,
            0.003474580589681864,
            0.015479568392038345,
            -0.026146046817302704,
            -0.009667795151472092,
            0.020098472014069557,
            -0.011172753758728504,
            0.0005678269080817699,
            -0.022054225206375122,
            -0.012268529273569584,
            0.004032871685922146,
            0.008343154564499855,
            0.0017997078830376267,
            -0.0027273029554635286,
            -0.005579441320151091,
            0.007136414293199778,
            0.008391701616346836,
            -0.0057562910951673985,
            -0.002380538498982787,
            0.03833828866481781,
            0.0005695607396773994,
            -0.037173159420490265,
            0.012219982221722603,
            0.03722864016890526,
            -0.018697543069720268,
            -0.025327682495117188,
            -0.015160545706748962,
            0.0015162279596552253,
            -0.0065295761451125145,
            -0.011165818199515343,
            0.005315900314599276,
            -0.01818433217704296,
            -0.016616957262158394,
            0.015535051003098488,
            0.003075801534578204,
            0.041251108050346375,
            0.006661346647888422,
            -0.006175876595079899,
            0.011103400029242039,
            -0.0055725062265992165,
            -0.014383792877197266,
            -0.1235036551952362,
            -0.025577351450920105,
            -0.002793188439682126,
            0.016616957262158394,
            -0.018697543069720268,
            0.03523127734661102,
            -0.0039981952868402,
            0.044940683990716934,
            -0.02726956270635128,
            0.04943475127220154,
            -0.02059781365096569,
            -0.008488795720040798,
            0.005652261897921562,
            -0.0015240301145240664,
            0.01194257102906704,
            -0.0017000131774693727,
            0.009653924964368343,
            -0.010174071416258812,
            -0.02923918515443802,
            0.024426093325018883,
            0.01201192382723093,
            -0.0022522355429828167,
            0.00601636478677392,
            -0.03021012619137764,
            -0.007035852409899235,
            -0.01052083633840084,
            -0.035675134509801865,
            0.03209652379155159,
            0.017116297036409378,
            0.004785350523889065,
            0.013093829154968262,
            -0.030681725591421127,
            -0.0012648236006498337,
            -0.009348771534860134,
            0.01201192382723093,
            -0.00966085959225893,
            0.010201812721788883,
            -0.011283718049526215,
            0.020778130739927292,
            -0.022803235799074173,
            -0.001422601519152522,
            0.014550239779055119,
            0.014134122058749199,
            -0.008308478631079197,
            -0.0005591578083112836,
            -0.021762942895293236,
            -0.010708088986575603,
            0.021887777373194695,
            0.009418124333024025,
            -0.017684990540146828,
            -0.03828280419111252,
            -0.018101109191775322,
            -0.0388098880648613,
            0.014023157767951488,
            0.01654760353267193,
            0.005749356001615524,
            0.011977246962487698,
            0.02339967153966427,
            -0.01909979060292244,
            -0.0013939933851361275,
            -0.01099937129765749,
            0.0015266308328136802,
            -0.030237866565585136,
            -0.002439488423988223,
            0.014702816493809223,
            0.0015613073483109474,
            0.0037623951211571693,
            -0.027325045317411423,
            0.011769188567996025,
            -0.010042301379144192,
            -0.001374054467305541,
            0.019266238436102867,
            -0.005336706060916185,
            0.004282542038708925,
            -0.01446701679378748,
            0.006942226085811853,
            -0.007663496304303408,
            -0.038144100457429886,
            -0.0013125037075951695,
            0.009889724664390087,
            -0.009515218436717987,
            -0.009501348249614239,
            0.01067341212183237,
            -0.005416462197899818,
            9.687734564067796e-05,
            -0.009217001497745514,
            -0.011346135288476944,
            -0.004695191979408264,
            -0.0009934804402291775,
            -0.01814272068440914,
            0.006602396722882986,
            0.03217975050210953,
            -0.0018846652237698436,
            -0.019210755825042725,
            0.0034069614484906197,
            0.011394682340323925,
            -0.016214709728956223,
            -0.012705452740192413,
            0.025674445554614067,
            0.0012509530643001199,
            -0.022276153787970543,
            0.010049236007034779,
            -0.05459460988640785,
            0.042360756546258926,
            0.0036861069966107607,
            -0.008974266238510609,
            -0.001708682277239859,
            -0.02094457857310772,
            0.015465698204934597,
            -0.022109705954790115,
            0.007372213993221521,
            0.009376512840390205,
            -0.016048261895775795,
            0.017102427780628204,
            -0.015257639810442924,
            -0.0058533851988613605,
            -0.024648023769259453,
            -0.010805183090269566,
            0.017532415688037872,
            -1.4070377574171289e-06,
            0.009959077462553978,
            0.006383934989571571,
            0.008003325201570988,
            -0.013870581053197384,
            0.02068103663623333,
            0.02041749656200409,
            0.01950203813612461,
            -0.014952486380934715,
            -0.024481575936079025,
            0.01517441589385271,
            -0.008884107694029808,
            -0.012899640947580338,
            -0.018239814788103104,
            -0.0040952893905341625,
            -0.008031066507101059,
            0.00907136034220457,
            -0.015229898504912853,
            -0.014147993177175522,
            0.016977591440081596,
            0.02629862166941166,
            0.02862888015806675,
            0.04738190770149231,
            -0.017671121284365654,
            -0.04197238013148308,
            0.008405572734773159,
            -0.014786039479076862,
            -0.007399955298751593,
            -0.021804554387927055,
            -0.012393364682793617,
            0.004053677432239056,
            0.02502252906560898,
            0.005596779752522707,
            0.039059557020664215,
            0.019959766417741776,
            -0.02982174977660179,
            -0.036784783005714417,
            -0.013142376206815243,
            0.014508628286421299,
            0.006033702753484249,
            -0.0006909283110871911,
            -0.005565570667386055,
            0.031153324991464615,
            0.032429419457912445,
            0.005485814996063709,
            0.009085230529308319,
            -0.004750674124807119,
            -7.639655814273283e-05,
            -0.003984324634075165,
            -0.004012065473943949,
            0.0016271925996989012,
            0.005846450105309486,
            0.007330602500587702,
            -0.0008387367124669254,
            0.013052216731011868,
            0.0025417839642614126,
            0.0025383164174854755,
            0.005506620742380619,
            -0.024342870339751244,
            0.018087238073349,
            0.01464733388274908,
            -0.017754344269633293,
            0.013600105419754982,
            0.0005639258306473494,
            -0.026756351813673973,
            0.00576322665438056,
            0.0035994157660752535,
            0.021000059321522713,
            0.005919270683079958,
            -0.016089875251054764,
            0.009286354295909405,
            -0.005999026354402304,
            -0.009210065938532352,
            -0.00040289704338647425,
            -0.0014503427082672715,
            -0.00998681876808405,
            0.01167902909219265,
            0.029655303806066513,
            -0.00847492553293705,
            -0.0024030781351029873,
            0.013600105419754982,
            0.01751854456961155,
            -0.003190233837813139,
            0.01676953211426735,
            -0.020015249028801918,
            0.00996601302176714,
            -0.017463061958551407,
            -0.032512642443180084,
            0.007042787503451109,
            -0.03392744064331055,
            -0.007143349386751652,
            0.0376724973320961,
            0.01654760353267193,
            0.016922108829021454,
            -0.005600247066468,
            0.01003536581993103,
            0.006904081907123327,
            -0.01769886165857315,
            0.019959766417741776,
            -0.011498712003231049,
            -0.006997708231210709,
            -0.03065398521721363,
            0.0380331352353096,
            0.04524583742022514,
            0.01792079210281372,
            0.04416393116116524,
            -0.014300569891929626,
            0.007774461060762405,
            0.002328523900359869,
            0.02893403358757496,
            -0.03134751319885254,
            0.01664469763636589,
            -0.014730557799339294,
            -0.0031815646216273308,
            -0.005607182625681162,
            -0.018766896799206734,
            0.0019366799388080835,
            -0.006120393984019756,
            -0.0005314166774041951,
            -0.00964005384594202,
            0.01656147465109825,
            -0.006175876595079899,
            0.054650090634822845,
            0.015840204432606697,
            0.00448019802570343,
            0.022553564980626106,
            -0.017365967854857445,
            0.019252367317676544,
            0.01196337677538395,
            0.027630198746919632,
            -0.0010689017362892628,
            -0.01567375659942627,
            0.004161174409091473,
            -0.00734447268769145,
            -6.501835014205426e-05,
            -0.03894859179854393,
            -0.012747064232826233,
            -0.003341076197102666,
            -0.0032214424572885036,
            0.013620911166071892,
            -0.008114290423691273,
            -0.011124206706881523,
            0.03448226675391197,
            0.006463691126555204,
            0.0222206711769104,
            0.009806500747799873,
            -0.00626950291916728,
            -0.0015977176371961832,
            0.024994786828756332,
            0.0020407093688845634,
            -0.0042790742591023445,
            -0.011672094464302063,
            0.035758357495069504,
            0.02398223616182804,
            -0.03095913678407669,
            -0.021013930439949036,
            -0.0033549468498677015,
            0.001775434473529458,
            0.015576662495732307,
            -0.036340922117233276,
            -0.005617585498839617,
            -0.006789649371057749,
            -0.007621884346008301,
            0.008239124901592731,
            0.0005409526638686657,
            -0.020583942532539368,
            0.0013315757969394326,
            -0.0014789507258683443,
            -0.01686662621796131,
            0.00042326946277171373,
            -0.015867944806814194
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "86dcaf4e-a4e7-45e4-ada0-c47059dfa405",
      "type": "child",
      "source": {
        "id": "d4054310-41ff-4d85-bb2f-84ef02a66fb2",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nStuff we figured out about AI in 2023\n\n31st December 2023\n\n2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s.\n\nHere’s my attempt to round up the highlights in one place!\n\nLarge Language Models\n\nThey’re actually quite easy to build\n\nYou can run LLMs on your own devices\n\nHobbyists can build their own fine-tuned models\n\nWe don’t yet know how to build GPT-4\n\nVibes Based Development\n\nLLMs are really smart, and also really, really dumb\n\nGullibility is the biggest unsolved problem\n\nCode may be the best application\n\nThe ethics of this space remain diabolically complex\n\nMy blog in 2023\n\nHere’s the sequel to this post: Things we learned about LLMs in 2024.\n\nLarge Language Models\n\nIn the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software.\n\nLLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code.\n\nThey can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes.\n\nSo far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life.\n\nA lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity.\n\nThey’re actually quite easy to build\n\nThe most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build.\n\nIntuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version!\n\nWhat matters most is the training  data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is.\n\nIf you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM.\n\nA year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations.\n\nThe training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing.\n\nSo training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries).\n\nYou can run LLMs on your own devices\n\nIn January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them.\n\nThen in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook.\n\nI wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call!\n\nThis unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use.\n\nToday there are literally thousands of LLMs that can be run locally, on all manner of different devices.\n\nI run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins.\n\nYou can even run them entirely in your browser using WebAssembly and the latest Chrome!\n\nHobbyists can build their own fine-tuned models\n\nI said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely.\n\nThere’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too.\n\nThe Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours.\n\nThe best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data.\n\nThis is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them.\n\nWe don’t yet know how to build GPT-4\n\nFrustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4.\n\nOpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing.\n\nThis may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out.\n\nThe team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then.\n\nStill, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet.\n\nVibes Based Development\n\nAs a computer scientist and software engineer, LLMs are infuriating.\n\nEven the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them.\n\nI’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that!\n\nThe worst part is the challenge of evaluating them.\n\nThere are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task.\n\nI find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself!\n\nThe most frustrating thing for me is at the level of individual prompting.\n\nSometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out.\n\nWe’re left with what’s effectively Vibes Based Development. It’s vibes all the way down.\n\nI’d love to see us move beyond vibes in 2024!\n\nLLMs are really smart, and also really, really dumb\n\nOn the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun!\n\nBut on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb.\n\nDoes ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays?\n\nThe honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer.\n\nSometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead.\n\nThere are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works!\n\nGullibility is the biggest unsolved problem\n\nI coined the term prompt injection in September last year.\n\n15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem.\n\nI’ve written a ton about this already.\n\nBeyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility.\n\nLanguage Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt.\n\nIn order to be useful tools for us, we need them to believe what we feed them!\n\nBut it turns out a lot of the things we want to build need them not to be gullible.\n\nEveryone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited.\n\nA lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes.\n\nI think this is because of gullibility.\n\nCan we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true!\n\nCode may be the best application\n\nOver the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of.\n\nIf you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English.\n\nIt’s still astonishing to me how effective they are though.\n\nOne of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless.\n\nExcept... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works!\n\nSo hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language!\n\nHow should we feel about this as software engineers?\n\nOn the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you?\n\nOn the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can.\n\nThe ethics of this space remain diabolically complex\n\nIn September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion.\n\nSince then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data.\n\nJust this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere.\n\nThe legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future.\n\nLaw is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people?\n\nAs the quality of results produced by AI models has increased over the year, these questions have become even more pressing.\n\nThe impact on human society in terms of these models is already huge, if difficult to objectively measure.\n\nPeople have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators.\n\nThere are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic.\n\nMy blog in 2023\n\nHere’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard):\n\nThe top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78).\n\nI’ve written a lot about this stuff!\n\nI grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic:\n\nArticle Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k\n\nI also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023:\n\nPrompt injection explained, with video, slides, and a transcript\n\nCatching up on the weird world of LLMs\n\nMaking Large Language Models work for you\n\nOpen questions for AI engineering\n\nEmbeddings: What they are and why they matter\n\nFinancial sustainability for open source projects at GitHub Universe\n\nAnd in podcasts:\n\nWhat AI can do for you on the Theory of Change\n\nWorking in public on Path to Citus Con\n\nLLMs break the internet on the Changelog\n\nTalking Large Language Models on Rooftop Ruby\n\nThoughts on the OpenAI board situation on Newsroom Robots\n\nIndustry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations\n\nPosted \n\n31st December 2023 at 11:59 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\nblogging\n            68\n\nai\n            1091\n\ngenerative-ai\n            936\n\nllms\n            924\n\nNext: Tom Scott, and the formidable power of escalating streaks\n\nPrevious: Last weeknotes of 2023\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2023_llms.html"
          },
          "headlines": [
            "Large Language Models",
            "Vibes Based Development",
            "LLMs are really smart, and also really, really dumb",
            "Gullibility is the biggest unsolved problem",
            "Code may be the best application"
          ],
          "summary": "In 2023, Large Language Models (LLMs) emerged as a significant development in AI, with advancements making them easier to build and run on personal devices. Despite their capabilities, LLMs remain complex and unpredictable, with gullibility being a major unresolved issue. They excel in generating code, as errors can be tested and corrected, reducing the impact of hallucinations. The ethics of using unlicensed data for training these models are contentious, highlighted by legal actions like the New York Times lawsuit against OpenAI. The year also saw a proliferation of LLMs from various organizations, though none have surpassed GPT-4. The field continues to grapple with the challenges of understanding and controlling these models, often relying on 'Vibes Based Development' due to the lack of clear methodologies.",
          "summary_embedding": [
            -0.011880152858793736,
            0.005520491395145655,
            0.003946180455386639,
            -0.037700239568948746,
            -0.007885425351560116,
            0.010083912871778011,
            -0.017019202932715416,
            0.024648023769259453,
            -0.027394399046897888,
            -0.03700670972466469,
            0.021000059321522713,
            0.0209029670804739,
            -0.029183702543377876,
            0.0010593656916171312,
            -0.0022487679962068796,
            0.014550239779055119,
            0.023122258484363556,
            0.0017624307656660676,
            0.017684990540146828,
            -0.014827651903033257,
            0.005770161747932434,
            0.0033341411035507917,
            -0.018475614488124847,
            -0.01812884956598282,
            -0.004438586067408323,
            0.005416462197899818,
            0.018697543069720268,
            -0.037256382405757904,
            -0.01563214510679245,
            0.005780564621090889,
            0.01914140209555626,
            -0.00017869210569188,
            -0.03395518288016319,
            0.007455437444150448,
            -0.03176363185048103,
            -0.00686246994882822,
            0.024537058547139168,
            -0.00603717053309083,
            0.017879178747534752,
            0.009140713140368462,
            0.030154643580317497,
            0.024745117872953415,
            0.015299251303076744,
            -0.017851438373327255,
            -0.018517225980758667,
            0.017629509791731834,
            0.007608013693243265,
            -0.01976557821035385,
            -0.03215200826525688,
            0.018850119784474373,
            0.018392391502857208,
            0.029849492013454437,
            -0.01005617156624794,
            -0.01352381706237793,
            -0.00445592449977994,
            0.00506969727575779,
            -0.0028954839799553156,
            0.006734167225658894,
            0.013509945943951607,
            -0.001715617487207055,
            -0.006474093999713659,
            -0.020611684769392014,
            -0.004448988940566778,
            0.025313811376690865,
            -0.0043588303960859776,
            -0.007122543640434742,
            -0.023413540795445442,
            0.029183702543377876,
            0.031070102006196976,
            -0.013371240347623825,
            0.0006211419822648168,
            -0.0110201770439744,
            0.013052216731011868,
            -0.005551700014621019,
            0.014758298173546791,
            0.003214507130905986,
            -0.012344817630946636,
            -0.01361397560685873,
            -0.02595185860991478,
            0.00482002692297101,
            -0.003252651309594512,
            0.0050523593090474606,
            -0.010569383390247822,
            0.02278936468064785,
            0.017324356362223625,
            -0.0038074746262282133,
            -0.0057285502552986145,
            -0.018114978447556496,
            -0.004667450673878193,
            -0.014127187430858612,
            -0.006696023046970367,
            -0.005035020876675844,
            0.021860036998987198,
            0.017490802332758904,
            -0.008135096170008183,
            -0.006411676295101643,
            -0.012358687818050385,
            0.009952141903340816,
            -0.014702816493809223,
            -0.022775495424866676,
            -0.007261249236762524,
            0.0014988897601142526,
            -0.04383103549480438,
            -0.008738466538488865,
            -0.020694907754659653,
            0.004074483178555965,
            0.015271509997546673,
            0.022997424006462097,
            0.02051459066569805,
            0.014550239779055119,
            -0.012372558936476707,
            0.027990832924842834,
            0.005596779752522707,
            -0.026312492787837982,
            -0.00212393281981349,
            -0.009972947649657726,
            0.006040638312697411,
            0.001518828677944839,
            -0.001785837346687913,
            0.0013610507594421506,
            0.03267908841371536,
            0.01052083633840084,
            0.012892705388367176,
            0.0011243839981034398,
            0.023968365043401718,
            -0.011075659655034542,
            3.1615174520993605e-05,
            -0.020805872976779938,
            -0.011103400029242039,
            -0.0023406606633216143,
            0.004077950958162546,
            0.00500728003680706,
            0.008870236575603485,
            0.0070982701145112514,
            -0.03087591379880905,
            0.040640804916620255,
            -0.015618274919688702,
            -0.002240099012851715,
            0.006928355433046818,
            0.009889724664390087,
            0.004771479871124029,
            0.026950540021061897,
            -0.024009976536035538,
            0.019335590302944183,
            -0.011124206706881523,
            0.020403625443577766,
            0.0057458882220089436,
            0.016533732414245605,
            -0.0015214293962344527,
            -0.0012630898272618651,
            0.00803800206631422,
            -0.035286758095026016,
            -0.020833613350987434,
            0.016408897936344147,
            0.009189260192215443,
            0.005392188671976328,
            0.00906442478299141,
            0.030543019995093346,
            -0.038837626576423645,
            -0.015867944806814194,
            -0.013232534751296043,
            0.015743110328912735,
            -0.004001662600785494,
            0.015951167792081833,
            0.013856710866093636,
            0.021000059321522713,
            0.021582623943686485,
            -0.0030723337549716234,
            -0.007892360910773277,
            -0.011561129242181778,
            -0.017754344269633293,
            0.03595254570245743,
            -0.0342603363096714,
            0.01559053361415863,
            -0.009667795151472092,
            0.016811145469546318,
            0.02309451811015606,
            -0.0018499888246878982,
            -0.026881186291575432,
            -0.011783058755099773,
            0.02037588320672512,
            0.005343641620129347,
            0.008315413258969784,
            -0.00343123497441411,
            -0.021832294762134552,
            0.0033705513924360275,
            0.014085575006902218,
            0.0008309344993904233,
            0.01062486506998539,
            -0.02489769272506237,
            0.02871210314333439,
            0.01654760353267193,
            -0.005423397291451693,
            -0.01932171918451786,
            -0.6506966948509216,
            -0.03523127734661102,
            0.013974610716104507,
            -0.012781741097569466,
            -0.0027567781507968903,
            -0.006595461629331112,
            -0.005253482609987259,
            -0.01453636959195137,
            -0.02072264812886715,
            0.036729298532009125,
            -0.012358687818050385,
            0.002305984264239669,
            -0.003167693968862295,
            -0.0203342717140913,
            0.010721959173679352,
            -0.009189260192215443,
            0.001533566159196198,
            -0.025494128465652466,
            0.007774461060762405,
            0.01769886165857315,
            -0.0047541419044137,
            0.01611761562526226,
            -0.006300711538642645,
            -0.010569383390247822,
            -0.027338916435837746,
            0.0037346540484577417,
            0.013385111466050148,
            0.01690823957324028,
            -0.008322348818182945,
            0.006675217300653458,
            -0.014168798923492432,
            0.006616267375648022,
            -0.005707744043320417,
            0.008967330679297447,
            0.04904637485742569,
            0.00063111144118011,
            -0.018766896799206734,
            0.021971000358462334,
            0.0012232118751853704,
            0.007788331247866154,
            -0.04119562730193138,
            -0.012268529273569584,
            -0.004400441888719797,
            0.029433373361825943,
            -0.010500029660761356,
            0.030986879020929337,
            0.025702187791466713,
            -0.01158887054771185,
            -0.016519863158464432,
            -0.00633538793772459,
            0.0014286699006333947,
            0.0051598562858998775,
            0.0040952893905341625,
            0.0010567649733275175,
            0.0031867660582065582,
            0.012968993745744228,
            0.014231216162443161,
            -0.013828969560563564,
            0.0021586092188954353,
            -0.020805872976779938,
            -0.0008630102383904159,
            -0.014799910597503185,
            -0.026645386591553688,
            -0.030487537384033203,
            -0.015313121490180492,
            0.011276782490313053,
            0.006789649371057749,
            0.010742764919996262,
            -0.004930991679430008,
            -0.015701498836278915,
            -0.004594630096107721,
            0.04280461370944977,
            -0.0019332122756168246,
            -0.011609676294028759,
            -0.007809137459844351,
            0.014002352021634579,
            0.005416462197899818,
            -0.014453145675361156,
            -0.002104860730469227,
            0.01106178853660822,
            0.003309867577627301,
            -0.02161036618053913,
            -0.0003725551359821111,
            -0.0006566853262484074,
            0.0388098880648613,
            0.0036895745433866978,
            0.012788675725460052,
            -0.0009622715879231691,
            0.0010827722726389766,
            0.008703789673745632,
            0.005191064905375242,
            0.030321091413497925,
            -0.014952486380934715,
            -0.051348891109228134,
            0.004459391813725233,
            0.01690823957324028,
            -0.018558837473392487,
            0.014286698773503304,
            0.021069413051009178,
            -0.028268244117498398,
            -0.004608500748872757,
            -0.013822034001350403,
            0.042527202516794205,
            0.02538316324353218,
            0.012407234869897366,
            0.022553564980626106,
            0.0027116986457258463,
            0.001938413712196052,
            0.013822034001350403,
            -0.025979598984122276,
            -0.006706425920128822,
            0.0035040555521845818,
            -0.0005639258306473494,
            -0.006383934989571571,
            -0.0057458882220089436,
            -0.03217975050210953,
            -0.007171090692281723,
            -0.01255981158465147,
            0.011741447262465954,
            -0.026881186291575432,
            0.018031755462288857,
            -0.006914484780281782,
            0.02915596216917038,
            -0.0041715772822499275,
            -0.00017825864779297262,
            0.0009735414059832692,
            0.004088353831321001,
            -0.01016713585704565,
            -0.0035924806725233793,
            0.0242873877286911,
            -0.008488795720040798,
            -0.022428730502724648,
            0.016741791740059853,
            -0.012379493564367294,
            0.016755662858486176,
            0.013919128105044365,
            0.04849155247211456,
            -0.008336219005286694,
            0.009744083508849144,
            0.017005333676934242,
            -0.023690953850746155,
            0.0013411118416115642,
            0.010458418168127537,
            0.014508628286421299,
            -0.04058532044291496,
            -0.03287327662110329,
            -0.005527426488697529,
            -0.006321517284959555,
            0.005461541470140219,
            -0.014702816493809223,
            -0.014799910597503185,
            -0.01761563867330551,
            -0.01848948560655117,
            0.03412162885069847,
            -0.001908938749693334,
            -0.00776059040799737,
            -0.0091337775811553,
            -0.021984871476888657,
            -0.004424715414643288,
            -0.021332954987883568,
            0.010000688955187798,
            0.009265548549592495,
            0.004157706629484892,
            0.008481860160827637,
            0.016783403232693672,
            -0.02301129512488842,
            -0.01049309503287077,
            0.028989514335989952,
            -0.0384492501616478,
            -0.020792001858353615,
            0.0034295013174414635,
            -0.03764475882053375,
            0.014480886980891228,
            0.03181911259889603,
            -0.009397318586707115,
            0.027768904343247414,
            -0.0069318232126533985,
            0.0016688043251633644,
            0.007001176010817289,
            -0.013731875456869602,
            0.006720296572893858,
            0.029100479558110237,
            0.012712388299405575,
            -0.006318049971014261,
            0.013662522658705711,
            0.02309451811015606,
            0.0368957482278347,
            0.016838885843753815,
            -0.0014512095367535949,
            0.0040155332535505295,
            0.004580759443342686,
            0.036118995398283005,
            -0.0040155332535505295,
            0.0067445700988173485,
            -0.013697199523448944,
            0.026270881295204163,
            0.001154725905507803,
            -0.01905817911028862,
            0.007150284945964813,
            0.025854764506220818,
            0.012136758305132389,
            0.01778208464384079,
            0.01607600413262844,
            -0.012844158336520195,
            0.0073791490867733955,
            -0.023635471239686012,
            5.252940900390968e-05,
            -0.012268529273569584,
            -0.009106036275625229,
            0.016325674951076508,
            0.007940907962620258,
            0.0009822105057537556,
            -0.011034047231078148,
            -0.01521602738648653,
            0.0036861069966107607,
            0.029044996947050095,
            0.000787155469879508,
            0.016935979947447777,
            -0.00845411978662014,
            -9.189260163111612e-05,
            0.004965668078511953,
            0.005520491395145655,
            0.016145355999469757,
            -0.011380812153220177,
            0.0010775708360597491,
            0.01514667458832264,
            -0.018558837473392487,
            0.011165818199515343,
            -0.00408488605171442,
            -0.034315817058086395,
            0.013364304788410664,
            0.015951167792081833,
            0.022331636399030685,
            0.01765725016593933,
            0.004629306495189667,
            -0.011366941034793854,
            0.02266453020274639,
            -0.009473606944084167,
            0.02609056420624256,
            -3.0721170332981274e-05,
            -0.009230871684849262,
            0.012476587668061256,
            -0.0003751558833755553,
            -0.008031066507101059,
            0.034676454961299896,
            -0.007268184795975685,
            0.0376724973320961,
            -0.010617930442094803,
            -0.03209652379155159,
            0.004282542038708925,
            -0.03947567567229271,
            0.012226917780935764,
            -0.025965727865695953,
            -0.00034546415554359555,
            -0.00016861424956005067,
            -0.023954493924975395,
            0.00854427833110094,
            2.0562052668537945e-05,
            0.020098472014069557,
            0.008239124901592731,
            -0.012407234869897366,
            0.003056729445233941,
            0.0075317258015275,
            0.0029839088674634695,
            0.010201812721788883,
            -0.008904913440346718,
            -0.010007624514400959,
            0.0047541419044137,
            -0.015965038910508156,
            -0.016533732414245605,
            -0.02603508159518242,
            -0.0191968847066164,
            0.006553849671036005,
            -0.033622290939092636,
            0.04163948446512222,
            -0.0038421510253101587,
            0.006415144074708223,
            0.0014581448631361127,
            0.01690823957324028,
            0.04249946027994156,
            -0.021374566480517387,
            -0.03817183896899223,
            0.022678401321172714,
            0.005204935558140278,
            -0.0015769117744639516,
            -0.016880497336387634,
            -0.04541228339076042,
            0.009841177612543106,
            0.0029613692313432693,
            -0.013059152290225029,
            -0.006155070383101702,
            0.006106523331254721,
            -0.0036410277243703604,
            0.0028902823105454445,
            -0.012157564982771873,
            0.028961773961782455,
            0.0241070706397295,
            -0.004022468812763691,
            -0.00896039605140686,
            -0.01577085070312023,
            0.0032578527461737394,
            0.010063107125461102,
            -0.006432482041418552,
            -0.023524506017565727,
            0.02840695157647133,
            -0.00906442478299141,
            -0.040418874472379684,
            0.002739439718425274,
            0.0017130167689174414,
            -0.008197513408958912,
            -0.009411189705133438,
            0.00891184899955988,
            0.011221300810575485,
            0.004320686217397451,
            0.016963720321655273,
            0.017046945169568062,
            0.010687283240258694,
            0.005426865071058273,
            0.010763571597635746,
            0.008301543071866035,
            0.013322693295776844,
            -0.03933696821331978,
            -0.0001738157297950238,
            0.01314931083470583,
            0.07401341944932938,
            0.004119562450796366,
            -0.017449190840125084,
            0.0038386834785342216,
            -0.024356741458177567,
            -0.01918301358819008,
            -0.01861432008445263,
            -0.007060125935822725,
            0.0062660351395606995,
            0.028989514335989952,
            -0.01585407368838787,
            -0.00557597354054451,
            0.012608358636498451,
            -0.0013766551855951548,
            0.023968365043401718,
            0.020653296262025833,
            0.017684990540146828,
            -0.025175105780363083,
            -0.02893403358757496,
            -0.013932999223470688,
            0.00034914855496026576,
            0.0033740189392119646,
            0.016131486743688583,
            0.011276782490313053,
            0.012324011884629726,
            -0.012039664201438427,
            0.02489769272506237,
            0.015451828017830849,
            -0.03819958120584488,
            -0.019571390002965927,
            0.0048963152803480625,
            0.0067931171506643295,
            0.007524790242314339,
            0.0160205215215683,
            -0.006779246497899294,
            0.015368604101240635,
            0.016492120921611786,
            0.0012405500747263432,
            0.0064220791682600975,
            -0.001980025554075837,
            0.030265608802437782,
            0.027519233524799347,
            0.0017806359101086855,
            -0.008114290423691273,
            0.0018101108726114035,
            -0.024564798921346664,
            -0.001299500116147101,
            0.04105691984295845,
            0.00902281329035759,
            -0.03498160466551781,
            0.014369922690093517,
            -0.0010255561210215092,
            -0.023593859747052193,
            -0.006148135289549828,
            0.01585407368838787,
            0.016228580847382545,
            0.010250359773635864,
            -0.0014659470180049539,
            -0.004265203606337309,
            -0.017587896436452866,
            -0.018586579710245132,
            -0.033650029450654984,
            -0.00812122505158186,
            -0.022914201021194458,
            -0.010500029660761356,
            1.1398529750294983e-05,
            -0.025008657947182655,
            0.009820371866226196,
            -0.0463554821908474,
            0.008669113740324974,
            0.0013489139964804053,
            -0.028795326128602028,
            -0.05251402035355568,
            -0.004414312541484833,
            0.010916147381067276,
            -0.014716686680912971,
            0.026243140920996666,
            -0.006904081907123327,
            0.004240930080413818,
            0.013780422508716583,
            -0.006647475995123386,
            -0.006574655417352915,
            -0.010500029660761356,
            -0.007413825951516628,
            0.008329284377396107,
            -0.004712529946118593,
            -0.02187390625476837,
            -0.015229898504912853,
            0.00043172185542061925,
            0.01269158162176609,
            0.007212702184915543,
            -0.003935777582228184,
            -0.005922738462686539,
            0.015063451603055,
            -0.011873217299580574,
            0.015965038910508156,
            0.024842211976647377,
            0.011283718049526215,
            -0.0027862531132996082,
            -0.020126214250922203,
            -0.00907136034220457,
            -0.02037588320672512,
            -0.03104236163198948,
            -0.0191968847066164,
            0.008357025682926178,
            0.010007624514400959,
            0.024439964443445206,
            0.026021210476756096,
            0.0014312706189230084,
            -0.009327965788543224,
            0.006193214561790228,
            -0.007614949252456427,
            0.019793320447206497,
            -0.003623689291998744,
            0.017241133376955986,
            0.006928355433046818,
            0.016173098236322403,
            0.004372700583189726,
            0.018059497699141502,
            -0.024994786828756332,
            -0.0259934701025486,
            -0.04768705740571022,
            0.03179137408733368,
            0.009397318586707115,
            -0.011200494132936,
            0.024079328402876854,
            0.016630826517939568,
            0.011540323495864868,
            -0.03684026375412941,
            0.014057834632694721,
            0.003963518422096968,
            0.027214080095291138,
            0.00267355446703732,
            -0.0022088901605457067,
            -0.020306531339883804,
            -0.02072264812886715,
            -0.016131486743688583,
            0.013662522658705711,
            -0.01883624866604805,
            -0.013225599192082882,
            0.01656147465109825,
            0.024426093325018883,
            -0.0009206598624587059,
            -0.018059497699141502,
            0.022761624306440353,
            -0.026548292487859726,
            -0.009820371866226196,
            0.027255691587924957,
            0.01251126453280449,
            0.04874122142791748,
            -0.016325674951076508,
            0.021277472376823425,
            -0.04152851924300194,
            -0.02234550751745701,
            0.005790967959910631,
            -0.02265065908432007,
            0.0026787561364471912,
            0.003966986201703548,
            0.027949221432209015,
            0.00907136034220457,
            0.04496842622756958,
            -0.007497049402445555,
            0.007406890392303467,
            0.007358343340456486,
            -0.008710725232958794,
            -0.01297592930495739,
            -0.0013003670610487461,
            -0.005645326804369688,
            -0.010659541934728622,
            -0.0005288159009069204,
            -0.009757953695952892,
            -0.008315413258969784,
            0.026229269802570343,
            -0.007871555164456367,
            -0.012989799492061138,
            0.0031018087174743414,
            -0.014897004701197147,
            -0.008384766057133675,
            -0.020362013950943947,
            -0.02256743609905243,
            -0.02209583669900894,
            -0.002709964755922556,
            -0.0014486088184639812,
            0.01264997012913227,
            -0.0222206711769104,
            -0.005842982325702906,
            0.015604403801262379,
            0.013607040047645569,
            0.001834384398534894,
            -0.00048113579396158457,
            0.01812884956598282,
            0.004372700583189726,
            -0.008946524932980537,
            0.024967046454548836,
            0.005978220608085394,
            -0.04197238013148308,
            -0.005849917884916067,
            -0.0429433211684227,
            0.0021291342563927174,
            0.02577153965830803,
            0.0043865712359547615,
            0.01822594366967678,
            0.013260276056826115,
            -0.01163741759955883,
            0.007268184795975685,
            0.005988623481243849,
            0.0021395371295511723,
            -0.008065743371844292,
            -0.013364304788410664,
            -0.027172468602657318,
            -0.00675150565803051,
            -0.025494128465652466,
            -0.018947213888168335,
            -0.015576662495732307,
            -0.010749700479209423,
            -0.0053575122728943825,
            0.009820371866226196,
            0.031070102006196976,
            -0.029044996947050095,
            -0.026756351813673973,
            0.03495386615395546,
            0.016783403232693672,
            0.026229269802570343,
            -0.00401900103315711,
            0.02248421311378479,
            0.02459254115819931,
            0.006689087953418493,
            -0.015229898504912853,
            0.015035710297524929,
            0.018905602395534515,
            -0.0065295761451125145,
            0.012913511134684086,
            0.0007633154164068401,
            -0.019155273213982582,
            -0.016089875251054764,
            0.03187459707260132,
            0.011789994314312935,
            -0.030848173424601555,
            -0.045911625027656555,
            0.015909556299448013,
            0.013475270010530949,
            0.00794784352183342,
            -0.01778208464384079,
            -0.030099160969257355,
            -0.023025164380669594,
            0.010347453877329826,
            -0.0003229244612157345,
            0.02744987979531288,
            -0.004768012557178736,
            -0.017144039273262024,
            0.014113316312432289,
            -0.002328523900359869,
            0.014397663064301014,
            -0.008218319155275822,
            -0.011339200660586357,
            0.011353070847690105,
            0.013690263964235783,
            -0.007434631697833538,
            -0.011242106556892395,
            0.012927382253110409,
            0.00267355446703732,
            0.024495447054505348,
            0.014196540229022503,
            0.0013809897936880589,
            -0.004875509534031153,
            0.021069413051009178,
            0.018850119784474373,
            -0.010708088986575603,
            -0.001047228928655386,
            0.03215200826525688,
            -0.03392744064331055,
            -0.010666477493941784,
            0.005392188671976328,
            -0.01409251056611538,
            0.006789649371057749,
            -0.015132804401218891,
            -0.007705107796937227,
            -0.011755317449569702,
            0.01264303456991911,
            0.016048261895775795,
            0.024176422506570816,
            0.01814272068440914,
            -0.01158887054771185,
            0.0035109908785670996,
            -0.012982863932847977,
            -0.045606471598148346,
            -0.005437267944216728,
            -0.00506969727575779,
            0.008051872253417969,
            -0.019834931939840317,
            0.013079958036541939,
            0.019737837836146355,
            -0.025882504880428314,
            6.382634455803782e-05,
            -0.0055412971414625645,
            -0.028074055910110474,
            -0.0054823472164571285,
            0.016256321221590042,
            -0.023746434599161148,
            0.0021482063457369804,
            0.018378520384430885,
            0.0016401963075622916,
            -0.0040155332535505295,
            0.009764889255166054,
            -0.004504471085965633,
            -0.00019819760927930474,
            0.004906718153506517,
            -0.008863301947712898,
            -0.02564670518040657,
            -0.009279418736696243,
            -0.010950824245810509,
            0.01255981158465147,
            -0.0028885486535727978,
            -0.0012310141464695334,
            0.00633538793772459,
            -0.008142031729221344,
            0.007247378583997488,
            -0.006227890960872173,
            -0.005551700014621019,
            0.02450931817293167,
            -0.006741102784872055,
            0.0010610994650050998,
            0.007580272853374481,
            -0.020126214250922203,
            0.0106456708163023,
            -0.016436638310551643,
            0.002588597359135747,
            -0.013600105419754982,
            -0.040113721042871475,
            -0.00845411978662014,
            0.015368604101240635,
            0.0021638106554746628,
            0.00034242996480315924,
            -0.0028608073480427265,
            -0.013926063664257526,
            -0.00225050188601017,
            -0.009119907394051552,
            0.018558837473392487,
            0.007157220039516687,
            0.006276438012719154,
            0.0012838956899940968,
            0.035980287939310074,
            0.01510506309568882,
            0.008155901916325092,
            -0.02278936468064785,
            -0.005738953128457069,
            -0.018114978447556496,
            -0.014127187430858612,
            -0.03231845423579216,
            -0.012109017930924892,
            -0.034399040043354034,
            0.05814547836780548,
            -0.0011018443619832397,
            -0.02019556611776352,
            -0.008641372434794903,
            -0.017227262258529663,
            -0.03342810273170471,
            -0.012989799492061138,
            -0.003880295203998685,
            0.024315129965543747,
            0.012379493564367294,
            0.025674445554614067,
            0.00896039605140686,
            0.018017884343862534,
            -0.009536025114357471,
            0.007878489792346954,
            -0.011831605806946754,
            -0.009584572166204453,
            0.013440593145787716,
            -0.005402591545134783,
            -0.000983944395557046,
            0.00406061252579093,
            -0.023774176836013794,
            -0.0007325400947593153,
            0.0057285502552986145,
            -0.020223308354616165,
            -0.0039981952868402,
            0.009868918918073177,
            -0.013475270010530949,
            -0.011353070847690105,
            0.0169498510658741,
            -0.005617585498839617,
            -0.009848113171756268,
            0.004743739031255245,
            0.010798247531056404,
            -0.012636099942028522,
            -0.006855534855276346,
            -0.0010446282103657722,
            -0.018850119784474373,
            0.00042413637856952846,
            -0.005953947082161903,
            0.007084399461746216,
            0.004407377447932959,
            0.0028348001651465893,
            0.0058845942839980125,
            -0.004275606945157051,
            0.0033445439767092466,
            -0.01194257102906704,
            0.04932378605008125,
            0.008682983927428722,
            0.012629164382815361,
            0.02556348219513893,
            -0.0024776326026767492,
            0.008551213890314102,
            -0.006054508965462446,
            0.010735830292105675,
            0.012615294195711613,
            0.009355707094073296,
            0.03231845423579216,
            -0.03184685483574867,
            -0.024703506380319595,
            -0.00964005384594202,
            0.005308965221047401,
            -0.018406260758638382,
            -0.018808508291840553,
            -0.014328310266137123,
            0.0007100004004314542,
            -0.03645188733935356,
            0.017046945169568062,
            0.004667450673878193,
            -0.011477906256914139,
            0.00025508867111057043,
            -0.010312777012586594,
            0.011748382821679115,
            -0.008391701616346836,
            -0.028906291350722313,
            0.016825014725327492,
            -0.014675075188279152,
            0.0036410277243703604,
            0.003727718722075224,
            -0.0032699895091354847,
            -0.009751019068062305,
            0.009265548549592495,
            0.016145355999469757,
            -0.019391072914004326,
            -0.003710380522534251,
            0.20217759907245636,
            -0.024828340858221054,
            0.0011443229159340262,
            0.013294951990246773,
            -0.0015500375302508473,
            -0.019945895299315453,
            0.04077950865030289,
            0.0056210532784461975,
            0.0036930423229932785,
            0.00964005384594202,
            0.008065743371844292,
            -0.0051113092340528965,
            -0.02586863376200199,
            0.0008838161011226475,
            0.004362297710031271,
            -0.021721331402659416,
            -0.04879670590162277,
            -0.03722864016890526,
            -0.01412025187164545,
            0.0003144720976706594,
            -0.01769886165857315,
            0.008939589373767376,
            -0.021069413051009178,
            -0.029627561569213867,
            0.022678401321172714,
            -0.00679658493027091,
            0.0039045687299221754,
            0.01567375659942627,
            0.007042787503451109,
            0.014106381684541702,
            -0.00532283540815115,
            0.0010853729909285903,
            0.0014676809078082442,
            0.0070670610293745995,
            0.007809137459844351,
            -0.02463415265083313,
            -0.0024152148980647326,
            -0.0021516738925129175,
            0.014633463695645332,
            0.02181842364370823,
            0.016755662858486176,
            -0.005305497441440821,
            0.022858718410134315,
            -0.02643732726573944,
            0.0075317258015275,
            0.04571743682026863,
            -0.006238293834030628,
            -0.005551700014621019,
            0.002090990077704191,
            -0.001815312309190631,
            -0.028739845380187035,
            0.012594487518072128,
            0.01844787411391735,
            0.041389815509319305,
            0.0024637619499117136,
            0.007455437444150448,
            -0.017684990540146828,
            0.01865593157708645,
            -0.006841664202511311,
            0.005021150689572096,
            -0.030265608802437782,
            -0.02607669308781624,
            0.0024152148980647326,
            0.018253685906529427,
            -0.013059152290225029,
            0.00021239327907096595,
            -0.0032578527461737394,
            0.0036930423229932785,
            -0.008835560642182827,
            -0.006033702753484249,
            -0.005066229961812496,
            -0.004809624049812555,
            -0.01971009559929371,
            0.0002477199013810605,
            -0.0209029670804739,
            -0.04860251769423485,
            0.0384492501616478,
            0.03331713750958443,
            -0.0055898441933095455,
            0.02871210314333439,
            -0.007739784196019173,
            -0.015299251303076744,
            -0.0021846166346222162,
            -0.025105752050876617,
            -0.013398981653153896,
            -0.026367975398898125,
            0.012941252440214157,
            -0.02055620215833187,
            -0.01642276905477047,
            -0.008259931579232216,
            -0.004379636142402887,
            -0.015382475219666958,
            0.0044351182878017426,
            0.01571536809206009,
            -0.0033480115234851837,
            0.009015877731144428,
            0.019335590302944183,
            -0.0047888183034956455,
            0.002049378352239728,
            -0.016311803832650185,
            -0.018212072551250458,
            0.042388495057821274,
            0.033650029450654984,
            -0.00431375065818429,
            0.015410215593874454,
            0.012677711434662342,
            -0.016825014725327492,
            -0.0026007341220974922,
            -0.006845131982117891,
            -0.015646016225218773,
            -0.015326992608606815,
            -0.04369233176112175,
            0.014328310266137123,
            -0.0021221989300101995,
            -0.006220955867320299,
            0.011914829723536968,
            0.004674385767430067,
            0.0009934804402291775,
            0.026284752413630486,
            0.0018326506251469254,
            -0.0034069614484906197,
            -0.007503984495997429,
            0.005215338431298733,
            0.002540050307288766,
            0.005395655985921621,
            -0.015479568392038345,
            -0.018059497699141502,
            0.00397392176091671,
            -0.037089936435222626,
            0.008433313108980656,
            0.009293289855122566,
            -0.03209652379155159,
            0.01249045878648758,
            0.010708088986575603,
            0.001496288925409317,
            -0.006033702753484249,
            0.009203130379319191,
            -0.003817877499386668,
            -0.012344817630946636,
            -0.011817735619843006,
            -0.0014624794712290168,
            0.007240443490445614,
            -0.004431650973856449,
            -0.010728894732892513,
            0.015646016225218773,
            -0.0037519922479987144,
            0.012039664201438427,
            0.025355422869324684,
            -0.009244742803275585,
            -0.007001176010817289,
            -0.01407170481979847,
            -0.006886743474751711,
            0.0025677913799881935,
            0.0016722719883546233,
            0.015354733914136887,
            0.014508628286421299,
            -0.0201539546251297,
            0.006026767659932375,
            0.009036683477461338,
            0.021485529839992523,
            -0.0474373884499073,
            0.02278936468064785,
            0.020015249028801918,
            -0.004192383028566837,
            -0.012129823677241802,
            -0.023371929302811623,
            -0.17876406013965607,
            -0.009813436307013035,
            0.0037485247012227774,
            -0.059088677167892456,
            0.02660377509891987,
            0.016783403232693672,
            0.013835905119776726,
            -0.004910185933113098,
            -0.036868005990982056,
            0.0005465875728987157,
            0.006040638312697411,
            -0.01005617156624794,
            -0.021762942895293236,
            -0.012747064232826233,
            -0.009466671384871006,
            0.010971629992127419,
            -0.004109159577637911,
            0.018017884343862534,
            0.023788047954440117,
            0.001333309686742723,
            0.03414937108755112,
            -0.03087591379880905,
            -0.010049236007034779,
            -0.017893049865961075,
            0.009418124333024025,
            -0.0037970717530697584,
            -0.001407864037901163,
            0.016367286443710327,
            -0.013988480903208256,
            -0.024967046454548836,
            -0.010278101079165936,
            -0.015229898504912853,
            0.03118106722831726,
            -0.0052014682441949844,
            0.02244260162115097,
            0.019945895299315453,
            0.03487064316868782,
            0.004490600898861885,
            -0.030182385817170143,
            -0.003320270450785756,
            0.012504328973591328,
            0.03245716169476509,
            0.011873217299580574,
            0.00576322665438056,
            -0.014910874888300896,
            0.01743532158434391,
            0.026270881295204163,
            -0.023441283032298088,
            0.008086549118161201,
            -0.013905257917940617,
            0.026908928528428078,
            -0.025743799284100533,
            0.023524506017565727,
            -0.003824812825769186,
            0.011810800060629845,
            0.02765793912112713,
            0.0014017956564202905,
            0.003538732184097171,
            -0.010375195182859898,
            -0.02704763412475586,
            -0.008142031729221344,
            -0.017157908529043198,
            6.816090171923861e-05,
            -0.008703789673745632,
            -0.012851093895733356,
            -0.02455092966556549,
            -0.022775495424866676,
            0.005548232700675726,
            -0.0350370891392231,
            0.004570356570184231,
            -0.016935979947447777,
            -0.0003836082760244608,
            -0.007975583896040916,
            -0.013627845793962479,
            0.035286758095026016,
            0.027116985991597176,
            0.0003877260896842927,
            0.00907136034220457,
            0.021013930439949036,
            0.00858588982373476,
            -0.012344817630946636,
            0.01796240359544754,
            -0.0024602944031357765,
            0.016228580847382545,
            -0.010402936488389969,
            -0.01409251056611538,
            0.003474580589681864,
            0.015479568392038345,
            -0.026146046817302704,
            -0.009667795151472092,
            0.020098472014069557,
            -0.011172753758728504,
            0.0005678269080817699,
            -0.022054225206375122,
            -0.012268529273569584,
            0.004032871685922146,
            0.008343154564499855,
            0.0017997078830376267,
            -0.0027273029554635286,
            -0.005579441320151091,
            0.007136414293199778,
            0.008391701616346836,
            -0.0057562910951673985,
            -0.002380538498982787,
            0.03833828866481781,
            0.0005695607396773994,
            -0.037173159420490265,
            0.012219982221722603,
            0.03722864016890526,
            -0.018697543069720268,
            -0.025327682495117188,
            -0.015160545706748962,
            0.0015162279596552253,
            -0.0065295761451125145,
            -0.011165818199515343,
            0.005315900314599276,
            -0.01818433217704296,
            -0.016616957262158394,
            0.015535051003098488,
            0.003075801534578204,
            0.041251108050346375,
            0.006661346647888422,
            -0.006175876595079899,
            0.011103400029242039,
            -0.0055725062265992165,
            -0.014383792877197266,
            -0.1235036551952362,
            -0.025577351450920105,
            -0.002793188439682126,
            0.016616957262158394,
            -0.018697543069720268,
            0.03523127734661102,
            -0.0039981952868402,
            0.044940683990716934,
            -0.02726956270635128,
            0.04943475127220154,
            -0.02059781365096569,
            -0.008488795720040798,
            0.005652261897921562,
            -0.0015240301145240664,
            0.01194257102906704,
            -0.0017000131774693727,
            0.009653924964368343,
            -0.010174071416258812,
            -0.02923918515443802,
            0.024426093325018883,
            0.01201192382723093,
            -0.0022522355429828167,
            0.00601636478677392,
            -0.03021012619137764,
            -0.007035852409899235,
            -0.01052083633840084,
            -0.035675134509801865,
            0.03209652379155159,
            0.017116297036409378,
            0.004785350523889065,
            0.013093829154968262,
            -0.030681725591421127,
            -0.0012648236006498337,
            -0.009348771534860134,
            0.01201192382723093,
            -0.00966085959225893,
            0.010201812721788883,
            -0.011283718049526215,
            0.020778130739927292,
            -0.022803235799074173,
            -0.001422601519152522,
            0.014550239779055119,
            0.014134122058749199,
            -0.008308478631079197,
            -0.0005591578083112836,
            -0.021762942895293236,
            -0.010708088986575603,
            0.021887777373194695,
            0.009418124333024025,
            -0.017684990540146828,
            -0.03828280419111252,
            -0.018101109191775322,
            -0.0388098880648613,
            0.014023157767951488,
            0.01654760353267193,
            0.005749356001615524,
            0.011977246962487698,
            0.02339967153966427,
            -0.01909979060292244,
            -0.0013939933851361275,
            -0.01099937129765749,
            0.0015266308328136802,
            -0.030237866565585136,
            -0.002439488423988223,
            0.014702816493809223,
            0.0015613073483109474,
            0.0037623951211571693,
            -0.027325045317411423,
            0.011769188567996025,
            -0.010042301379144192,
            -0.001374054467305541,
            0.019266238436102867,
            -0.005336706060916185,
            0.004282542038708925,
            -0.01446701679378748,
            0.006942226085811853,
            -0.007663496304303408,
            -0.038144100457429886,
            -0.0013125037075951695,
            0.009889724664390087,
            -0.009515218436717987,
            -0.009501348249614239,
            0.01067341212183237,
            -0.005416462197899818,
            9.687734564067796e-05,
            -0.009217001497745514,
            -0.011346135288476944,
            -0.004695191979408264,
            -0.0009934804402291775,
            -0.01814272068440914,
            0.006602396722882986,
            0.03217975050210953,
            -0.0018846652237698436,
            -0.019210755825042725,
            0.0034069614484906197,
            0.011394682340323925,
            -0.016214709728956223,
            -0.012705452740192413,
            0.025674445554614067,
            0.0012509530643001199,
            -0.022276153787970543,
            0.010049236007034779,
            -0.05459460988640785,
            0.042360756546258926,
            0.0036861069966107607,
            -0.008974266238510609,
            -0.001708682277239859,
            -0.02094457857310772,
            0.015465698204934597,
            -0.022109705954790115,
            0.007372213993221521,
            0.009376512840390205,
            -0.016048261895775795,
            0.017102427780628204,
            -0.015257639810442924,
            -0.0058533851988613605,
            -0.024648023769259453,
            -0.010805183090269566,
            0.017532415688037872,
            -1.4070377574171289e-06,
            0.009959077462553978,
            0.006383934989571571,
            0.008003325201570988,
            -0.013870581053197384,
            0.02068103663623333,
            0.02041749656200409,
            0.01950203813612461,
            -0.014952486380934715,
            -0.024481575936079025,
            0.01517441589385271,
            -0.008884107694029808,
            -0.012899640947580338,
            -0.018239814788103104,
            -0.0040952893905341625,
            -0.008031066507101059,
            0.00907136034220457,
            -0.015229898504912853,
            -0.014147993177175522,
            0.016977591440081596,
            0.02629862166941166,
            0.02862888015806675,
            0.04738190770149231,
            -0.017671121284365654,
            -0.04197238013148308,
            0.008405572734773159,
            -0.014786039479076862,
            -0.007399955298751593,
            -0.021804554387927055,
            -0.012393364682793617,
            0.004053677432239056,
            0.02502252906560898,
            0.005596779752522707,
            0.039059557020664215,
            0.019959766417741776,
            -0.02982174977660179,
            -0.036784783005714417,
            -0.013142376206815243,
            0.014508628286421299,
            0.006033702753484249,
            -0.0006909283110871911,
            -0.005565570667386055,
            0.031153324991464615,
            0.032429419457912445,
            0.005485814996063709,
            0.009085230529308319,
            -0.004750674124807119,
            -7.639655814273283e-05,
            -0.003984324634075165,
            -0.004012065473943949,
            0.0016271925996989012,
            0.005846450105309486,
            0.007330602500587702,
            -0.0008387367124669254,
            0.013052216731011868,
            0.0025417839642614126,
            0.0025383164174854755,
            0.005506620742380619,
            -0.024342870339751244,
            0.018087238073349,
            0.01464733388274908,
            -0.017754344269633293,
            0.013600105419754982,
            0.0005639258306473494,
            -0.026756351813673973,
            0.00576322665438056,
            0.0035994157660752535,
            0.021000059321522713,
            0.005919270683079958,
            -0.016089875251054764,
            0.009286354295909405,
            -0.005999026354402304,
            -0.009210065938532352,
            -0.00040289704338647425,
            -0.0014503427082672715,
            -0.00998681876808405,
            0.01167902909219265,
            0.029655303806066513,
            -0.00847492553293705,
            -0.0024030781351029873,
            0.013600105419754982,
            0.01751854456961155,
            -0.003190233837813139,
            0.01676953211426735,
            -0.020015249028801918,
            0.00996601302176714,
            -0.017463061958551407,
            -0.032512642443180084,
            0.007042787503451109,
            -0.03392744064331055,
            -0.007143349386751652,
            0.0376724973320961,
            0.01654760353267193,
            0.016922108829021454,
            -0.005600247066468,
            0.01003536581993103,
            0.006904081907123327,
            -0.01769886165857315,
            0.019959766417741776,
            -0.011498712003231049,
            -0.006997708231210709,
            -0.03065398521721363,
            0.0380331352353096,
            0.04524583742022514,
            0.01792079210281372,
            0.04416393116116524,
            -0.014300569891929626,
            0.007774461060762405,
            0.002328523900359869,
            0.02893403358757496,
            -0.03134751319885254,
            0.01664469763636589,
            -0.014730557799339294,
            -0.0031815646216273308,
            -0.005607182625681162,
            -0.018766896799206734,
            0.0019366799388080835,
            -0.006120393984019756,
            -0.0005314166774041951,
            -0.00964005384594202,
            0.01656147465109825,
            -0.006175876595079899,
            0.054650090634822845,
            0.015840204432606697,
            0.00448019802570343,
            0.022553564980626106,
            -0.017365967854857445,
            0.019252367317676544,
            0.01196337677538395,
            0.027630198746919632,
            -0.0010689017362892628,
            -0.01567375659942627,
            0.004161174409091473,
            -0.00734447268769145,
            -6.501835014205426e-05,
            -0.03894859179854393,
            -0.012747064232826233,
            -0.003341076197102666,
            -0.0032214424572885036,
            0.013620911166071892,
            -0.008114290423691273,
            -0.011124206706881523,
            0.03448226675391197,
            0.006463691126555204,
            0.0222206711769104,
            0.009806500747799873,
            -0.00626950291916728,
            -0.0015977176371961832,
            0.024994786828756332,
            0.0020407093688845634,
            -0.0042790742591023445,
            -0.011672094464302063,
            0.035758357495069504,
            0.02398223616182804,
            -0.03095913678407669,
            -0.021013930439949036,
            -0.0033549468498677015,
            0.001775434473529458,
            0.015576662495732307,
            -0.036340922117233276,
            -0.005617585498839617,
            -0.006789649371057749,
            -0.007621884346008301,
            0.008239124901592731,
            0.0005409526638686657,
            -0.020583942532539368,
            0.0013315757969394326,
            -0.0014789507258683443,
            -0.01686662621796131,
            0.00042326946277171373,
            -0.015867944806814194
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "b21595dc-d606-49e9-888e-ccbe29338b01",
      "type": "next",
      "source": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "cf5e6873-e081-420c-af50-def2978c3d69",
        "properties": {
          "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
          "themes": [
            "LLMs (Large Language Models)",
            "Black box nature of AI",
            "Prompting challenges",
            "Evaluation of AI models",
            "Vibes Based Development",
            "Gullibility of AI",
            "AI personal assistants",
            "Code generation",
            "Ethics of AI training data",
            "Legal issues in AI"
          ],
          "entities": [
            "LLMs",
            "ChatGPT",
            "December",
            "September",
            "AGI",
            "Python",
            "JavaScript",
            "Chinese",
            "Spanish",
            "English"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "fc9c5b2c-b704-4b15-8018-bb1846465cbc",
      "type": "next",
      "source": {
        "id": "cf5e6873-e081-420c-af50-def2978c3d69",
        "properties": {
          "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
          "themes": [
            "LLMs (Large Language Models)",
            "Black box nature of AI",
            "Prompting challenges",
            "Evaluation of AI models",
            "Vibes Based Development",
            "Gullibility of AI",
            "AI personal assistants",
            "Code generation",
            "Ethics of AI training data",
            "Legal issues in AI"
          ],
          "entities": [
            "LLMs",
            "ChatGPT",
            "December",
            "September",
            "AGI",
            "Python",
            "JavaScript",
            "Chinese",
            "Spanish",
            "English"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "6a36819d-9de9-43e5-847e-04f219922a1b",
      "type": "next",
      "source": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {}
    },
    {
      "id": "b76ba6b8-0ce8-4620-9994-29a315fb4ef8",
      "type": "cosine_similarity",
      "source": {
        "id": "6b00919c-096b-4fa6-b8bb-c5b62d994dda",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nThings we learned about LLMs in 2024\n\n31st December 2024\n\nA lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments.\n\nThis is a sequel to my review of 2023.\n\nIn this article:\n\nThe GPT-4 barrier was comprehensively broken\n\nSome of those GPT-4 models run on my laptop\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nMultimodal vision is common, audio and video are starting to emerge\n\nVoice and live camera mode are science fiction come to life\n\nPrompt driven app generation is a commodity already\n\nUniversal access to the best models lasted for just a few short months\n\n“Agents” still haven’t really happened yet\n\nEvals really matter\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nThe rise of inference-scaling “reasoning” models\n\nWas the best currently available LLM trained in China for less than $6m?\n\nThe environmental impact got better\n\nThe environmental impact got much, much worse\n\nThe year of slop\n\nSynthetic training data works great\n\nLLMs somehow got even harder to use\n\nKnowledge is incredibly unevenly distributed\n\nLLMs need better criticism\n\nEverything tagged “llms” on my blog in 2024\n\nThe GPT-4 barrier was comprehensively broken\n\nIn my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t?\n\nI’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total.\n\nThe earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video.\n\nI wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May.\n\nGemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million.\n\nLonger inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern.\n\nGetting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6).\n\nThen there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent.\n\nTraining a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list.\n\nSome of those GPT-4 models run on my laptop\n\nMy personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment).\n\nThat same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that:\n\nQwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model!\n\nI can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December)\n\nThis remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs.\n\nThese models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else.\n\nThe fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come.\n\nMeta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second:\n\nHere’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now!\n\nLLM prices crashed, thanks to competition and increased efficiency\n\nThe past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs.\n\nIn December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo.\n\nToday $30/mTok gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable.\n\nOther model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year.\n\nI’ve been tracking these pricing changes under my llm-pricing tag.\n\nThese price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts.\n\nThere’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible.\n\nHere’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model?\n\nEach photo would need 260 input tokens and around 100 output tokens.\n\n260 * 68,000 = 17,680,000 input tokens\n\n17,680,000 * $0.0375/million = $0.66\n\n100 * 68,000 = 6,800,000 output tokens\n\n6,800,000 * $0.15/million = $1.02\n\nThat’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right.\n\nHow good are those descriptions? Here’s what I got from this command:\n\nAgainst this photo of butterflies at the California Academy of Sciences:\n\nA shallow dish, likely a hummingbird or butterfly feeder, is red.  Pieces of orange slices of fruit are visible inside the dish.\n\nTwo butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings.  The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit.\n\n260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent).\n\nThis increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting.\n\nMultimodal vision is common, audio and video are starting to emerge\n\nMy butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs.\n\nA year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window.\n\nIn 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova.\n\nIn October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models.\n\nI think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models.\n\nVoice and live camera mode are science fiction come to life\n\nThe audio and live video modes that have started to emerge deserve a special mention.\n\nThe ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text.\n\nThe May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models.\n\nThe demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product.\n\nThe delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet.\n\nWhen ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs.\n\nEven more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish.\n\nYour browser does not support the audio element.\n\nOpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025.\n\nGoogle’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans:\n\nThe most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did.\n\nThese abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should.\n\nBoth Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now!\n\nPrompt driven app generation is a commodity already\n\nThis was possible with GPT-4 in 2023, but the value it provides became evident in 2024.\n\nWe already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt.\n\nAnthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet.\n\nWith Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface.\n\nHere’s my Extract URLs app, entirely generated by Claude:\n\nI’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period.\n\nSince then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November.\n\nSteve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second.\n\nThen in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models.\n\nI’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv.\n\nThis prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025.\n\nUniversal access to the best models lasted for just a few short months\n\nFor a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world.\n\nOpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do.\n\nThat era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro.\n\nSince the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return.\n\n“Agents” still haven’t really happened yet\n\nI find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that.\n\nIf you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about.\n\nThe two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition.\n\n(I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.)\n\nWhatever the term may mean, agents still have that feeling of perpetually “coming soon”.\n\nTerminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction?\n\nJust the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki.\n\nPrompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022.\n\nI’m beginning to see the most popular idea of “agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed.\n\nEvals really matter\n\nAnthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character):\n\nThe boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them.\n\nIt’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition.\n\nVercel’s Malte Ubl:\n\nWhen @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity.\n\nWe completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual\n\nI’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like.\n\nApple Intelligence is bad, Apple’s MLX library is excellent\n\nAs a Mac user I’ve been feeling a lot better about my choice of platform this year.\n\nLast year it felt like my lack of a Linux/Windows  machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models.\n\nOn paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms.\n\nThe llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic.\n\nApple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format.\n\nPrince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ.\n\nWhile MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features.\n\nNow that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though.\n\nThe rise of inference-scaling “reasoning” models\n\nThe most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th.\n\nOne way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners.\n\nThis is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise.\n\no1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result.\n\nThe biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference.\n\nThe sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense!\n\no3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems.\n\nOpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th.\n\nAlibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally.\n\nDeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th.\n\nTo understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor.\n\nNothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December.\n\nWas the best currently available LLM trained in China for less than $6m?\n\nNot quite, but almost! It does make for a great attention-grabbing headline.\n\nThe big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the day after that.\n\nDeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B.\n\nBenchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model.\n\nThe really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse.\n\nThose US export regulations on GPUs to China seem to have inspired some very effective training optimizations!\n\nThe environmental impact got better\n\nA welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years.\n\nOpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss.\n\nI think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube.\n\nLikewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop.\n\nFor less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost.\n\nThe environmental impact got much, much worse\n\nThe much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future.\n\nCompanies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades.\n\nIs this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time?\n\nAn interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes!\n\nThe resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage.\n\nThe year of slop\n\n2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates:\n\nWatching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content\n\nI expanded that definition a tiny bit to this:\n\nSlop describes AI-generated content that is both unrequested and unreviewed.\n\nI ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes:\n\nSociety needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons.\n\nI love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI!\n\nSlop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot.\n\nSynthetic training data works great\n\nAn idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data.\n\nThe idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise!\n\nThat’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way.\n\nOne of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this:\n\nSynthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data.\n\nStructured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting reasoning patterns.\n\nAnother common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples.\n\nCareful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone.\n\nLLMs somehow got even harder to use\n\nA drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls.\n\nIf anything, this problem got worse in 2024.\n\nWe’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set.\n\nThe number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not.\n\nDid you know ChatGPT has two entirely different ways of running Python now?\n\nWant to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first.\n\nThe models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023).\n\nWhat are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out.\n\nMeanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right.\n\nThere’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire!\n\nThere is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads.\n\nKnowledge is incredibly unevenly distributed\n\nMost people have heard of ChatGPT by now. How many have heard of Claude?\n\nThe knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast.\n\nThe pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet.\n\nGiven the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this.\n\nLLMs need better criticism\n\nA lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight.\n\nI get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs.\n\nLLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative.\n\nI like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue.\n\nIf we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps.\n\n(If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!)\n\nI think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and needs guidance.\n\nThose of us who understand this stuff have a duty to help everyone else figure it out.\n\nEverything tagged “llms” on my blog in 2024\n\nBecause I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms:\n\nJanuary\n\n7th: It’s OK to call it Artificial Intelligence\n\n9th: What I should have said about the term Artificial Intelligence\n\n17th: Talking about Open Source LLMs on Oxide and Friends\n\n26th: LLM 0.13: The annotated release notes\n\nFebruary\n\n21st: The killer app of Gemini Pro 1.5 is video\n\nMarch\n\n5th: Prompt injection and jailbreaking are not the same thing\n\n8th: The GPT-4 barrier has finally been broken\n\n22nd: Claude and ChatGPT for ad-hoc sidequests\n\n23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter\n\n26th: llm cmd undo last git commit—a new plugin for LLM\n\nApril\n\n8th: Building files-to-prompt entirely using Claude 3 Opus\n\n10th: Three major LLM releases in 24 hours (plus weeknotes)\n\n17th: AI for Data Journalism: demonstrating what we can do with this stuff right now\n\n22nd: Options for accessing Llama 3 from the terminal using LLM\n\nMay\n\n8th: Slop is the new name for unwanted AI-generated content\n\n15th: ChatGPT in “4o” mode is not running the new features yet\n\n29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say\n\nJune\n\n6th: Accidental prompt injection against RAG applications\n\n10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence\n\n17th: Language models on the command-line\n\n21st: Building search-based RAG using Claude, Datasette and Val Town\n\n27th: Open challenges for AI engineering\n\nJuly\n\n14th: Imitation Intelligence, my keynote for PyCon US 2024\n\n19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment\n\nAugust\n\n6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs\n\n8th: django-http-debug, a new Django app mostly written by Claude\n\n23rd: Claude’s API now supports CORS requests, enabling client-side applications\n\n26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images\n\nSeptember\n\n6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes\n\n10th: Notes from my appearance on the Software Misadventures Podcast\n\n12th: Notes on OpenAI’s new o1 chain-of-thought models\n\n20th: Notes on using LLMs for code\n\n29th: NotebookLM’s automatically generated podcasts are surprisingly effective\n\n30th: Weeknotes: Three podcasts, two trips and a new plugin system\n\nOctober\n\n1st: OpenAI DevDay 2024 live blog\n\n2nd: OpenAI DevDay: Let’s build developer tools, not digital God\n\n15th: ChatGPT will happily write you a thinly disguised horoscope\n\n17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent\n\n18th: Experimenting with audio input and output for the OpenAI Chat Completion API\n\n19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs\n\n21st: Everything I built with Claude Artifacts this week\n\n22nd: Initial explorations of Anthropic’s new Computer Use capability\n\n24th: Notes on the new Claude analysis JavaScript code execution tool\n\n27th: Run a prompt to generate and execute jq programs using llm-jq\n\n29th: You can now run prompts against images, audio and video in your terminal using LLM\n\n30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶  Monthnotes for October\n\nNovember\n\n4th: Claude 3.5 Haiku\n\n7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5\n\n12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac\n\n19th: Notes from Bing Chat—Our First Encounter With Manipulative AI\n\n25th: Ask questions of SQLite databases and CSV/JSON files in your terminal\n\nDecember\n\n4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin)\n\n7th: Prompts.js\n\n9th: I can now run a GPT-4 class model on my laptop\n\n10th: ChatGPT Canvas can make API requests now, but it’s complicated\n\n11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode\n\n19th: Building Python tools with a one-shot prompt using uv run and Claude Projects\n\n19th: Gemini 2.0 Flash “Thinking mode”\n\n20th: December in LLMs has been a lot\n\n20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3”\n\n24th: Trying out QvQ—Qwen’s new visual reasoning model\n\n31st: Things we learned about LLMs in 2024\n\n(This list generated using Django SQL Dashboard with a SQL query written for me by Claude.)\n\nPosted \n\n31st December 2024 at 6:07 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\ngoogle\n            346\n\nai\n            1091\n\nopenai\n            254\n\ngenerative-ai\n            936\n\nllms\n            924\n\nanthropic\n            114\n\ngemini\n            55\n\nmeta\n            26\n\ninference-scaling\n            28\n\nlong-context\n            10\n\nNext: Ending a year long posting streak\n\nPrevious: Trying out QvQ - Qwen's new visual reasoning model\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2024_llms.html"
          },
          "headlines": [
            "The GPT-4 barrier was comprehensively broken",
            "Some of those GPT-4 models run on my laptop",
            "LLM prices crashed, thanks to competition and increased efficiency",
            "Multimodal vision is common, audio and video are starting to emerge",
            "Prompt driven app generation is a commodity already"
          ],
          "summary": "In 2024, significant advancements were made in the field of Large Language Models (LLMs), with the GPT-4 barrier being broken by multiple organizations. LLM prices dropped due to increased competition and efficiency, and multimodal capabilities became common, allowing models to process audio and video. Prompt-driven app generation became a commodity, and the environmental impact of LLMs improved due to efficiency gains. However, the infrastructure buildout for AI datacenters raised environmental concerns. The term 'slop' emerged to describe unwanted AI-generated content, and synthetic training data proved effective. Despite advancements, LLMs became harder to use, and knowledge about them remained unevenly distributed. Better criticism and understanding of LLMs are needed to harness their potential responsibly.",
          "summary_embedding": [
            -0.014193889684975147,
            0.000919203506782651,
            0.006219365634024143,
            -0.02833227999508381,
            -0.0010067879920825362,
            0.020049042999744415,
            -0.003864123485982418,
            0.010829257778823376,
            -0.03682364150881767,
            -0.04609198495745659,
            0.0281657837331295,
            0.029636509716510773,
            -0.01572011411190033,
            -0.01111369114369154,
            0.0074854386039078236,
            0.01843957044184208,
            0.021089650690555573,
            0.0166081003844738,
            0.012903536669909954,
            -0.006240177899599075,
            -0.014665632508695126,
            -0.0052134450525045395,
            -0.013777647167444229,
            -0.023378988727927208,
            0.007214880548417568,
            -0.0017135341186076403,
            0.02454446814954281,
            -0.0394320972263813,
            -0.018425695598125458,
            0.019369179382920265,
            0.010121644474565983,
            0.0006668561254628003,
            -0.0392378494143486,
            0.0018418757244944572,
            -0.01669134944677353,
            -0.008678669109940529,
            0.014131453819572926,
            -0.00965684000402689,
            0.016288980841636658,
            -0.02319861575961113,
            0.008387298323214054,
            0.015470368787646294,
            0.018855812028050423,
            -0.02534920535981655,
            -0.019674424082040787,
            0.017634833231568336,
            0.01756545901298523,
            -0.0026969085447490215,
            -0.028179658576846123,
            0.0066009219735860825,
            0.01513737440109253,
            0.037822622805833817,
            -0.007017164956778288,
            -0.012258359231054783,
            -0.008095928467810154,
            0.016580350697040558,
            -0.005033073015511036,
            0.010121644474565983,
            0.017024343833327293,
            -0.006337301339954138,
            0.0006339035462588072,
            0.0015045454492792487,
            -0.01499862689524889,
            0.03449267894029617,
            -0.019924169406294823,
            -0.009448718279600143,
            -0.02786053903400898,
            0.022865621373057365,
            0.021700140088796616,
            -0.015844987705349922,
            0.0038294366095215082,
            0.01154380850493908,
            0.014388136565685272,
            -0.0164138525724411,
            0.009060224518179893,
            0.0023743200581520796,
            -0.0018366726581007242,
            -0.010371390730142593,
            -0.03482567146420479,
            0.015844987705349922,
            0.011495247483253479,
            -0.010128581896424294,
            0.007714372128248215,
            0.022865621373057365,
            0.017801329493522644,
            0.011516059748828411,
            0.014471385627985,
            -0.011287125758826733,
            -0.015387119725346565,
            -0.011002692393958569,
            -0.005216913763433695,
            0.0013987502316012979,
            0.018758689984679222,
            0.010093895718455315,
            -0.006979009602218866,
            -0.00047130859456956387,
            0.004661922808736563,
            0.009719276800751686,
            -0.009060224518179893,
            -0.029969504103064537,
            -0.007041445933282375,
            -0.0052238511852920055,
            -0.03773937374353409,
            -0.009615215472877026,
            -0.022782372310757637,
            0.001269541447982192,
            0.01353483833372593,
            0.01072519738227129,
            0.01043382752686739,
            0.014388136565685272,
            -0.016164107248187065,
            0.01659422554075718,
            0.010086958296597004,
            -0.01816207356750965,
            -0.009587465785443783,
            -0.010024521499872208,
            0.005185695365071297,
            -0.02029878832399845,
            0.004509300459176302,
            0.005692124366760254,
            0.036157652735710144,
            0.006080618128180504,
            0.02107577584683895,
            0.0034374743700027466,
            0.013354466296732426,
            -0.0009495546109974384,
            -0.0034843017347157,
            -0.003770468756556511,
            -0.01140506099909544,
            0.007984930649399757,
            -0.00776293408125639,
            0.006972072180360556,
            0.009303033351898193,
            0.004148556385189295,
            -0.03260571137070656,
            0.02669505774974823,
            -0.011640932410955429,
            -0.009074099361896515,
            -0.012209798209369183,
            -0.007714372128248215,
            0.0020777469035238028,
            0.024530593305826187,
            -0.006670295726507902,
            0.013375278562307358,
            -0.006874948740005493,
            0.03008050099015236,
            0.004526644013822079,
            0.006791700143367052,
            0.004571736790239811,
            0.004047964233905077,
            0.004249148536473513,
            -0.029553260654211044,
            -0.016705222427845,
            0.020035168156027794,
            0.018106576055288315,
            0.001052748179063201,
            0.012993722222745419,
            0.03191197291016579,
            -0.029192516580224037,
            -0.017329588532447815,
            -0.013243468478322029,
            0.0033264760859310627,
            -0.0013233062345534563,
            0.010461577214300632,
            0.015803363174200058,
            0.027055801823735237,
            0.023600984364748,
            0.0018193292198702693,
            -0.002894623903557658,
            -0.009337720461189747,
            -0.010995754972100258,
            0.024058852344751358,
            -0.04226255044341087,
            0.011432810686528683,
            -0.016843970865011215,
            0.014832129701972008,
            0.019660549238324165,
            -0.005352192558348179,
            -0.008505234494805336,
            -0.034215182065963745,
            0.005622750613838434,
            0.011065129190683365,
            -0.005473596975207329,
            0.0007102147792465985,
            -0.0075478749349713326,
            -0.004405239596962929,
            0.017260214313864708,
            0.0005016596405766904,
            0.002684768056496978,
            -0.012965972535312176,
            0.015886612236499786,
            0.004870044533163309,
            0.0027870945632457733,
            -0.023434486240148544,
            -0.6504492163658142,
            -0.020049042999744415,
            0.01814819872379303,
            -0.011065129190683365,
            -0.0013493214501067996,
            0.004745171405375004,
            -0.005980025976896286,
            0.007256504613906145,
            -0.0056158131919801235,
            0.03746188059449196,
            -0.012931285426020622,
            0.005789247807115316,
            -0.017898453399538994,
            -0.004987979773432016,
            0.009594403207302094,
            -0.007575624622404575,
            -0.002133245812729001,
            -0.023059867322444916,
            0.0013718679547309875,
            0.019480178132653236,
            -0.012487293221056461,
            0.01706596650183201,
            -0.011668682098388672,
            -0.00034231660538353026,
            -0.028804022818803787,
            0.0012374561047181487,
            0.008366486057639122,
            0.014790505170822144,
            -0.006365051027387381,
            0.00523772556334734,
            -0.010156331583857536,
            0.004651516675949097,
            -0.012369357980787754,
            -0.0035658159758895636,
            0.048755943775177,
            -0.0023153522051870823,
            -0.0184534452855587,
            0.016732972115278244,
            0.006670295726507902,
            0.00922672264277935,
            -0.03735088184475899,
            -0.005209976341575384,
            -0.013070033863186836,
            0.021478144451975822,
            -0.003819030476734042,
            0.032383713871240616,
            0.022366128861904144,
            0.0070622581988573074,
            -0.019646674394607544,
            -0.010142456740140915,
            0.00444339495152235,
            0.02250487729907036,
            0.0033091327641159296,
            0.003548472421243787,
            -0.0013102985685691237,
            0.02059015817940235,
            0.025404704734683037,
            -0.011613182723522186,
            0.011183064430952072,
            -0.008144490420818329,
            0.0027090488001704216,
            -0.01096800621598959,
            -0.023614859208464622,
            -0.015803363174200058,
            -0.03427068144083023,
            0.012535855174064636,
            -0.002431553555652499,
            0.001369266421534121,
            0.016080858185887337,
            -0.031301479786634445,
            -0.006777825299650431,
            0.03662939369678497,
            0.0085954200476408,
            -0.0026466124691069126,
            -0.009476467967033386,
            0.0039508407935500145,
            -0.00022394745610654354,
            -0.015761738643050194,
            0.0021124337799847126,
            0.007443814072757959,
            0.015414869412779808,
            -0.01727408915758133,
            0.010295079089701176,
            -0.010295079089701176,
            0.035186417400836945,
            -0.01072519738227129,
            0.009150411002337933,
            -0.0016554335597902536,
            -0.012521980330348015,
            -0.0049567618407309055,
            0.013514026068150997,
            0.028276782482862473,
            -0.015359370969235897,
            -0.04728521779179573,
            -0.007693559862673283,
            0.01329896692186594,
            -0.006316489074379206,
            0.01971604861319065,
            0.009212847799062729,
            -0.011079004034399986,
            -0.002821781439706683,
            -0.010794571600854397,
            0.030746491625905037,
            0.02844327874481678,
            0.02833227999508381,
            0.02272687293589115,
            -0.008748042397201061,
            0.013243468478322029,
            0.01246648095548153,
            -0.021797263994812965,
            0.0022581189405173063,
            0.012750913389027119,
            0.0004587346047628671,
            -0.022269006818532944,
            -0.01474888063967228,
            -0.0263204388320446,
            0.002065606415271759,
            -0.006430956069380045,
            -0.0034877704456448555,
            -0.023143116384744644,
            0.012993722222745419,
            0.0035068481229245663,
            0.025376955047249794,
            -0.006101430393755436,
            -0.006777825299650431,
            0.014693381264805794,
            0.0078045581467449665,
            -0.0037774061784148216,
            -0.011148378252983093,
            0.022893371060490608,
            -0.011897615157067776,
            -0.02902601845562458,
            0.0257376991212368,
            -0.026042943820357323,
            0.034603677690029144,
            0.01445751078426838,
            0.04032008349895477,
            -0.004533580970019102,
            0.015997610986232758,
            0.00026600537239573896,
            -0.03124598227441311,
            -0.003898810362443328,
            -0.0030472464859485626,
            0.004800670314580202,
            -0.0402090847492218,
            -0.024003352969884872,
            -0.013853957876563072,
            0.0040306206792593,
            -0.00032410596031695604,
            -0.033743441104888916,
            -0.01544261910021305,
            -0.014665632508695126,
            -0.011384248733520508,
            0.0249607115983963,
            -0.001771634677425027,
            -0.0062124282121658325,
            -0.010572575032711029,
            -0.028387779369950294,
            -0.0139372069388628,
            -0.03493667021393776,
            0.007728246971964836,
            0.0001399400644004345,
            0.00015002094733063132,
            0.01451300922781229,
            0.01601148396730423,
            -0.026861555874347687,
            -0.00018113078840542585,
            0.02096477709710598,
            -0.03601890429854393,
            -0.020506910979747772,
            0.00336289731785655,
            -0.041596561670303345,
            0.003631721017882228,
            0.01971604861319065,
            -0.016913345083594322,
            0.011987801641225815,
            0.002728126710280776,
            0.002327492693439126,
            0.014402011409401894,
            -0.010239580646157265,
            0.012632978148758411,
            0.025002336129546165,
            0.013618087396025658,
            -0.009074099361896515,
            0.024586092680692673,
            0.02446121908724308,
            0.047618210315704346,
            0.013278154656291008,
            -0.0057580298744142056,
            0.012293046340346336,
            0.021811138838529587,
            0.03171772509813309,
            -0.01422163937240839,
            -0.0001184775319416076,
            -0.010940256528556347,
            0.020118417218327522,
            -0.0015270919539034367,
            -0.0011490044416859746,
            0.017551584169268608,
            0.014089829288423061,
            0.009101849049329758,
            0.02641756273806095,
            0.011092878878116608,
            -0.014651757664978504,
            0.010385265573859215,
            -0.018078826367855072,
            0.004308116156607866,
            -0.02397560328245163,
            -0.0027714853640645742,
            0.01960504986345768,
            0.008456672541797161,
            0.0010432093404233456,
            -0.005647031590342522,
            -0.028415529057383537,
            0.0017967827152460814,
            0.033743441104888916,
            0.0016337542328983545,
            0.014402011409401894,
            -0.021145150065422058,
            0.0012443934101611376,
            -0.004700078628957272,
            0.005650500301271677,
            0.017648708075284958,
            -0.007846182212233543,
            -0.015345496125519276,
            0.008914539590477943,
            -0.02350386045873165,
            0.02250487729907036,
            0.013222656212747097,
            -0.02988625504076481,
            0.004478082060813904,
            0.01728796400129795,
            0.023545484989881516,
            0.021922137588262558,
            0.008165302686393261,
            0.0031929314136505127,
            0.01835632137954235,
            -0.0021922136656939983,
            0.032577961683273315,
            -0.0028495308943092823,
            -0.0128688495606184,
            0.0065523600205779076,
            0.005151008255779743,
            -0.007423002272844315,
            0.02292112074792385,
            -0.019299805164337158,
            0.03504766896367073,
            -0.008671731688082218,
            -0.026764431968331337,
            -0.0037670000456273556,
            -0.027929913252592087,
            0.006496861111372709,
            -0.01620573177933693,
            0.0002553825033828616,
            0.011862928979098797,
            -0.018397945910692215,
            0.015969861298799515,
            0.004998385906219482,
            0.02211638353765011,
            0.01490150298923254,
            -0.009622152894735336,
            0.005667843855917454,
            0.011592370457947254,
            -0.010933319106698036,
            0.005640094168484211,
            -0.011037379503250122,
            -0.0033143358305096626,
            -0.004200586583465338,
            -0.002232103608548641,
            -0.008269363082945347,
            -0.009864961728453636,
            -0.02165851555764675,
            0.01112062856554985,
            -0.03840536251664162,
            0.014402011409401894,
            0.006583578418940306,
            0.004627235699445009,
            0.007901681587100029,
            0.0134030282497406,
            0.023226365447044373,
            -0.0032657741103321314,
            -0.04190180450677872,
            0.0036490645725280046,
            -0.00737444031983614,
            -0.011994739063084126,
            -0.03754512965679169,
            -0.044510263949632645,
            0.012952097691595554,
            -0.010086958296597004,
            -0.014887628145515919,
            -0.0024645060766488314,
            0.009962084703147411,
            -0.009920461103320122,
            0.013236531056463718,
            -0.0014386402908712626,
            0.014013517647981644,
            0.023448361083865166,
            -0.011377311311662197,
            -0.013437715359032154,
            -0.020326538011431694,
            0.0012487292988225818,
            0.012008613906800747,
            -0.0054909405298531055,
            -0.02766629122197628,
            0.03951534628868103,
            -0.01863381639122963,
            -0.03346594423055649,
            0.011620120145380497,
            -0.0071455067954957485,
            -0.020409787073731422,
            -0.004949824418872595,
            0.005830872338265181,
            0.0006885354523546994,
            0.007832307368516922,
            0.014263263903558254,
            0.018467318266630173,
            0.00662520295009017,
            0.004148556385189295,
            0.01592823676764965,
            0.021505894139409065,
            0.0007553077884949744,
            -0.02991400472819805,
            0.00495329312980175,
            0.02156139351427555,
            0.06887435913085938,
            0.020243288949131966,
            -0.010121644474565983,
            0.016247356310486794,
            -0.017731957137584686,
            -0.0083040501922369,
            -0.028179658576846123,
            -0.0068784174509346485,
            0.010884757153689861,
            0.020021293312311172,
            -0.008817416615784168,
            -0.0027315954212099314,
            0.01864769123494625,
            -0.008331799879670143,
            0.0390436016023159,
            0.010024521499872208,
            2.6591051209834404e-06,
            -0.033937688916921616,
            -0.018495067954063416,
            -0.02522433176636696,
            0.00551175232976675,
            -0.011800492182374,
            0.015165124088525772,
            0.021825013682246208,
            0.004249148536473513,
            -0.019938044250011444,
            0.031606726348400116,
            0.018564442172646523,
            -0.014415886253118515,
            -0.016830096021294594,
            0.002604988170787692,
            -0.0001792880502762273,
            0.004859638400375843,
            0.01178661733865738,
            -0.0028703431598842144,
            0.022047009319067,
            0.02483583800494671,
            -0.01139812357723713,
            0.016150232404470444,
            0.004408708307892084,
            0.026153942570090294,
            0.021381020545959473,
            0.0048041390255093575,
            -0.01154380850493908,
            0.0045578619465231895,
            -0.01931368000805378,
            0.012126549147069454,
            0.040736325085163116,
            0.0023899292573332787,
            -0.030441245064139366,
            0.017412835732102394,
            0.0061673354357481,
            -0.02930351532995701,
            0.008893727324903011,
            0.0163167305290699,
            0.020354287698864937,
            0.011620120145380497,
            -0.0004264323797542602,
            -0.01125243864953518,
            -0.010503200814127922,
            -0.016330605372786522,
            -0.028887271881103516,
            -0.009289158508181572,
            -0.021769514307379723,
            -0.019147183746099472,
            -0.007971055805683136,
            -0.011772742494940758,
            0.016705222427845,
            -0.03288320451974869,
            0.021117400377988815,
            0.014402011409401894,
            -0.027402671054005623,
            -0.05544358119368553,
            -0.0045474558137357235,
            0.012431793846189976,
            -0.011210814118385315,
            0.016094733029603958,
            -0.013201843947172165,
            -0.01043382752686739,
            0.005591532215476036,
            -0.0030715272296220064,
            -0.011349561624228954,
            -0.012202860787510872,
            -0.025765448808670044,
            0.009192035533487797,
            -0.010919444262981415,
            -0.03687914088368416,
            -0.01223060954362154,
            -0.020340412855148315,
            0.02348998561501503,
            0.01004533376544714,
            -0.013971894048154354,
            0.0008316190214827657,
            0.010274267755448818,
            -0.009212847799062729,
            0.0115091223269701,
            0.025848696008324623,
            0.017232464626431465,
            0.0031755880918353796,
            -0.030746491625905037,
            -0.01544261910021305,
            -0.022685248404741287,
            -0.028179658576846123,
            -0.021478144451975822,
            0.016261231154203415,
            0.007090007420629263,
            0.023656483739614487,
            0.017551584169268608,
            0.007901681587100029,
            -0.012577478773891926,
            0.007110819686204195,
            -0.0036351897288113832,
            0.012688477523624897,
            -0.008928414434194565,
            0.01499862689524889,
            0.009316908195614815,
            0.023628734052181244,
            -0.0003347288293298334,
            0.013139407150447369,
            -0.020548535510897636,
            -0.024322472512722015,
            -0.0384608618915081,
            0.030052753165364265,
            -0.0006035525002516806,
            -0.013847020454704762,
            0.019369179382920265,
            0.020701156929135323,
            0.0066737644374370575,
            -0.04833969846367836,
            -0.000462203286588192,
            -0.02250487729907036,
            0.03504766896367073,
            0.002089887158945203,
            -0.016288980841636658,
            -0.02310149185359478,
            -0.0038884044624865055,
            -0.01727408915758133,
            -0.0001881765783764422,
            -0.03163447603583336,
            -0.0022754622623324394,
            0.007638060953468084,
            0.015900487080216408,
            -0.015886612236499786,
            -0.019743798300623894,
            0.013715210370719433,
            -0.02397560328245163,
            -0.011072066612541676,
            0.005425035022199154,
            0.029164766892790794,
            0.041874054819345474,
            -0.023156991228461266,
            0.012251421809196472,
            -0.036351896822452545,
            -0.015262247063219547,
            0.0027021116111427546,
            -0.026556309312582016,
            0.011217751540243626,
            -0.013222656212747097,
            0.031800974160432816,
            0.009011663496494293,
            0.03990383818745613,
            -0.02115902490913868,
            0.013860895298421383,
            0.013354466296732426,
            -0.002244244096800685,
            -0.02533533051609993,
            0.0015400995034724474,
            0.007575624622404575,
            -0.01621960662305355,
            -0.010302016511559486,
            -0.000517702370416373,
            -0.002433287911117077,
            0.02913701720535755,
            0.0012912207748740911,
            0.0115576833486557,
            -0.0005276748561300337,
            -0.011349561624228954,
            -0.00019283762958366424,
            -0.01431876327842474,
            -0.033160701394081116,
            -0.01881418749690056,
            -0.0051440708339214325,
            0.0015721848467364907,
            -0.004058370366692543,
            -0.018425695598125458,
            -0.011897615157067776,
            0.014804380014538765,
            0.013729085214436054,
            0.010773759335279465,
            -0.003982059191912413,
            0.024780340492725372,
            0.007582562044262886,
            -0.003418396459892392,
            0.024044977501034737,
            0.008872915990650654,
            -0.03293870389461517,
            -0.012917411513626575,
            -0.04095832258462906,
            0.005355661269277334,
            0.01727408915758133,
            -0.015345496125519276,
            0.010912506841123104,
            0.02115902490913868,
            -0.022768497467041016,
            0.017912328243255615,
            0.0034114590380340815,
            0.0035935654304921627,
            -0.009427906014025211,
            -0.023628734052181244,
            -0.034603677690029144,
            0.003562347264960408,
            -0.02736104652285576,
            -0.007152444217354059,
            -0.013326716609299183,
            -0.016580350697040558,
            0.0007314605172723532,
            0.0013129001017659903,
            0.024974586442112923,
            -0.02863752655684948,
            -0.024697091430425644,
            0.042068302631378174,
            0.010510138235986233,
            0.02813803404569626,
            -0.011987801641225815,
            0.009018600918352604,
            0.008026554249227047,
            0.0010987083660438657,
            -0.019161058589816093,
            0.019660549238324165,
            0.016719097271561623,
            -0.00689229229465127,
            0.018286947160959244,
            0.015969861298799515,
            -0.01222367212176323,
            -0.004870044533163309,
            0.014929252676665783,
            0.015775613486766815,
            -0.017731957137584686,
            -0.04845069721341133,
            0.011751930229365826,
            0.015789488330483437,
            -0.0064691114239394665,
            -0.021200649440288544,
            -0.03174547478556633,
            -0.022962745279073715,
            0.0147627554833889,
            -0.009670714847743511,
            0.017149215564131737,
            -0.005910652223974466,
            -0.00752012524753809,
            0.015303871594369411,
            0.0048249512910842896,
            0.020839905366301537,
            -0.010364453308284283,
            -0.002800969174131751,
            -0.0030420434195548296,
            0.021214524284005165,
            -0.015095749869942665,
            0.004922074731439352,
            0.007423002272844315,
            -0.0049359495751559734,
            0.020173916593194008,
            0.008553795516490936,
            0.011273250915110111,
            -0.007367502897977829,
            0.012910474091768265,
            0.006972072180360556,
            -0.007194068282842636,
            -0.005466659553349018,
            0.027707915753126144,
            -0.020146166905760765,
            -0.006677233148366213,
            0.0015600444748997688,
            -0.009233659133315086,
            0.00722875539213419,
            -0.024017227813601494,
            -0.012959035113453865,
            -0.0012287843273952603,
            0.0024593030102550983,
            0.007214880548417568,
            0.019383054226636887,
            0.009254471398890018,
            -0.00460989261046052,
            0.008768854662775993,
            -0.0034669581800699234,
            -0.0328277051448822,
            0.00555684557184577,
            -0.002783625852316618,
            0.020853780210018158,
            -0.0328277051448822,
            0.0011984332231804729,
            0.016774596646428108,
            -0.008234675973653793,
            0.00630608294159174,
            0.001174152479507029,
            -0.01775970496237278,
            0.0028634057380259037,
            0.02428084798157215,
            -0.029359014704823494,
            0.014526884071528912,
            0.016705222427845,
            -0.0071455067954957485,
            -0.001681448658928275,
            0.018411820754408836,
            0.0019910295959562063,
            -0.002551223384216428,
            0.015622991137206554,
            -0.0231153666973114,
            -0.024891337379813194,
            -0.004571736790239811,
            -0.016677474603056908,
            -0.008366486057639122,
            -0.0021089650690555573,
            0.013853957876563072,
            0.01261216588318348,
            -0.01639997772872448,
            0.0023448362480849028,
            -0.01824532262980938,
            0.007554812356829643,
            0.017509959638118744,
            -0.007894744165241718,
            -0.006222834344953299,
            0.022449377924203873,
            -0.024710966274142265,
            0.0048873876221477985,
            -0.011814367026090622,
            0.00844279769808054,
            -0.020992526784539223,
            -0.04958842694759369,
            0.0017282760236412287,
            0.023267989978194237,
            -0.0006074548000469804,
            0.006153460592031479,
            -0.008789666928350925,
            -0.02269912324845791,
            0.0032345557119697332,
            -0.0027246579993516207,
            0.018384071066975594,
            -0.003196400124579668,
            0.013264280743896961,
            0.011002692393958569,
            0.016954969614744186,
            0.03057999350130558,
            0.008532983250916004,
            -0.01737121306359768,
            -0.02213025838136673,
            -0.012487293221056461,
            -0.012549730017781258,
            -0.03546391427516937,
            -0.015664614737033844,
            -0.020617907866835594,
            0.04143006354570389,
            -0.00422139884904027,
            -0.01835632137954235,
            -0.006632140371948481,
            -0.003430536948144436,
            -0.04032008349895477,
            -0.02454446814954281,
            -0.0013683992438018322,
            0.014027392491698265,
            0.003229352878406644,
            0.03668489307165146,
            -0.001163746346719563,
            0.0188419371843338,
            -0.0026015194598585367,
            0.003418396459892392,
            -0.009101849049329758,
            -0.014707256108522415,
            -0.00204999721609056,
            -0.006476048845797777,
            0.013375278562307358,
            0.007534000091254711,
            -0.026556309312582016,
            -0.0011212548706680536,
            0.018661566078662872,
            -0.006777825299650431,
            -0.0027090488001704216,
            0.02806865982711315,
            0.0003720172680914402,
            -0.007957180961966515,
            0.005941870156675577,
            0.006462174002081156,
            0.004127744119614363,
            0.006274865008890629,
            0.008678669109940529,
            -0.013278154656291008,
            0.011925364844501019,
            0.013222656212747097,
            -0.019729923456907272,
            -0.016483226791024208,
            -0.007790683303028345,
            0.014693381264805794,
            0.010392202995717525,
            -0.0006824652664363384,
            0.001703128102235496,
            -0.022199632599949837,
            0.005910652223974466,
            -0.019355304539203644,
            0.04728521779179573,
            0.005317505914717913,
            0.0009868430206552148,
            0.0240866020321846,
            -0.0017551584169268608,
            -0.011314875446259975,
            0.0018557505682110786,
            0.00325189926661551,
            0.005751092452555895,
            0.003395850071683526,
            0.02059015817940235,
            -0.020368162542581558,
            -0.01813432388007641,
            -0.006937385071069002,
            0.002254650229588151,
            -0.02999725379049778,
            -0.027333296835422516,
            -0.020742781460285187,
            -0.0005203039036132395,
            -0.02748592011630535,
            0.0222412571310997,
            0.012813350185751915,
            -0.014859878458082676,
            0.005983494687825441,
            -0.008095928467810154,
            0.00021733526955358684,
            -0.005674780812114477,
            -0.019924169406294823,
            0.007880869321525097,
            -0.019050059840083122,
            0.00941403117030859,
            0.012209798209369183,
            -0.015123499557375908,
            -0.01004533376544714,
            0.007984930649399757,
            0.01484600454568863,
            -0.02591807022690773,
            0.02321249060332775,
            0.2121174931526184,
            -0.035380665212869644,
            0.009594403207302094,
            0.02601519413292408,
            0.01756545901298523,
            -0.015650739893317223,
            0.028776273131370544,
            0.006250584032386541,
            -0.011439748108386993,
            0.010378328152000904,
            0.0006130913970991969,
            0.007221817970275879,
            -0.022477127611637115,
            -0.00091313332086429,
            0.011051254346966743,
            -0.03388218954205513,
            -0.046563729643821716,
            -0.02582094818353653,
            -0.0030819333624094725,
            0.015303871594369411,
            0.011079004034399986,
            0.0060147130861878395,
            -0.004096525721251965,
            -0.02716680057346821,
            0.019438553601503372,
            -0.011141440831124783,
            -0.001380539615638554,
            0.0072079431265592575,
            0.007818433456122875,
            0.012001676484942436,
            0.0011117159156128764,
            0.004242211114615202,
            0.0069512599147856236,
            -0.004550924524664879,
            0.009337720461189747,
            -0.0161224827170372,
            0.00582393491640687,
            -0.009705401957035065,
            0.006587047129869461,
            0.0171908400952816,
            0.0072079431265592575,
            0.0003715836792252958,
            0.02910926751792431,
            -0.03249471262097359,
            0.008102865889668465,
            0.02688930556178093,
            -0.004942886997014284,
            -0.008706417866051197,
            0.006465642713010311,
            0.0037219070363789797,
            -0.011800492182374,
            0.0314679779112339,
            0.030441245064139366,
            0.0378781221807003,
            -0.005137133877724409,
            0.00912266131490469,
            -0.03909910097718239,
            0.01863381639122963,
            0.010406077839434147,
            0.009830274619162083,
            -0.026875430718064308,
            -0.005456253420561552,
            0.0034964419901371002,
            0.025751573964953423,
            -0.016524851322174072,
            0.0014516478404402733,
            -0.0083526112139225,
            0.004346271976828575,
            0.011231626383960247,
            -0.02836002968251705,
            -0.007166318595409393,
            -0.013354466296732426,
            -0.032078467309474945,
            0.013479338958859444,
            -0.022393878549337387,
            -0.048200950026512146,
            0.03213396668434143,
            0.03840536251664162,
            0.011821304447948933,
            0.0394320972263813,
            -0.011640932410955429,
            -0.011807429604232311,
            -0.00752012524753809,
            -0.02133939601480961,
            -0.005986963398754597,
            -0.034714676439762115,
            0.01923043094575405,
            -0.023254115134477615,
            -0.014429761096835136,
            -0.014041267335414886,
            -0.01155074592679739,
            -0.013111657463014126,
            -0.009871899150311947,
            0.016136357560753822,
            0.007194068282842636,
            0.0025095990858972073,
            0.009192035533487797,
            -0.014346512034535408,
            -0.0012183783110231161,
            -0.024724841117858887,
            -0.016344480216503143,
            0.05261312797665596,
            0.03255021199584007,
            0.0041554938070476055,
            0.008678669109940529,
            0.010836195200681686,
            -0.0034270682372152805,
            0.011966989375650883,
            0.0033941157162189484,
            -0.002204354153946042,
            0.008213863708078861,
            -0.044010769575834274,
            0.01649710163474083,
            -0.004748640116304159,
            -0.011849054135382175,
            0.005584594793617725,
            0.0035259260330349207,
            -0.0030697928741574287,
            0.020812155678868294,
            -0.001413492253050208,
            -0.0009755697683431208,
            -0.02271299809217453,
            0.008109803311526775,
            -0.00230494630523026,
            -0.0032102749682962894,
            -0.02570994943380356,
            -0.016066983342170715,
            -0.005518689751625061,
            -0.040625326335430145,
            0.004124275408685207,
            0.007936368696391582,
            -0.019938044250011444,
            -0.0032605710439383984,
            0.019105559214949608,
            -0.01087088230997324,
            -0.002292805816978216,
            0.009025538340210915,
            -0.0088867899030447,
            -0.007672748062759638,
            -0.0021627298556268215,
            0.004103463143110275,
            0.017593208700418472,
            -0.0008897196385078132,
            0.0031877283472567797,
            0.026070693507790565,
            0.002962263533845544,
            0.008956164121627808,
            0.02922026626765728,
            -0.010995754972100258,
            -0.0033091327641159296,
            -0.02999725379049778,
            0.00436708377674222,
            0.0023344301152974367,
            -0.00124265905469656,
            0.018703190609812737,
            0.007631123531609774,
            -0.0363241471350193,
            0.003999402746558189,
            0.007561749778687954,
            0.021575268357992172,
            -0.04709096997976303,
            0.0008346541435457766,
            0.0030420434195548296,
            -0.013278154656291008,
            -0.0074021900072693825,
            -0.016066983342170715,
            -0.1791510283946991,
            -0.0174822099506855,
            0.00018969412485603243,
            -0.041513312608003616,
            0.011307938024401665,
            0.022296756505966187,
            0.012133486568927765,
            -0.00897697638720274,
            -0.034520428627729416,
            -0.003307398408651352,
            0.004117337986826897,
            -0.0018817656673491001,
            0.0009903117315843701,
            -0.011765805073082447,
            -0.011176127009093761,
            0.0044850194826722145,
            -0.007166318595409393,
            0.009608278051018715,
            0.0010232642525807023,
            0.003196400124579668,
            0.03163447603583336,
            -0.03268896043300629,
            -0.013479338958859444,
            -0.024419596418738365,
            0.011828241869807243,
            0.015650739893317223,
            -0.007478501182049513,
            0.023351239040493965,
            -0.006371988449245691,
            -0.03191197291016579,
            -0.017537709325551987,
            -0.010496263392269611,
            0.031412478536367416,
            -0.014332637190818787,
            0.012806412763893604,
            0.016372228041291237,
            0.02347611077129841,
            -0.00034968755790032446,
            -0.025030085816979408,
            0.016552601009607315,
            0.022574251517653465,
            0.024627717211842537,
            0.020756656304001808,
            0.012556667439639568,
            -0.026917053386569023,
            0.006760481745004654,
            0.023462235927581787,
            -0.030746491625905037,
            0.0022026197984814644,
            -0.010524013079702854,
            0.024627717211842537,
            -0.023628734052181244,
            0.0066113281063735485,
            0.005875965114682913,
            -0.006316489074379206,
            0.023850729689002037,
            -0.0038467799313366413,
            0.010211830958724022,
            -0.010406077839434147,
            -0.0024922555312514305,
            -0.0171908400952816,
            -0.010773759335279465,
            0.0005285420338623226,
            -0.0025182708632200956,
            -0.017024343833327293,
            -0.036240898072719574,
            -0.011960051953792572,
            0.0010432093404233456,
            -0.0252520814538002,
            0.0034929735120385885,
            -0.011744992807507515,
            0.0036351897288113832,
            -0.005927995778620243,
            -0.0038120930548757315,
            0.026070693507790565,
            0.01988254487514496,
            0.006933916360139847,
            0.022463252767920494,
            0.016968844458460808,
            -0.001080497750081122,
            -0.018994560465216637,
            0.017926203086972237,
            -0.0002926709421444684,
            0.017024343833327293,
            -0.017301838845014572,
            -0.009143473580479622,
            -0.006871480029076338,
            0.0164138525724411,
            -0.02028491348028183,
            -0.010635011829435825,
            0.0382666178047657,
            -0.01072519738227129,
            -0.005619281902909279,
            -0.01116918958723545,
            -0.002911967458203435,
            0.01513737440109253,
            0.0022650561295449734,
            -0.013423840515315533,
            -0.0027350641321390867,
            0.0004955894546583295,
            -0.005390348378568888,
            0.004779858514666557,
            -0.0019251243211328983,
            -0.0022459784522652626,
            0.026875430718064308,
            0.013715210370719433,
            -0.039931587874889374,
            0.01170336827635765,
            0.03546391427516937,
            -0.027513669803738594,
            -0.023323489353060722,
            -0.014735005795955658,
            -0.008699481375515461,
            -0.00448848819360137,
            -0.008921477012336254,
            0.00577190425246954,
            0.001181089784950018,
            -0.033549193292856216,
            0.018855812028050423,
            0.0008311854326166213,
            0.037822622805833817,
            -0.01834244653582573,
            -0.0031894627027213573,
            -0.006163866724818945,
            0.004273429047316313,
            -0.026736682280898094,
            -0.12365195155143738,
            -0.02668118290603161,
            0.01787070371210575,
            0.015192873775959015,
            -0.012195923365652561,
            0.034215182065963745,
            0.002917170524597168,
            0.047423966228961945,
            -0.024044977501034737,
            0.04550924524664879,
            -0.027152925729751587,
            -0.002644878113642335,
            0.013770709745585918,
            -0.0036698768381029367,
            0.029830755665898323,
            -0.010260392911732197,
            0.0017360806232318282,
            -0.018370196223258972,
            -0.042873039841651917,
            0.028013160452246666,
            0.02164464071393013,
            -0.009060224518179893,
            0.005265475250780582,
            -0.029969504103064537,
            -0.011883740313351154,
            -0.006094492971897125,
            -0.03579690679907799,
            0.02262975089251995,
            0.021145150065422058,
            0.005428503733128309,
            0.017246339470148087,
            -0.03760062903165817,
            -0.007318941410630941,
            -0.02572382427752018,
            0.02262975089251995,
            -0.004554393235594034,
            0.0007032774155959487,
            -0.014388136565685272,
            0.016843970865011215,
            -0.012258359231054783,
            -0.009046350605785847,
            0.007395252585411072,
            0.022060884162783623,
            -0.0025130677968263626,
            0.00543544115498662,
            -0.02922026626765728,
            -0.010066146031022072,
            0.021311646327376366,
            0.008650919422507286,
            -0.015026376582682133,
            -0.03618540242314339,
            -0.014200827106833458,
            -0.04764596000313759,
            0.021575268357992172,
            0.016066983342170715,
            0.00965684000402689,
            0.01222367212176323,
            0.019729923456907272,
            -0.009622152894735336,
            0.009434843435883522,
            -0.00951115507632494,
            0.002969200722873211,
            -0.03069099225103855,
            0.0068680113181471825,
            0.007131631951779127,
            0.0013259077677503228,
            -0.0016797144198790193,
            -0.02600131928920746,
            0.0034374743700027466,
            -0.0031443696934729815,
            -0.0029882786329835653,
            0.02096477709710598,
            -0.011363436467945576,
            0.007058789487928152,
            -0.002979606855660677,
            -0.0033039296977221966,
            -0.019632799550890923,
            -0.027402671054005623,
            -0.007006758823990822,
            0.001704862341284752,
            -0.009143473580479622,
            -0.016538726165890694,
            0.006226303055882454,
            -0.010600324720144272,
            0.0009712339378893375,
            -0.0030559180304408073,
            -0.016261231154203415,
            -0.0040028709918260574,
            -0.005230788607150316,
            -0.02095090225338936,
            0.0013319778954610229,
            0.03027474880218506,
            0.0024749122094362974,
            -0.0214642696082592,
            0.0035935654304921627,
            0.026736682280898094,
            -0.019549550488591194,
            -0.0061673354357481,
            0.036740392446517944,
            0.006028587464243174,
            -0.01087781973183155,
            0.012161236256361008,
            -0.05452784523367882,
            0.02378135547041893,
            0.015400994569063187,
            -0.0076588732190430164,
            0.006881886161863804,
            -0.01086394488811493,
            0.018578317016363144,
            -0.021769514307379723,
            0.01032976619899273,
            0.007950243540108204,
            -0.0211728997528553,
            0.022269006818532944,
            -0.0072703794576227665,
            -0.010621136985719204,
            -0.024100475013256073,
            0.0016675739316269755,
            0.03260571137070656,
            -0.0008099396945908666,
            0.013465464115142822,
            -0.0007800222374498844,
            0.00582393491640687,
            -0.02464159205555916,
            0.00638239411637187,
            0.010524013079702854,
            0.005386879667639732,
            -0.00604593101888895,
            -0.027999285608530045,
            0.014776630327105522,
            0.000476078042993322,
            -0.013576462864875793,
            -0.010378328152000904,
            -0.00965684000402689,
            -0.012168173678219318,
            0.0046064238995313644,
            -0.01378458458930254,
            -0.010905569419264793,
            0.025460204109549522,
            0.029719756916165352,
            0.019965793937444687,
            0.04628623276948929,
            -0.024308597669005394,
            -0.033743441104888916,
            0.00281657837331295,
            -0.018370196223258972,
            -0.00703797722235322,
            -0.01757933385670185,
            0.005175289232283831,
            -0.005827403627336025,
            0.030607743188738823,
            -0.001659769332036376,
            0.048006705939769745,
            0.016566475853323936,
            -0.02000741846859455,
            -0.025363080203533173,
            -0.008824354037642479,
            0.016732972115278244,
            0.016677474603056908,
            0.013285092078149319,
            0.010517075657844543,
            0.02174176461994648,
            0.020645657554268837,
            0.007277316879481077,
            0.010371390730142593,
            -0.009053288027644157,
            0.005362598691135645,
            -0.008241613395512104,
            -0.0134030282497406,
            -0.0083040501922369,
            0.0034426774363964796,
            -0.00217140163294971,
            0.00018958572763949633,
            0.00689229229465127,
            0.021381020545959473,
            0.007173256017267704,
            0.007298129145056009,
            -0.015747863799333572,
            0.0029917473439127207,
            0.00631302036345005,
            -0.01139812357723713,
            0.01246648095548153,
            -0.00043597130570560694,
            -0.005768435541540384,
            0.0023084147833287716,
            0.008706417866051197,
            0.01893906109035015,
            0.0015461697475984693,
            -0.0037670000456273556,
            0.0025911133270710707,
            -0.014263263903558254,
            -0.007540937513113022,
            0.0028391247615218163,
            -0.002025716472417116,
            -0.005463190842419863,
            0.02483583800494671,
            0.012938222847878933,
            0.0055533768609166145,
            -0.007776808924973011,
            0.005879433825612068,
            0.024322472512722015,
            0.004596017766743898,
            0.012695414945483208,
            -0.023448361083865166,
            -0.00819305144250393,
            -0.010905569419264793,
            -0.02805478498339653,
            0.01276478823274374,
            -0.04481550678610802,
            -0.022782372310757637,
            0.03540841490030289,
            0.022934995591640472,
            0.01208492461591959,
            -0.013264280743896961,
            0.006514204666018486,
            0.014346512034535408,
            -0.0276801660656929,
            0.0303024984896183,
            -0.0066841705702245235,
            -0.01757933385670185,
            -0.028373904526233673,
            0.024031102657318115,
            0.039265599101781845,
            0.004405239596962929,
            0.04822869971394539,
            0.000724089564755559,
            0.020853780210018158,
            0.0005940136034041643,
            0.01970217376947403,
            -0.02784666419029236,
            0.01639997772872448,
            -0.003524191677570343,
            -0.013215718790888786,
            -0.005074697080999613,
            -0.014929252676665783,
            -0.007686622906476259,
            -0.005699061788618565,
            -0.0013605946442112327,
            -0.018314696848392487,
            0.030441245064139366,
            0.010392202995717525,
            0.05844053253531456,
            0.015983736142516136,
            -0.008116740733385086,
            0.027999285608530045,
            -0.007707434706389904,
            0.0223383791744709,
            0.01620573177933693,
            0.026847681030631065,
            -0.0021141681354492903,
            -0.027319421991705894,
            -0.0008832158637233078,
            0.0007865260122343898,
            0.003912684973329306,
            -0.028498778119683266,
            -0.0027420015539973974,
            -0.014915377832949162,
            0.002481849631294608,
            0.02397560328245163,
            -0.008290175348520279,
            -0.009108786471188068,
            0.0404033325612545,
            -0.008255488239228725,
            0.015400994569063187,
            0.012105736881494522,
            -0.01630285568535328,
            0.008512171916663647,
            0.019147183746099472,
            0.009469530545175076,
            -0.002017044695094228,
            0.0017447524005547166,
            0.027208425104618073,
            0.019480178132653236,
            -0.031023986637592316,
            -0.014943127520382404,
            0.008963101543486118,
            0.0065523600205779076,
            0.004682735074311495,
            -0.02833227999508381,
            0.0007249567424878478,
            -0.006260990165174007,
            -0.004093057010322809,
            0.005726811476051807,
            -0.005723342765122652,
            -0.02407272718846798,
            -0.0026795649901032448,
            0.0013285093009471893,
            0.0028373904060572386,
            -0.010718259960412979,
            -0.01621960662305355
          ]
        },
        "type": "document"
      },
      "target": {
        "id": "d4054310-41ff-4d85-bb2f-84ef02a66fb2",
        "properties": {
          "page_content": "Simon Willison’s Weblog\n\nSubscribe\n\nStuff we figured out about AI in 2023\n\n31st December 2023\n\n2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s.\n\nHere’s my attempt to round up the highlights in one place!\n\nLarge Language Models\n\nThey’re actually quite easy to build\n\nYou can run LLMs on your own devices\n\nHobbyists can build their own fine-tuned models\n\nWe don’t yet know how to build GPT-4\n\nVibes Based Development\n\nLLMs are really smart, and also really, really dumb\n\nGullibility is the biggest unsolved problem\n\nCode may be the best application\n\nThe ethics of this space remain diabolically complex\n\nMy blog in 2023\n\nHere’s the sequel to this post: Things we learned about LLMs in 2024.\n\nLarge Language Models\n\nIn the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software.\n\nLLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code.\n\nThey can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes.\n\nSo far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life.\n\nA lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity.\n\nThey’re actually quite easy to build\n\nThe most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build.\n\nIntuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version!\n\nWhat matters most is the training  data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is.\n\nIf you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM.\n\nA year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations.\n\nThe training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing.\n\nSo training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries).\n\nYou can run LLMs on your own devices\n\nIn January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them.\n\nThen in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook.\n\nI wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call!\n\nThis unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use.\n\nToday there are literally thousands of LLMs that can be run locally, on all manner of different devices.\n\nI run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins.\n\nYou can even run them entirely in your browser using WebAssembly and the latest Chrome!\n\nHobbyists can build their own fine-tuned models\n\nI said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely.\n\nThere’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too.\n\nThe Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours.\n\nThe best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data.\n\nThis is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them.\n\nWe don’t yet know how to build GPT-4\n\nFrustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4.\n\nOpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing.\n\nThis may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out.\n\nThe team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then.\n\nStill, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet.\n\nVibes Based Development\n\nAs a computer scientist and software engineer, LLMs are infuriating.\n\nEven the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them.\n\nI’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that!\n\nThe worst part is the challenge of evaluating them.\n\nThere are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task.\n\nI find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself!\n\nThe most frustrating thing for me is at the level of individual prompting.\n\nSometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out.\n\nWe’re left with what’s effectively Vibes Based Development. It’s vibes all the way down.\n\nI’d love to see us move beyond vibes in 2024!\n\nLLMs are really smart, and also really, really dumb\n\nOn the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun!\n\nBut on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb.\n\nDoes ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays?\n\nThe honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer.\n\nSometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead.\n\nThere are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works!\n\nGullibility is the biggest unsolved problem\n\nI coined the term prompt injection in September last year.\n\n15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem.\n\nI’ve written a ton about this already.\n\nBeyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility.\n\nLanguage Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt.\n\nIn order to be useful tools for us, we need them to believe what we feed them!\n\nBut it turns out a lot of the things we want to build need them not to be gullible.\n\nEveryone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited.\n\nA lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes.\n\nI think this is because of gullibility.\n\nCan we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true!\n\nCode may be the best application\n\nOver the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of.\n\nIf you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English.\n\nIt’s still astonishing to me how effective they are though.\n\nOne of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless.\n\nExcept... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works!\n\nSo hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language!\n\nHow should we feel about this as software engineers?\n\nOn the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you?\n\nOn the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can.\n\nThe ethics of this space remain diabolically complex\n\nIn September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion.\n\nSince then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data.\n\nJust this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere.\n\nThe legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future.\n\nLaw is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people?\n\nAs the quality of results produced by AI models has increased over the year, these questions have become even more pressing.\n\nThe impact on human society in terms of these models is already huge, if difficult to objectively measure.\n\nPeople have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators.\n\nThere are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic.\n\nMy blog in 2023\n\nHere’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard):\n\nThe top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78).\n\nI’ve written a lot about this stuff!\n\nI grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic:\n\nArticle Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k\n\nI also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023:\n\nPrompt injection explained, with video, slides, and a transcript\n\nCatching up on the weird world of LLMs\n\nMaking Large Language Models work for you\n\nOpen questions for AI engineering\n\nEmbeddings: What they are and why they matter\n\nFinancial sustainability for open source projects at GitHub Universe\n\nAnd in podcasts:\n\nWhat AI can do for you on the Theory of Change\n\nWorking in public on Path to Citus Con\n\nLLMs break the internet on the Changelog\n\nTalking Large Language Models on Rooftop Ruby\n\nThoughts on the OpenAI board situation on Newsroom Robots\n\nIndustry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations\n\nPosted \n\n31st December 2023 at 11:59 pm · Follow me on\n\nMastodon or\n\nTwitter or\n\nsubscribe to my newsletter\n\nMore recent articles\n\nUsing pip to install a Large Language Model that's under 100MB - 7th February 2025\n\nOpenAI o3-mini, now available in LLM - 31st January 2025\n\nA selfish personal argument for releasing code as Open Source - 24th January 2025\n\nThis is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023.\n\nPart of series LLMs annual review\n\nStuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m.\n\nThings we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m.\n\nblogging\n            68\n\nai\n            1091\n\ngenerative-ai\n            936\n\nllms\n            924\n\nNext: Tom Scott, and the formidable power of escalating streaks\n\nPrevious: Last weeknotes of 2023\n\nColophon\n\n©\n\n2002\n\n2003\n\n2004\n\n2005\n\n2006\n\n2007\n\n2008\n\n2009\n\n2010\n\n2011\n\n2012\n\n2013\n\n2014\n\n2015\n\n2016\n\n2017\n\n2018\n\n2019\n\n2020\n\n2021\n\n2022\n\n2023\n\n2024\n\n2025",
          "document_metadata": {
            "source": "data/2023_llms.html"
          },
          "headlines": [
            "Large Language Models",
            "Vibes Based Development",
            "LLMs are really smart, and also really, really dumb",
            "Gullibility is the biggest unsolved problem",
            "Code may be the best application"
          ],
          "summary": "In 2023, Large Language Models (LLMs) emerged as a significant development in AI, with advancements making them easier to build and run on personal devices. Despite their capabilities, LLMs remain complex and unpredictable, with gullibility being a major unresolved issue. They excel in generating code, as errors can be tested and corrected, reducing the impact of hallucinations. The ethics of using unlicensed data for training these models are contentious, highlighted by legal actions like the New York Times lawsuit against OpenAI. The year also saw a proliferation of LLMs from various organizations, though none have surpassed GPT-4. The field continues to grapple with the challenges of understanding and controlling these models, often relying on 'Vibes Based Development' due to the lack of clear methodologies.",
          "summary_embedding": [
            -0.011880152858793736,
            0.005520491395145655,
            0.003946180455386639,
            -0.037700239568948746,
            -0.007885425351560116,
            0.010083912871778011,
            -0.017019202932715416,
            0.024648023769259453,
            -0.027394399046897888,
            -0.03700670972466469,
            0.021000059321522713,
            0.0209029670804739,
            -0.029183702543377876,
            0.0010593656916171312,
            -0.0022487679962068796,
            0.014550239779055119,
            0.023122258484363556,
            0.0017624307656660676,
            0.017684990540146828,
            -0.014827651903033257,
            0.005770161747932434,
            0.0033341411035507917,
            -0.018475614488124847,
            -0.01812884956598282,
            -0.004438586067408323,
            0.005416462197899818,
            0.018697543069720268,
            -0.037256382405757904,
            -0.01563214510679245,
            0.005780564621090889,
            0.01914140209555626,
            -0.00017869210569188,
            -0.03395518288016319,
            0.007455437444150448,
            -0.03176363185048103,
            -0.00686246994882822,
            0.024537058547139168,
            -0.00603717053309083,
            0.017879178747534752,
            0.009140713140368462,
            0.030154643580317497,
            0.024745117872953415,
            0.015299251303076744,
            -0.017851438373327255,
            -0.018517225980758667,
            0.017629509791731834,
            0.007608013693243265,
            -0.01976557821035385,
            -0.03215200826525688,
            0.018850119784474373,
            0.018392391502857208,
            0.029849492013454437,
            -0.01005617156624794,
            -0.01352381706237793,
            -0.00445592449977994,
            0.00506969727575779,
            -0.0028954839799553156,
            0.006734167225658894,
            0.013509945943951607,
            -0.001715617487207055,
            -0.006474093999713659,
            -0.020611684769392014,
            -0.004448988940566778,
            0.025313811376690865,
            -0.0043588303960859776,
            -0.007122543640434742,
            -0.023413540795445442,
            0.029183702543377876,
            0.031070102006196976,
            -0.013371240347623825,
            0.0006211419822648168,
            -0.0110201770439744,
            0.013052216731011868,
            -0.005551700014621019,
            0.014758298173546791,
            0.003214507130905986,
            -0.012344817630946636,
            -0.01361397560685873,
            -0.02595185860991478,
            0.00482002692297101,
            -0.003252651309594512,
            0.0050523593090474606,
            -0.010569383390247822,
            0.02278936468064785,
            0.017324356362223625,
            -0.0038074746262282133,
            -0.0057285502552986145,
            -0.018114978447556496,
            -0.004667450673878193,
            -0.014127187430858612,
            -0.006696023046970367,
            -0.005035020876675844,
            0.021860036998987198,
            0.017490802332758904,
            -0.008135096170008183,
            -0.006411676295101643,
            -0.012358687818050385,
            0.009952141903340816,
            -0.014702816493809223,
            -0.022775495424866676,
            -0.007261249236762524,
            0.0014988897601142526,
            -0.04383103549480438,
            -0.008738466538488865,
            -0.020694907754659653,
            0.004074483178555965,
            0.015271509997546673,
            0.022997424006462097,
            0.02051459066569805,
            0.014550239779055119,
            -0.012372558936476707,
            0.027990832924842834,
            0.005596779752522707,
            -0.026312492787837982,
            -0.00212393281981349,
            -0.009972947649657726,
            0.006040638312697411,
            0.001518828677944839,
            -0.001785837346687913,
            0.0013610507594421506,
            0.03267908841371536,
            0.01052083633840084,
            0.012892705388367176,
            0.0011243839981034398,
            0.023968365043401718,
            -0.011075659655034542,
            3.1615174520993605e-05,
            -0.020805872976779938,
            -0.011103400029242039,
            -0.0023406606633216143,
            0.004077950958162546,
            0.00500728003680706,
            0.008870236575603485,
            0.0070982701145112514,
            -0.03087591379880905,
            0.040640804916620255,
            -0.015618274919688702,
            -0.002240099012851715,
            0.006928355433046818,
            0.009889724664390087,
            0.004771479871124029,
            0.026950540021061897,
            -0.024009976536035538,
            0.019335590302944183,
            -0.011124206706881523,
            0.020403625443577766,
            0.0057458882220089436,
            0.016533732414245605,
            -0.0015214293962344527,
            -0.0012630898272618651,
            0.00803800206631422,
            -0.035286758095026016,
            -0.020833613350987434,
            0.016408897936344147,
            0.009189260192215443,
            0.005392188671976328,
            0.00906442478299141,
            0.030543019995093346,
            -0.038837626576423645,
            -0.015867944806814194,
            -0.013232534751296043,
            0.015743110328912735,
            -0.004001662600785494,
            0.015951167792081833,
            0.013856710866093636,
            0.021000059321522713,
            0.021582623943686485,
            -0.0030723337549716234,
            -0.007892360910773277,
            -0.011561129242181778,
            -0.017754344269633293,
            0.03595254570245743,
            -0.0342603363096714,
            0.01559053361415863,
            -0.009667795151472092,
            0.016811145469546318,
            0.02309451811015606,
            -0.0018499888246878982,
            -0.026881186291575432,
            -0.011783058755099773,
            0.02037588320672512,
            0.005343641620129347,
            0.008315413258969784,
            -0.00343123497441411,
            -0.021832294762134552,
            0.0033705513924360275,
            0.014085575006902218,
            0.0008309344993904233,
            0.01062486506998539,
            -0.02489769272506237,
            0.02871210314333439,
            0.01654760353267193,
            -0.005423397291451693,
            -0.01932171918451786,
            -0.6506966948509216,
            -0.03523127734661102,
            0.013974610716104507,
            -0.012781741097569466,
            -0.0027567781507968903,
            -0.006595461629331112,
            -0.005253482609987259,
            -0.01453636959195137,
            -0.02072264812886715,
            0.036729298532009125,
            -0.012358687818050385,
            0.002305984264239669,
            -0.003167693968862295,
            -0.0203342717140913,
            0.010721959173679352,
            -0.009189260192215443,
            0.001533566159196198,
            -0.025494128465652466,
            0.007774461060762405,
            0.01769886165857315,
            -0.0047541419044137,
            0.01611761562526226,
            -0.006300711538642645,
            -0.010569383390247822,
            -0.027338916435837746,
            0.0037346540484577417,
            0.013385111466050148,
            0.01690823957324028,
            -0.008322348818182945,
            0.006675217300653458,
            -0.014168798923492432,
            0.006616267375648022,
            -0.005707744043320417,
            0.008967330679297447,
            0.04904637485742569,
            0.00063111144118011,
            -0.018766896799206734,
            0.021971000358462334,
            0.0012232118751853704,
            0.007788331247866154,
            -0.04119562730193138,
            -0.012268529273569584,
            -0.004400441888719797,
            0.029433373361825943,
            -0.010500029660761356,
            0.030986879020929337,
            0.025702187791466713,
            -0.01158887054771185,
            -0.016519863158464432,
            -0.00633538793772459,
            0.0014286699006333947,
            0.0051598562858998775,
            0.0040952893905341625,
            0.0010567649733275175,
            0.0031867660582065582,
            0.012968993745744228,
            0.014231216162443161,
            -0.013828969560563564,
            0.0021586092188954353,
            -0.020805872976779938,
            -0.0008630102383904159,
            -0.014799910597503185,
            -0.026645386591553688,
            -0.030487537384033203,
            -0.015313121490180492,
            0.011276782490313053,
            0.006789649371057749,
            0.010742764919996262,
            -0.004930991679430008,
            -0.015701498836278915,
            -0.004594630096107721,
            0.04280461370944977,
            -0.0019332122756168246,
            -0.011609676294028759,
            -0.007809137459844351,
            0.014002352021634579,
            0.005416462197899818,
            -0.014453145675361156,
            -0.002104860730469227,
            0.01106178853660822,
            0.003309867577627301,
            -0.02161036618053913,
            -0.0003725551359821111,
            -0.0006566853262484074,
            0.0388098880648613,
            0.0036895745433866978,
            0.012788675725460052,
            -0.0009622715879231691,
            0.0010827722726389766,
            0.008703789673745632,
            0.005191064905375242,
            0.030321091413497925,
            -0.014952486380934715,
            -0.051348891109228134,
            0.004459391813725233,
            0.01690823957324028,
            -0.018558837473392487,
            0.014286698773503304,
            0.021069413051009178,
            -0.028268244117498398,
            -0.004608500748872757,
            -0.013822034001350403,
            0.042527202516794205,
            0.02538316324353218,
            0.012407234869897366,
            0.022553564980626106,
            0.0027116986457258463,
            0.001938413712196052,
            0.013822034001350403,
            -0.025979598984122276,
            -0.006706425920128822,
            0.0035040555521845818,
            -0.0005639258306473494,
            -0.006383934989571571,
            -0.0057458882220089436,
            -0.03217975050210953,
            -0.007171090692281723,
            -0.01255981158465147,
            0.011741447262465954,
            -0.026881186291575432,
            0.018031755462288857,
            -0.006914484780281782,
            0.02915596216917038,
            -0.0041715772822499275,
            -0.00017825864779297262,
            0.0009735414059832692,
            0.004088353831321001,
            -0.01016713585704565,
            -0.0035924806725233793,
            0.0242873877286911,
            -0.008488795720040798,
            -0.022428730502724648,
            0.016741791740059853,
            -0.012379493564367294,
            0.016755662858486176,
            0.013919128105044365,
            0.04849155247211456,
            -0.008336219005286694,
            0.009744083508849144,
            0.017005333676934242,
            -0.023690953850746155,
            0.0013411118416115642,
            0.010458418168127537,
            0.014508628286421299,
            -0.04058532044291496,
            -0.03287327662110329,
            -0.005527426488697529,
            -0.006321517284959555,
            0.005461541470140219,
            -0.014702816493809223,
            -0.014799910597503185,
            -0.01761563867330551,
            -0.01848948560655117,
            0.03412162885069847,
            -0.001908938749693334,
            -0.00776059040799737,
            -0.0091337775811553,
            -0.021984871476888657,
            -0.004424715414643288,
            -0.021332954987883568,
            0.010000688955187798,
            0.009265548549592495,
            0.004157706629484892,
            0.008481860160827637,
            0.016783403232693672,
            -0.02301129512488842,
            -0.01049309503287077,
            0.028989514335989952,
            -0.0384492501616478,
            -0.020792001858353615,
            0.0034295013174414635,
            -0.03764475882053375,
            0.014480886980891228,
            0.03181911259889603,
            -0.009397318586707115,
            0.027768904343247414,
            -0.0069318232126533985,
            0.0016688043251633644,
            0.007001176010817289,
            -0.013731875456869602,
            0.006720296572893858,
            0.029100479558110237,
            0.012712388299405575,
            -0.006318049971014261,
            0.013662522658705711,
            0.02309451811015606,
            0.0368957482278347,
            0.016838885843753815,
            -0.0014512095367535949,
            0.0040155332535505295,
            0.004580759443342686,
            0.036118995398283005,
            -0.0040155332535505295,
            0.0067445700988173485,
            -0.013697199523448944,
            0.026270881295204163,
            0.001154725905507803,
            -0.01905817911028862,
            0.007150284945964813,
            0.025854764506220818,
            0.012136758305132389,
            0.01778208464384079,
            0.01607600413262844,
            -0.012844158336520195,
            0.0073791490867733955,
            -0.023635471239686012,
            5.252940900390968e-05,
            -0.012268529273569584,
            -0.009106036275625229,
            0.016325674951076508,
            0.007940907962620258,
            0.0009822105057537556,
            -0.011034047231078148,
            -0.01521602738648653,
            0.0036861069966107607,
            0.029044996947050095,
            0.000787155469879508,
            0.016935979947447777,
            -0.00845411978662014,
            -9.189260163111612e-05,
            0.004965668078511953,
            0.005520491395145655,
            0.016145355999469757,
            -0.011380812153220177,
            0.0010775708360597491,
            0.01514667458832264,
            -0.018558837473392487,
            0.011165818199515343,
            -0.00408488605171442,
            -0.034315817058086395,
            0.013364304788410664,
            0.015951167792081833,
            0.022331636399030685,
            0.01765725016593933,
            0.004629306495189667,
            -0.011366941034793854,
            0.02266453020274639,
            -0.009473606944084167,
            0.02609056420624256,
            -3.0721170332981274e-05,
            -0.009230871684849262,
            0.012476587668061256,
            -0.0003751558833755553,
            -0.008031066507101059,
            0.034676454961299896,
            -0.007268184795975685,
            0.0376724973320961,
            -0.010617930442094803,
            -0.03209652379155159,
            0.004282542038708925,
            -0.03947567567229271,
            0.012226917780935764,
            -0.025965727865695953,
            -0.00034546415554359555,
            -0.00016861424956005067,
            -0.023954493924975395,
            0.00854427833110094,
            2.0562052668537945e-05,
            0.020098472014069557,
            0.008239124901592731,
            -0.012407234869897366,
            0.003056729445233941,
            0.0075317258015275,
            0.0029839088674634695,
            0.010201812721788883,
            -0.008904913440346718,
            -0.010007624514400959,
            0.0047541419044137,
            -0.015965038910508156,
            -0.016533732414245605,
            -0.02603508159518242,
            -0.0191968847066164,
            0.006553849671036005,
            -0.033622290939092636,
            0.04163948446512222,
            -0.0038421510253101587,
            0.006415144074708223,
            0.0014581448631361127,
            0.01690823957324028,
            0.04249946027994156,
            -0.021374566480517387,
            -0.03817183896899223,
            0.022678401321172714,
            0.005204935558140278,
            -0.0015769117744639516,
            -0.016880497336387634,
            -0.04541228339076042,
            0.009841177612543106,
            0.0029613692313432693,
            -0.013059152290225029,
            -0.006155070383101702,
            0.006106523331254721,
            -0.0036410277243703604,
            0.0028902823105454445,
            -0.012157564982771873,
            0.028961773961782455,
            0.0241070706397295,
            -0.004022468812763691,
            -0.00896039605140686,
            -0.01577085070312023,
            0.0032578527461737394,
            0.010063107125461102,
            -0.006432482041418552,
            -0.023524506017565727,
            0.02840695157647133,
            -0.00906442478299141,
            -0.040418874472379684,
            0.002739439718425274,
            0.0017130167689174414,
            -0.008197513408958912,
            -0.009411189705133438,
            0.00891184899955988,
            0.011221300810575485,
            0.004320686217397451,
            0.016963720321655273,
            0.017046945169568062,
            0.010687283240258694,
            0.005426865071058273,
            0.010763571597635746,
            0.008301543071866035,
            0.013322693295776844,
            -0.03933696821331978,
            -0.0001738157297950238,
            0.01314931083470583,
            0.07401341944932938,
            0.004119562450796366,
            -0.017449190840125084,
            0.0038386834785342216,
            -0.024356741458177567,
            -0.01918301358819008,
            -0.01861432008445263,
            -0.007060125935822725,
            0.0062660351395606995,
            0.028989514335989952,
            -0.01585407368838787,
            -0.00557597354054451,
            0.012608358636498451,
            -0.0013766551855951548,
            0.023968365043401718,
            0.020653296262025833,
            0.017684990540146828,
            -0.025175105780363083,
            -0.02893403358757496,
            -0.013932999223470688,
            0.00034914855496026576,
            0.0033740189392119646,
            0.016131486743688583,
            0.011276782490313053,
            0.012324011884629726,
            -0.012039664201438427,
            0.02489769272506237,
            0.015451828017830849,
            -0.03819958120584488,
            -0.019571390002965927,
            0.0048963152803480625,
            0.0067931171506643295,
            0.007524790242314339,
            0.0160205215215683,
            -0.006779246497899294,
            0.015368604101240635,
            0.016492120921611786,
            0.0012405500747263432,
            0.0064220791682600975,
            -0.001980025554075837,
            0.030265608802437782,
            0.027519233524799347,
            0.0017806359101086855,
            -0.008114290423691273,
            0.0018101108726114035,
            -0.024564798921346664,
            -0.001299500116147101,
            0.04105691984295845,
            0.00902281329035759,
            -0.03498160466551781,
            0.014369922690093517,
            -0.0010255561210215092,
            -0.023593859747052193,
            -0.006148135289549828,
            0.01585407368838787,
            0.016228580847382545,
            0.010250359773635864,
            -0.0014659470180049539,
            -0.004265203606337309,
            -0.017587896436452866,
            -0.018586579710245132,
            -0.033650029450654984,
            -0.00812122505158186,
            -0.022914201021194458,
            -0.010500029660761356,
            1.1398529750294983e-05,
            -0.025008657947182655,
            0.009820371866226196,
            -0.0463554821908474,
            0.008669113740324974,
            0.0013489139964804053,
            -0.028795326128602028,
            -0.05251402035355568,
            -0.004414312541484833,
            0.010916147381067276,
            -0.014716686680912971,
            0.026243140920996666,
            -0.006904081907123327,
            0.004240930080413818,
            0.013780422508716583,
            -0.006647475995123386,
            -0.006574655417352915,
            -0.010500029660761356,
            -0.007413825951516628,
            0.008329284377396107,
            -0.004712529946118593,
            -0.02187390625476837,
            -0.015229898504912853,
            0.00043172185542061925,
            0.01269158162176609,
            0.007212702184915543,
            -0.003935777582228184,
            -0.005922738462686539,
            0.015063451603055,
            -0.011873217299580574,
            0.015965038910508156,
            0.024842211976647377,
            0.011283718049526215,
            -0.0027862531132996082,
            -0.020126214250922203,
            -0.00907136034220457,
            -0.02037588320672512,
            -0.03104236163198948,
            -0.0191968847066164,
            0.008357025682926178,
            0.010007624514400959,
            0.024439964443445206,
            0.026021210476756096,
            0.0014312706189230084,
            -0.009327965788543224,
            0.006193214561790228,
            -0.007614949252456427,
            0.019793320447206497,
            -0.003623689291998744,
            0.017241133376955986,
            0.006928355433046818,
            0.016173098236322403,
            0.004372700583189726,
            0.018059497699141502,
            -0.024994786828756332,
            -0.0259934701025486,
            -0.04768705740571022,
            0.03179137408733368,
            0.009397318586707115,
            -0.011200494132936,
            0.024079328402876854,
            0.016630826517939568,
            0.011540323495864868,
            -0.03684026375412941,
            0.014057834632694721,
            0.003963518422096968,
            0.027214080095291138,
            0.00267355446703732,
            -0.0022088901605457067,
            -0.020306531339883804,
            -0.02072264812886715,
            -0.016131486743688583,
            0.013662522658705711,
            -0.01883624866604805,
            -0.013225599192082882,
            0.01656147465109825,
            0.024426093325018883,
            -0.0009206598624587059,
            -0.018059497699141502,
            0.022761624306440353,
            -0.026548292487859726,
            -0.009820371866226196,
            0.027255691587924957,
            0.01251126453280449,
            0.04874122142791748,
            -0.016325674951076508,
            0.021277472376823425,
            -0.04152851924300194,
            -0.02234550751745701,
            0.005790967959910631,
            -0.02265065908432007,
            0.0026787561364471912,
            0.003966986201703548,
            0.027949221432209015,
            0.00907136034220457,
            0.04496842622756958,
            -0.007497049402445555,
            0.007406890392303467,
            0.007358343340456486,
            -0.008710725232958794,
            -0.01297592930495739,
            -0.0013003670610487461,
            -0.005645326804369688,
            -0.010659541934728622,
            -0.0005288159009069204,
            -0.009757953695952892,
            -0.008315413258969784,
            0.026229269802570343,
            -0.007871555164456367,
            -0.012989799492061138,
            0.0031018087174743414,
            -0.014897004701197147,
            -0.008384766057133675,
            -0.020362013950943947,
            -0.02256743609905243,
            -0.02209583669900894,
            -0.002709964755922556,
            -0.0014486088184639812,
            0.01264997012913227,
            -0.0222206711769104,
            -0.005842982325702906,
            0.015604403801262379,
            0.013607040047645569,
            0.001834384398534894,
            -0.00048113579396158457,
            0.01812884956598282,
            0.004372700583189726,
            -0.008946524932980537,
            0.024967046454548836,
            0.005978220608085394,
            -0.04197238013148308,
            -0.005849917884916067,
            -0.0429433211684227,
            0.0021291342563927174,
            0.02577153965830803,
            0.0043865712359547615,
            0.01822594366967678,
            0.013260276056826115,
            -0.01163741759955883,
            0.007268184795975685,
            0.005988623481243849,
            0.0021395371295511723,
            -0.008065743371844292,
            -0.013364304788410664,
            -0.027172468602657318,
            -0.00675150565803051,
            -0.025494128465652466,
            -0.018947213888168335,
            -0.015576662495732307,
            -0.010749700479209423,
            -0.0053575122728943825,
            0.009820371866226196,
            0.031070102006196976,
            -0.029044996947050095,
            -0.026756351813673973,
            0.03495386615395546,
            0.016783403232693672,
            0.026229269802570343,
            -0.00401900103315711,
            0.02248421311378479,
            0.02459254115819931,
            0.006689087953418493,
            -0.015229898504912853,
            0.015035710297524929,
            0.018905602395534515,
            -0.0065295761451125145,
            0.012913511134684086,
            0.0007633154164068401,
            -0.019155273213982582,
            -0.016089875251054764,
            0.03187459707260132,
            0.011789994314312935,
            -0.030848173424601555,
            -0.045911625027656555,
            0.015909556299448013,
            0.013475270010530949,
            0.00794784352183342,
            -0.01778208464384079,
            -0.030099160969257355,
            -0.023025164380669594,
            0.010347453877329826,
            -0.0003229244612157345,
            0.02744987979531288,
            -0.004768012557178736,
            -0.017144039273262024,
            0.014113316312432289,
            -0.002328523900359869,
            0.014397663064301014,
            -0.008218319155275822,
            -0.011339200660586357,
            0.011353070847690105,
            0.013690263964235783,
            -0.007434631697833538,
            -0.011242106556892395,
            0.012927382253110409,
            0.00267355446703732,
            0.024495447054505348,
            0.014196540229022503,
            0.0013809897936880589,
            -0.004875509534031153,
            0.021069413051009178,
            0.018850119784474373,
            -0.010708088986575603,
            -0.001047228928655386,
            0.03215200826525688,
            -0.03392744064331055,
            -0.010666477493941784,
            0.005392188671976328,
            -0.01409251056611538,
            0.006789649371057749,
            -0.015132804401218891,
            -0.007705107796937227,
            -0.011755317449569702,
            0.01264303456991911,
            0.016048261895775795,
            0.024176422506570816,
            0.01814272068440914,
            -0.01158887054771185,
            0.0035109908785670996,
            -0.012982863932847977,
            -0.045606471598148346,
            -0.005437267944216728,
            -0.00506969727575779,
            0.008051872253417969,
            -0.019834931939840317,
            0.013079958036541939,
            0.019737837836146355,
            -0.025882504880428314,
            6.382634455803782e-05,
            -0.0055412971414625645,
            -0.028074055910110474,
            -0.0054823472164571285,
            0.016256321221590042,
            -0.023746434599161148,
            0.0021482063457369804,
            0.018378520384430885,
            0.0016401963075622916,
            -0.0040155332535505295,
            0.009764889255166054,
            -0.004504471085965633,
            -0.00019819760927930474,
            0.004906718153506517,
            -0.008863301947712898,
            -0.02564670518040657,
            -0.009279418736696243,
            -0.010950824245810509,
            0.01255981158465147,
            -0.0028885486535727978,
            -0.0012310141464695334,
            0.00633538793772459,
            -0.008142031729221344,
            0.007247378583997488,
            -0.006227890960872173,
            -0.005551700014621019,
            0.02450931817293167,
            -0.006741102784872055,
            0.0010610994650050998,
            0.007580272853374481,
            -0.020126214250922203,
            0.0106456708163023,
            -0.016436638310551643,
            0.002588597359135747,
            -0.013600105419754982,
            -0.040113721042871475,
            -0.00845411978662014,
            0.015368604101240635,
            0.0021638106554746628,
            0.00034242996480315924,
            -0.0028608073480427265,
            -0.013926063664257526,
            -0.00225050188601017,
            -0.009119907394051552,
            0.018558837473392487,
            0.007157220039516687,
            0.006276438012719154,
            0.0012838956899940968,
            0.035980287939310074,
            0.01510506309568882,
            0.008155901916325092,
            -0.02278936468064785,
            -0.005738953128457069,
            -0.018114978447556496,
            -0.014127187430858612,
            -0.03231845423579216,
            -0.012109017930924892,
            -0.034399040043354034,
            0.05814547836780548,
            -0.0011018443619832397,
            -0.02019556611776352,
            -0.008641372434794903,
            -0.017227262258529663,
            -0.03342810273170471,
            -0.012989799492061138,
            -0.003880295203998685,
            0.024315129965543747,
            0.012379493564367294,
            0.025674445554614067,
            0.00896039605140686,
            0.018017884343862534,
            -0.009536025114357471,
            0.007878489792346954,
            -0.011831605806946754,
            -0.009584572166204453,
            0.013440593145787716,
            -0.005402591545134783,
            -0.000983944395557046,
            0.00406061252579093,
            -0.023774176836013794,
            -0.0007325400947593153,
            0.0057285502552986145,
            -0.020223308354616165,
            -0.0039981952868402,
            0.009868918918073177,
            -0.013475270010530949,
            -0.011353070847690105,
            0.0169498510658741,
            -0.005617585498839617,
            -0.009848113171756268,
            0.004743739031255245,
            0.010798247531056404,
            -0.012636099942028522,
            -0.006855534855276346,
            -0.0010446282103657722,
            -0.018850119784474373,
            0.00042413637856952846,
            -0.005953947082161903,
            0.007084399461746216,
            0.004407377447932959,
            0.0028348001651465893,
            0.0058845942839980125,
            -0.004275606945157051,
            0.0033445439767092466,
            -0.01194257102906704,
            0.04932378605008125,
            0.008682983927428722,
            0.012629164382815361,
            0.02556348219513893,
            -0.0024776326026767492,
            0.008551213890314102,
            -0.006054508965462446,
            0.010735830292105675,
            0.012615294195711613,
            0.009355707094073296,
            0.03231845423579216,
            -0.03184685483574867,
            -0.024703506380319595,
            -0.00964005384594202,
            0.005308965221047401,
            -0.018406260758638382,
            -0.018808508291840553,
            -0.014328310266137123,
            0.0007100004004314542,
            -0.03645188733935356,
            0.017046945169568062,
            0.004667450673878193,
            -0.011477906256914139,
            0.00025508867111057043,
            -0.010312777012586594,
            0.011748382821679115,
            -0.008391701616346836,
            -0.028906291350722313,
            0.016825014725327492,
            -0.014675075188279152,
            0.0036410277243703604,
            0.003727718722075224,
            -0.0032699895091354847,
            -0.009751019068062305,
            0.009265548549592495,
            0.016145355999469757,
            -0.019391072914004326,
            -0.003710380522534251,
            0.20217759907245636,
            -0.024828340858221054,
            0.0011443229159340262,
            0.013294951990246773,
            -0.0015500375302508473,
            -0.019945895299315453,
            0.04077950865030289,
            0.0056210532784461975,
            0.0036930423229932785,
            0.00964005384594202,
            0.008065743371844292,
            -0.0051113092340528965,
            -0.02586863376200199,
            0.0008838161011226475,
            0.004362297710031271,
            -0.021721331402659416,
            -0.04879670590162277,
            -0.03722864016890526,
            -0.01412025187164545,
            0.0003144720976706594,
            -0.01769886165857315,
            0.008939589373767376,
            -0.021069413051009178,
            -0.029627561569213867,
            0.022678401321172714,
            -0.00679658493027091,
            0.0039045687299221754,
            0.01567375659942627,
            0.007042787503451109,
            0.014106381684541702,
            -0.00532283540815115,
            0.0010853729909285903,
            0.0014676809078082442,
            0.0070670610293745995,
            0.007809137459844351,
            -0.02463415265083313,
            -0.0024152148980647326,
            -0.0021516738925129175,
            0.014633463695645332,
            0.02181842364370823,
            0.016755662858486176,
            -0.005305497441440821,
            0.022858718410134315,
            -0.02643732726573944,
            0.0075317258015275,
            0.04571743682026863,
            -0.006238293834030628,
            -0.005551700014621019,
            0.002090990077704191,
            -0.001815312309190631,
            -0.028739845380187035,
            0.012594487518072128,
            0.01844787411391735,
            0.041389815509319305,
            0.0024637619499117136,
            0.007455437444150448,
            -0.017684990540146828,
            0.01865593157708645,
            -0.006841664202511311,
            0.005021150689572096,
            -0.030265608802437782,
            -0.02607669308781624,
            0.0024152148980647326,
            0.018253685906529427,
            -0.013059152290225029,
            0.00021239327907096595,
            -0.0032578527461737394,
            0.0036930423229932785,
            -0.008835560642182827,
            -0.006033702753484249,
            -0.005066229961812496,
            -0.004809624049812555,
            -0.01971009559929371,
            0.0002477199013810605,
            -0.0209029670804739,
            -0.04860251769423485,
            0.0384492501616478,
            0.03331713750958443,
            -0.0055898441933095455,
            0.02871210314333439,
            -0.007739784196019173,
            -0.015299251303076744,
            -0.0021846166346222162,
            -0.025105752050876617,
            -0.013398981653153896,
            -0.026367975398898125,
            0.012941252440214157,
            -0.02055620215833187,
            -0.01642276905477047,
            -0.008259931579232216,
            -0.004379636142402887,
            -0.015382475219666958,
            0.0044351182878017426,
            0.01571536809206009,
            -0.0033480115234851837,
            0.009015877731144428,
            0.019335590302944183,
            -0.0047888183034956455,
            0.002049378352239728,
            -0.016311803832650185,
            -0.018212072551250458,
            0.042388495057821274,
            0.033650029450654984,
            -0.00431375065818429,
            0.015410215593874454,
            0.012677711434662342,
            -0.016825014725327492,
            -0.0026007341220974922,
            -0.006845131982117891,
            -0.015646016225218773,
            -0.015326992608606815,
            -0.04369233176112175,
            0.014328310266137123,
            -0.0021221989300101995,
            -0.006220955867320299,
            0.011914829723536968,
            0.004674385767430067,
            0.0009934804402291775,
            0.026284752413630486,
            0.0018326506251469254,
            -0.0034069614484906197,
            -0.007503984495997429,
            0.005215338431298733,
            0.002540050307288766,
            0.005395655985921621,
            -0.015479568392038345,
            -0.018059497699141502,
            0.00397392176091671,
            -0.037089936435222626,
            0.008433313108980656,
            0.009293289855122566,
            -0.03209652379155159,
            0.01249045878648758,
            0.010708088986575603,
            0.001496288925409317,
            -0.006033702753484249,
            0.009203130379319191,
            -0.003817877499386668,
            -0.012344817630946636,
            -0.011817735619843006,
            -0.0014624794712290168,
            0.007240443490445614,
            -0.004431650973856449,
            -0.010728894732892513,
            0.015646016225218773,
            -0.0037519922479987144,
            0.012039664201438427,
            0.025355422869324684,
            -0.009244742803275585,
            -0.007001176010817289,
            -0.01407170481979847,
            -0.006886743474751711,
            0.0025677913799881935,
            0.0016722719883546233,
            0.015354733914136887,
            0.014508628286421299,
            -0.0201539546251297,
            0.006026767659932375,
            0.009036683477461338,
            0.021485529839992523,
            -0.0474373884499073,
            0.02278936468064785,
            0.020015249028801918,
            -0.004192383028566837,
            -0.012129823677241802,
            -0.023371929302811623,
            -0.17876406013965607,
            -0.009813436307013035,
            0.0037485247012227774,
            -0.059088677167892456,
            0.02660377509891987,
            0.016783403232693672,
            0.013835905119776726,
            -0.004910185933113098,
            -0.036868005990982056,
            0.0005465875728987157,
            0.006040638312697411,
            -0.01005617156624794,
            -0.021762942895293236,
            -0.012747064232826233,
            -0.009466671384871006,
            0.010971629992127419,
            -0.004109159577637911,
            0.018017884343862534,
            0.023788047954440117,
            0.001333309686742723,
            0.03414937108755112,
            -0.03087591379880905,
            -0.010049236007034779,
            -0.017893049865961075,
            0.009418124333024025,
            -0.0037970717530697584,
            -0.001407864037901163,
            0.016367286443710327,
            -0.013988480903208256,
            -0.024967046454548836,
            -0.010278101079165936,
            -0.015229898504912853,
            0.03118106722831726,
            -0.0052014682441949844,
            0.02244260162115097,
            0.019945895299315453,
            0.03487064316868782,
            0.004490600898861885,
            -0.030182385817170143,
            -0.003320270450785756,
            0.012504328973591328,
            0.03245716169476509,
            0.011873217299580574,
            0.00576322665438056,
            -0.014910874888300896,
            0.01743532158434391,
            0.026270881295204163,
            -0.023441283032298088,
            0.008086549118161201,
            -0.013905257917940617,
            0.026908928528428078,
            -0.025743799284100533,
            0.023524506017565727,
            -0.003824812825769186,
            0.011810800060629845,
            0.02765793912112713,
            0.0014017956564202905,
            0.003538732184097171,
            -0.010375195182859898,
            -0.02704763412475586,
            -0.008142031729221344,
            -0.017157908529043198,
            6.816090171923861e-05,
            -0.008703789673745632,
            -0.012851093895733356,
            -0.02455092966556549,
            -0.022775495424866676,
            0.005548232700675726,
            -0.0350370891392231,
            0.004570356570184231,
            -0.016935979947447777,
            -0.0003836082760244608,
            -0.007975583896040916,
            -0.013627845793962479,
            0.035286758095026016,
            0.027116985991597176,
            0.0003877260896842927,
            0.00907136034220457,
            0.021013930439949036,
            0.00858588982373476,
            -0.012344817630946636,
            0.01796240359544754,
            -0.0024602944031357765,
            0.016228580847382545,
            -0.010402936488389969,
            -0.01409251056611538,
            0.003474580589681864,
            0.015479568392038345,
            -0.026146046817302704,
            -0.009667795151472092,
            0.020098472014069557,
            -0.011172753758728504,
            0.0005678269080817699,
            -0.022054225206375122,
            -0.012268529273569584,
            0.004032871685922146,
            0.008343154564499855,
            0.0017997078830376267,
            -0.0027273029554635286,
            -0.005579441320151091,
            0.007136414293199778,
            0.008391701616346836,
            -0.0057562910951673985,
            -0.002380538498982787,
            0.03833828866481781,
            0.0005695607396773994,
            -0.037173159420490265,
            0.012219982221722603,
            0.03722864016890526,
            -0.018697543069720268,
            -0.025327682495117188,
            -0.015160545706748962,
            0.0015162279596552253,
            -0.0065295761451125145,
            -0.011165818199515343,
            0.005315900314599276,
            -0.01818433217704296,
            -0.016616957262158394,
            0.015535051003098488,
            0.003075801534578204,
            0.041251108050346375,
            0.006661346647888422,
            -0.006175876595079899,
            0.011103400029242039,
            -0.0055725062265992165,
            -0.014383792877197266,
            -0.1235036551952362,
            -0.025577351450920105,
            -0.002793188439682126,
            0.016616957262158394,
            -0.018697543069720268,
            0.03523127734661102,
            -0.0039981952868402,
            0.044940683990716934,
            -0.02726956270635128,
            0.04943475127220154,
            -0.02059781365096569,
            -0.008488795720040798,
            0.005652261897921562,
            -0.0015240301145240664,
            0.01194257102906704,
            -0.0017000131774693727,
            0.009653924964368343,
            -0.010174071416258812,
            -0.02923918515443802,
            0.024426093325018883,
            0.01201192382723093,
            -0.0022522355429828167,
            0.00601636478677392,
            -0.03021012619137764,
            -0.007035852409899235,
            -0.01052083633840084,
            -0.035675134509801865,
            0.03209652379155159,
            0.017116297036409378,
            0.004785350523889065,
            0.013093829154968262,
            -0.030681725591421127,
            -0.0012648236006498337,
            -0.009348771534860134,
            0.01201192382723093,
            -0.00966085959225893,
            0.010201812721788883,
            -0.011283718049526215,
            0.020778130739927292,
            -0.022803235799074173,
            -0.001422601519152522,
            0.014550239779055119,
            0.014134122058749199,
            -0.008308478631079197,
            -0.0005591578083112836,
            -0.021762942895293236,
            -0.010708088986575603,
            0.021887777373194695,
            0.009418124333024025,
            -0.017684990540146828,
            -0.03828280419111252,
            -0.018101109191775322,
            -0.0388098880648613,
            0.014023157767951488,
            0.01654760353267193,
            0.005749356001615524,
            0.011977246962487698,
            0.02339967153966427,
            -0.01909979060292244,
            -0.0013939933851361275,
            -0.01099937129765749,
            0.0015266308328136802,
            -0.030237866565585136,
            -0.002439488423988223,
            0.014702816493809223,
            0.0015613073483109474,
            0.0037623951211571693,
            -0.027325045317411423,
            0.011769188567996025,
            -0.010042301379144192,
            -0.001374054467305541,
            0.019266238436102867,
            -0.005336706060916185,
            0.004282542038708925,
            -0.01446701679378748,
            0.006942226085811853,
            -0.007663496304303408,
            -0.038144100457429886,
            -0.0013125037075951695,
            0.009889724664390087,
            -0.009515218436717987,
            -0.009501348249614239,
            0.01067341212183237,
            -0.005416462197899818,
            9.687734564067796e-05,
            -0.009217001497745514,
            -0.011346135288476944,
            -0.004695191979408264,
            -0.0009934804402291775,
            -0.01814272068440914,
            0.006602396722882986,
            0.03217975050210953,
            -0.0018846652237698436,
            -0.019210755825042725,
            0.0034069614484906197,
            0.011394682340323925,
            -0.016214709728956223,
            -0.012705452740192413,
            0.025674445554614067,
            0.0012509530643001199,
            -0.022276153787970543,
            0.010049236007034779,
            -0.05459460988640785,
            0.042360756546258926,
            0.0036861069966107607,
            -0.008974266238510609,
            -0.001708682277239859,
            -0.02094457857310772,
            0.015465698204934597,
            -0.022109705954790115,
            0.007372213993221521,
            0.009376512840390205,
            -0.016048261895775795,
            0.017102427780628204,
            -0.015257639810442924,
            -0.0058533851988613605,
            -0.024648023769259453,
            -0.010805183090269566,
            0.017532415688037872,
            -1.4070377574171289e-06,
            0.009959077462553978,
            0.006383934989571571,
            0.008003325201570988,
            -0.013870581053197384,
            0.02068103663623333,
            0.02041749656200409,
            0.01950203813612461,
            -0.014952486380934715,
            -0.024481575936079025,
            0.01517441589385271,
            -0.008884107694029808,
            -0.012899640947580338,
            -0.018239814788103104,
            -0.0040952893905341625,
            -0.008031066507101059,
            0.00907136034220457,
            -0.015229898504912853,
            -0.014147993177175522,
            0.016977591440081596,
            0.02629862166941166,
            0.02862888015806675,
            0.04738190770149231,
            -0.017671121284365654,
            -0.04197238013148308,
            0.008405572734773159,
            -0.014786039479076862,
            -0.007399955298751593,
            -0.021804554387927055,
            -0.012393364682793617,
            0.004053677432239056,
            0.02502252906560898,
            0.005596779752522707,
            0.039059557020664215,
            0.019959766417741776,
            -0.02982174977660179,
            -0.036784783005714417,
            -0.013142376206815243,
            0.014508628286421299,
            0.006033702753484249,
            -0.0006909283110871911,
            -0.005565570667386055,
            0.031153324991464615,
            0.032429419457912445,
            0.005485814996063709,
            0.009085230529308319,
            -0.004750674124807119,
            -7.639655814273283e-05,
            -0.003984324634075165,
            -0.004012065473943949,
            0.0016271925996989012,
            0.005846450105309486,
            0.007330602500587702,
            -0.0008387367124669254,
            0.013052216731011868,
            0.0025417839642614126,
            0.0025383164174854755,
            0.005506620742380619,
            -0.024342870339751244,
            0.018087238073349,
            0.01464733388274908,
            -0.017754344269633293,
            0.013600105419754982,
            0.0005639258306473494,
            -0.026756351813673973,
            0.00576322665438056,
            0.0035994157660752535,
            0.021000059321522713,
            0.005919270683079958,
            -0.016089875251054764,
            0.009286354295909405,
            -0.005999026354402304,
            -0.009210065938532352,
            -0.00040289704338647425,
            -0.0014503427082672715,
            -0.00998681876808405,
            0.01167902909219265,
            0.029655303806066513,
            -0.00847492553293705,
            -0.0024030781351029873,
            0.013600105419754982,
            0.01751854456961155,
            -0.003190233837813139,
            0.01676953211426735,
            -0.020015249028801918,
            0.00996601302176714,
            -0.017463061958551407,
            -0.032512642443180084,
            0.007042787503451109,
            -0.03392744064331055,
            -0.007143349386751652,
            0.0376724973320961,
            0.01654760353267193,
            0.016922108829021454,
            -0.005600247066468,
            0.01003536581993103,
            0.006904081907123327,
            -0.01769886165857315,
            0.019959766417741776,
            -0.011498712003231049,
            -0.006997708231210709,
            -0.03065398521721363,
            0.0380331352353096,
            0.04524583742022514,
            0.01792079210281372,
            0.04416393116116524,
            -0.014300569891929626,
            0.007774461060762405,
            0.002328523900359869,
            0.02893403358757496,
            -0.03134751319885254,
            0.01664469763636589,
            -0.014730557799339294,
            -0.0031815646216273308,
            -0.005607182625681162,
            -0.018766896799206734,
            0.0019366799388080835,
            -0.006120393984019756,
            -0.0005314166774041951,
            -0.00964005384594202,
            0.01656147465109825,
            -0.006175876595079899,
            0.054650090634822845,
            0.015840204432606697,
            0.00448019802570343,
            0.022553564980626106,
            -0.017365967854857445,
            0.019252367317676544,
            0.01196337677538395,
            0.027630198746919632,
            -0.0010689017362892628,
            -0.01567375659942627,
            0.004161174409091473,
            -0.00734447268769145,
            -6.501835014205426e-05,
            -0.03894859179854393,
            -0.012747064232826233,
            -0.003341076197102666,
            -0.0032214424572885036,
            0.013620911166071892,
            -0.008114290423691273,
            -0.011124206706881523,
            0.03448226675391197,
            0.006463691126555204,
            0.0222206711769104,
            0.009806500747799873,
            -0.00626950291916728,
            -0.0015977176371961832,
            0.024994786828756332,
            0.0020407093688845634,
            -0.0042790742591023445,
            -0.011672094464302063,
            0.035758357495069504,
            0.02398223616182804,
            -0.03095913678407669,
            -0.021013930439949036,
            -0.0033549468498677015,
            0.001775434473529458,
            0.015576662495732307,
            -0.036340922117233276,
            -0.005617585498839617,
            -0.006789649371057749,
            -0.007621884346008301,
            0.008239124901592731,
            0.0005409526638686657,
            -0.020583942532539368,
            0.0013315757969394326,
            -0.0014789507258683443,
            -0.01686662621796131,
            0.00042326946277171373,
            -0.015867944806814194
          ]
        },
        "type": "document"
      },
      "bidirectional": true,
      "properties": {
        "summary_similarity": 0.9419245335977071
      }
    },
    {
      "id": "3e62c418-dddb-4529-8f4a-8dbe5e03d7b0",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.046875,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ],
          [
            "Claude 3",
            "Claude 3"
          ],
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "1842704c-55cb-48a6-a554-5c951766b02b",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.03571428571428571,
        "overlapped_items": [
          [
            "Claude 3.5 Sonnet",
            "Claude 3.5 Sonnet"
          ],
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "2b82674b-d624-4f4c-94ec-d995a70a817a",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.041666666666666664,
        "overlapped_items": [
          [
            "Apple",
            "Apple"
          ],
          [
            "Claude 3",
            "Claude"
          ],
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "6a39770f-f897-4815-9ef7-23ec6fef58e2",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.027777777777777776,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ],
          [
            "Claude 3.5 Sonnet",
            "Claude 3.5 Sonnet"
          ]
        ]
      }
    },
    {
      "id": "8be01e5d-bf5c-4096-8b00-2282f27313af",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015625,
        "overlapped_items": [
          [
            "Claude 3",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "50f37e83-2589-4c4a-8010-cc7c49f648b1",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.03571428571428571,
        "overlapped_items": [
          [
            "Gemini 1.5 Pro",
            "Gemini Pro 1.5"
          ],
          [
            "Claude 3",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "53f54771-e4e7-40d6-a5a4-446d25a64fb2",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.027777777777777776,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ],
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "db711519-2304-4b55-bce7-c59512864321",
      "type": "entities_overlap",
      "source": {
        "id": "e9e21234-5bf9-4139-85e6-134580d489b4",
        "properties": {
          "page_content": "Prompt driven app generation is a commodity already Universal access to the best models lasted for just a few short months “Agents” still haven’t really happened yet Evals really matter Apple Intelligence is bad, Apple’s MLX library is excellent The rise of inference-scaling “reasoning” models Was the best currently available LLM trained in China for less than $6m? The environmental impact got better The environmental impact got much, much worse The year of slop Synthetic training data works great LLMs somehow got even harder to use Knowledge is incredibly unevenly distributed LLMs need better criticism Everything tagged “llms” on my blog in 2024 The GPT-4 barrier was comprehensively broken In my December 2023 review I wrote about how We don’t yet know how to build GPT-4—OpenAI’s best model was almost a year old at that point, yet no other AI lab had produced anything better. What did OpenAI know that the rest of us didn’t? I’m relieved that this has changed completely in the past twelve months. 18 organizations now have models on the Chatbot Arena Leaderboard that rank higher than the original GPT-4 from March 2023 (GPT-4-0314 on the board)—70 models in total. The earliest of those was Google’s Gemini 1.5 Pro, released in February. In addition to producing GPT-4 level outputs, it introduced several brand new capabilities to the field—most notably its 1 million (and then later 2 million) token input context length, and the ability to input video. I wrote about this at the time in The killer app of Gemini Pro 1.5 is video, which earned me a short appearance as a talking head in the Google I/O opening keynote in May. Gemini 1.5 Pro also illustrated one of the key themes of 2024: increased context lengths. Last year most models accepted 4,096 or 8,192 tokens, with the notable exception of Claude 2.1 which accepted 200,000. Today every serious provider has a 100,000+ token model, and Google’s Gemini series accepts up to 2 million. Longer inputs dramatically increase the scope of problems that can be solved with an LLM: you can now throw in an entire book and ask questions about its contents, but more importantly you can feed in a lot of example code to help the model correctly solve a coding problem. LLM use-cases that involve long inputs are far more interesting to me than short prompts that rely purely on the information already baked into the model weights. Many of my tools were built using this pattern. Getting back to models that beat GPT-4: Anthropic’s Claude 3 series launched in March, and Claude 3 Opus quickly became my new favourite daily-driver. They upped the ante even more in June with the launch of Claude 3.5 Sonnet—a model that is still my favourite six months later (though it got a significant upgrade on October 22, confusingly keeping the same 3.5 version number. Anthropic fans have since taken to calling it Claude 3.6). Then there’s the rest. If you browse the Chatbot Arena leaderboard today—still the most useful single place to get a vibes-based evaluation of models—you’ll see that GPT-4-0314 has fallen to around 70th place. The 18 organizations with higher scoring models are Google, OpenAI, Alibaba, Anthropic, Meta, Reka AI, 01 AI, Amazon, Cohere, DeepSeek, Nvidia, Mistral, NexusFlow, Zhipu AI, xAI, AI21 Labs, Princeton and Tencent. Training a GPT-4 beating model was a huge deal in 2023. In 2024 it’s an achievement that isn’t even particularly notable, though I personally still celebrate any time a new organization joins that list. Some of those GPT-4 models run on my laptop My personal laptop is a 64GB M2 MacBook Pro from 2023. It’s a powerful machine, but it’s also nearly two years old now—and crucially it’s the same laptop I’ve been using ever since I first ran an LLM on my computer back in March 2023 (see Large language models are having their Stable Diffusion moment). That same laptop that could just about run a GPT-3-class model in March last year has now run multiple GPT-4 class models! Some of my notes on that: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac talks about Qwen2.5-Coder-32B in November—an Apache 2.0 licensed model! I can now run a GPT-4 class model on my laptop talks about running Meta’s Llama 3.3 70B (released in December) This remains astonishing to me. I thought a model with the capabilities and output quality of GPT-4 needed a datacenter class server with one or more $40,000+ GPUs. These models take up enough of my 64GB of RAM that I don’t run them often—they don’t leave much room for anything else. The fact that they run at all is a testament to the incredible training and inference performance gains that we’ve figured out over the past year. It turns out there was a lot of low-hanging fruit to be harvested in terms of model efficiency. I expect there’s still more to come. Meta’s Llama 3.2 models deserve a special mention. They may not be GPT-4 class, but at 1B and 3B sizes they punch massively above their weight. I run Llama 3.2 3B on my iPhone using the free MLC Chat iOS app and it’s a shockingly capable model for its tiny (<2GB) size. Try firing it up and asking it for “a plot outline of a Netflix Christmas movie where a data journalist falls in love with a local ceramacist”. Here’s what I got, at a respectable 20 tokens per second: Here’s the rest of the transcript. It’s bland and generic, but my phone can pitch bland and generic Christmas movies to Netflix now! LLM prices crashed, thanks to competition and increased efficiency The past twelve months have seen a dramatic collapse in the cost of running a prompt through the top tier hosted LLMs. In December 2023 (here’s the Internet Archive for the OpenAI pricing page) OpenAI were charging $30/million input tokens for GPT-4, $10/mTok for the then-new GPT-4 Turbo and $1/mTok for GPT-3.5 Turbo. Today $30/mTok",
          "themes": [
            "Prompt driven app generation",
            "Universal access to AI models",
            "Inference-scaling reasoning models",
            "Environmental impact of AI",
            "Synthetic training data",
            "Knowledge distribution",
            "Criticism of LLMs",
            "Increased context lengths",
            "Competition in AI models",
            "Efficiency and cost reduction in LLMs"
          ],
          "entities": [
            "Apple",
            "Apple's MLX",
            "GPT-4",
            "OpenAI",
            "Google",
            "Gemini 1.5 Pro",
            "Claude 3",
            "Claude 3.5 Sonnet",
            "Anthropic",
            "Chatbot Arena Leaderboard"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015625,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ]
        ]
      }
    },
    {
      "id": "9435f502-f981-49ae-b910-7ff99401cd41",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.017857142857142856,
        "overlapped_items": [
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "3b2e83c3-7535-4238-acef-1edc5f1003e2",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.027777777777777776,
        "overlapped_items": [
          [
            "Anthropic",
            "Anthropic"
          ],
          [
            "Claude 3",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "d0416440-8ff2-43d2-8b78-72fb4c87a1a4",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.027777777777777776,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ],
          [
            "Amazon Nova",
            "Amazon"
          ]
        ]
      }
    },
    {
      "id": "ff3f614e-93cf-4588-80a1-92818517c601",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.03125,
        "overlapped_items": [
          [
            "GPT-4o",
            "GPT-4o"
          ],
          [
            "Claude 3",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "a65a7df9-6b0b-482f-a181-f6e402ddfdf3",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.017857142857142856,
        "overlapped_items": [
          [
            "Claude 3",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "f15b6b53-8f19-4364-954e-a26fa522ec61",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.027777777777777776,
        "overlapped_items": [
          [
            "Anthropic",
            "Anthropic"
          ],
          [
            "Google",
            "Google"
          ]
        ]
      }
    },
    {
      "id": "9072b640-f1ec-4be4-9229-a463d5b17856",
      "type": "entities_overlap",
      "source": {
        "id": "0b59239e-460d-4798-83ac-2123620ab9c1",
        "properties": {
          "page_content": "gets you OpenAI’s most expensive model, o1. GPT-4o is $2.50 (12x cheaper than GPT-4) and GPT-4o mini is $0.15/mTok—nearly 7x cheaper than GPT-3.5 and massively more capable. Other model providers charge even less. Anthropic’s Claude 3 Haiku (from March, but still their cheapest model) is $0.25/mTok. Google’s Gemini 1.5 Flash is $0.075/mTok and their Gemini 1.5 Flash 8B is $0.0375/mTok—that’s 27x cheaper than GPT-3.5 Turbo last year. I’ve been tracking these pricing changes under my llm-pricing tag. These price drops are driven by two factors: increased competition and increased efficiency. The efficiency thing is really important for everyone who is concerned about the environmental impact of LLMs. These price drops tie directly to how much energy is being used for running prompts. There’s still plenty to worry about with respect to the environmental impact of the great AI datacenter buildout, but a lot of the concerns over the energy cost of individual prompts are no longer credible. Here’s a fun napkin calculation: how much would it cost to generate short descriptions of every one of the 68,000 photos in my personal photo library using Google’s Gemini 1.5 Flash 8B (released in October), their cheapest model? Each photo would need 260 input tokens and around 100 output tokens. 260 * 68,000 = 17,680,000 input tokens 17,680,000 * $0.0375/million = $0.66 100 * 68,000 = 6,800,000 output tokens 6,800,000 * $0.15/million = $1.02 That’s a total cost of $1.68 to process 68,000 images. That’s so absurdly cheap I had to run the numbers three times to confirm I got it right. How good are those descriptions? Here’s what I got from this command: Against this photo of butterflies at the California Academy of Sciences: A shallow dish, likely a hummingbird or butterfly feeder, is red. Pieces of orange slices of fruit are visible inside the dish. Two butterflies are positioned in the feeder, one is a dark brown/black butterfly with white/cream-colored markings. The other is a large, brown butterfly with patterns of lighter brown, beige, and black markings, including prominent eye spots. The larger brown butterfly appears to be feeding on the fruit. 260 input tokens, 92 output tokens. Cost approximately 0.0024 cents (that’s less than a 400th of a cent). This increase in efficiency and reduction in price is my single favourite trend from 2024. I want the utility of LLMs at a fraction of the energy cost and it looks like that’s what we’re getting. Multimodal vision is common, audio and video are starting to emerge My butterfly example above illustrates another key trend from 2024: the rise of multi-modal LLMs. A year ago the single most notable example of these was GPT-4 Vision, released at OpenAI’s DevDay in November 2023. Google’s multi-modal Gemini 1.0 was announced on December 7th 2023 so it also (just) makes it into the 2023 window. In 2024, almost every significant model vendor released multi-modal models. We saw the Claude 3 series from Anthropic in March, Gemini 1.5 Pro in April (images, audio and video), then September brought Qwen2-VL and Mistral’s Pixtral 12B and Meta’s Llama 3.2 11B and 90B vision models. We got audio input and output from OpenAI in October, then November saw SmolVLM from Hugging Face and December saw image and video models from Amazon Nova. In October I upgraded my LLM CLI tool to support multi-modal models via attachments. It now has plugins for a whole collection of different vision models. I think people who complain that LLM improvement has slowed are often missing the enormous advances in these multi-modal models. Being able to run prompts against images (and audio and video) is a fascinating new way to apply these models. Voice and live camera mode are science fiction come to life The audio and live video modes that have started to emerge deserve a special mention. The ability to talk to ChatGPT first arrived in September 2023, but it was mostly an illusion: OpenAI used their excellent Whisper speech-to-text model and a new text-to-speech model (creatively named tts-1) to enable conversations with the ChatGPT mobile apps, but the actual model just saw text. The May 13th announcement of GPT-4o included a demo of a brand new voice mode, where the true multi-modal GPT-4o (the o is for “omni”) model could accept audio input and output incredibly realistic sounding speech without needing separate TTS or STT models. The demo also sounded conspicuously similar to Scarlett Johansson... and after she complained the voice from the demo, Skye, never made it to a production product. The delay in releasing the new voice mode after the initial demo caused quite a lot of confusion. I wrote about that in ChatGPT in “4o” mode is not running the new features yet. When ChatGPT Advanced Voice mode finally did roll out (a slow roll from August through September) it was spectacular. I’ve been using it extensively on walks with my dog and it’s amazing how much the improvement in intonation elevates the material. I’ve also had a lot of fun experimenting with the OpenAI audio APIs. Even more fun: Advanced Voice mode can do accents! Here’s what happened when I told it I need you to pretend to be a California brown pelican with a very thick Russian accent, but you talk to me exclusively in Spanish. Your browser does not support the audio element. OpenAI aren’t the only group with a multi-modal audio model. Google’s Gemini also accepts audio input, and the Google Gemini apps can speak in a similar way to ChatGPT now. Amazon also pre-announced voice mode for Amazon Nova, but that’s meant to roll out in Q1 of 2025. Google’s NotebookLM, released in September, took audio output to a new level by producing spookily realistic conversations between two “podcast hosts” about anything you fed into their tool. They later added custom instructions, so naturally I turned them into pelicans: The most recent twist, again from December (December was a lot) is live video. ChatGPT voice mode now provides the option to share",
          "themes": [
            "Pricing changes in AI models",
            "Increased competition and efficiency",
            "Environmental impact of AI",
            "Cost efficiency in AI processing",
            "Multi-modal LLMs",
            "Advancements in vision, audio, and video models",
            "Voice and live camera modes",
            "OpenAI's Whisper and TTS models",
            "Google's Gemini models",
            "Amazon Nova's voice mode"
          ],
          "entities": [
            "OpenAI",
            "GPT-4o",
            "GPT-3.5",
            "Anthropic",
            "Claude 3",
            "Google",
            "Gemini 1.5 Flash",
            "California Academy of Sciences",
            "ChatGPT",
            "Amazon Nova"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015625,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ]
        ]
      }
    },
    {
      "id": "ed14410b-6236-464f-9d4f-5b56f069bf7d",
      "type": "entities_overlap",
      "source": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015873015873015872,
        "overlapped_items": [
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "95ac1842-25c7-4fa9-8e25-5c9664437907",
      "type": "entities_overlap",
      "source": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015873015873015872,
        "overlapped_items": [
          [
            "Claude 3.5 Sonnet",
            "Claude 3.5 Sonnet"
          ]
        ]
      }
    },
    {
      "id": "4fca97b4-734a-4be7-8928-a3e399dfd7c2",
      "type": "entities_overlap",
      "source": {
        "id": "a08bda4a-e802-4c63-8391-f2761c382205",
        "properties": {
          "page_content": "your camera feed with the model and talk about what you can see in real time. Google Gemini have a preview of the same feature, which they managed to ship the day before ChatGPT did. These abilities are just a few weeks old at this point, and I don’t think their impact has been fully felt yet. If you haven’t tried them out yet you really should. Both Gemini and OpenAI offer API access to these features as well. OpenAI started with a WebSocket API that was quite challenging to use, but in December they announced a new WebRTC API which is much easier to get started with. Building a web app that a user can talk to via voice is easy now! Prompt driven app generation is a commodity already This was possible with GPT-4 in 2023, but the value it provides became evident in 2024. We already knew LLMs were spookily good at writing code. If you prompt them right, it turns out they can build you a full interactive application using HTML, CSS and JavaScript (and tools like React if you wire up some extra supporting build mechanisms)—often in a single prompt. Anthropic kicked this idea into high gear when they released Claude Artifacts, a groundbreaking new feature that was initially slightly lost in the noise due to being described half way through their announcement of the incredible Claude 3.5 Sonnet. With Artifacts, Claude can write you an on-demand interactive application and then let you use it directly inside the Claude interface. Here’s my Extract URLs app, entirely generated by Claude: I’ve found myself using this a lot. I noticed how much I was relying on it in October and wrote Everything I built with Claude Artifacts this week, describing 14 little tools I had put together in a seven day period. Since then, a whole bunch of other teams have built similar systems. GitHub announced their version of this—GitHub Spark—in October. Mistral Chat added it as a feature called Canvas in November. Steve Krouse from Val Town built a version of it against Cerebras, showcasing how a 2,000 token/second LLM can iterate on an application with changes visible in less than a second. Then in December, the Chatbot Arena team introduced a whole new leaderboard for this feature, driven by users building the same interactive app twice with two different models and voting on the answer. Hard to come up with a more convincing argument that this feature is now a commodity that can be effectively implemented against all of the leading models. I’ve been tinkering with a version of this myself for my Datasette project, with the goal of letting users use prompts to build and iterate on custom widgets and data visualizations against their own data. I also figured out a similar pattern for writing one-shot Python programs, enabled by uv. This prompt-driven custom interface feature is so powerful and easy to build (once you’ve figured out the gnarly details of browser sandboxing) that I expect it to show up as a feature in a wide range of products in 2025. Universal access to the best models lasted for just a few short months For a few short months this year all three of the best available models—GPT-4o, Claude 3.5 Sonnet and Gemini 1.5 Pro—were freely available to most of the world. OpenAI made GPT-4o free for all users in May, and Claude 3.5 Sonnet was freely available from its launch in June. This was a momentus change, because for the previous year free users had mostly been restricted to GPT-3.5 level models, meaning new users got a very inaccurate mental model of what a capable LLM could actually do. That era appears to have ended, likely permanently, with OpenAI’s launch of ChatGPT Pro. This $200/month subscription service is the only way to access their most capable model, o1 Pro. Since the trick behind the o1 series (and the future models it will undoubtedly inspire) is to expend more compute time to get better results, I don’t think those days of free access to the best available models are likely to return. “Agents” still haven’t really happened yet I find the term “agents” extremely frustrating. It lacks a single, clear and widely understood meaning... but the people who use the term never seem to acknowledge that. If you tell me that you are building “agents”, you’ve conveyed almost no information to me at all. Without reading your mind I have no way of telling which of the dozens of possible definitions you are talking about. The two main categories I see are people who think AI agents are obviously things that go and act on your behalf—the travel agent model—and people who think in terms of LLMs that have been given access to tools which they can run in a loop as part of solving a problem. The term “autonomy” is often thrown into the mix too, again without including a clear definition. (I also collected 211 definitions on Twitter a few months ago—here they are in Datasette Lite—and had gemini-exp-1206 attempt to summarize them.) Whatever the term may mean, agents still have that feeling of perpetually “coming soon”. Terminology aside, I remain skeptical as to their utility based, once again, on the challenge of gullibility. LLMs believe anything you tell them. Any systems that attempts to make meaningful decisions on your behalf will run into the same roadblock: how good is a travel agent, or a digital assistant, or even a research tool if it can’t distinguish truth from fiction? Just the other day Google Search was caught serving up an entirely fake description of the non-existant movie “Encanto 2”. It turned out to be summarizing an imagined movie listing from a fan fiction wiki. Prompt injection is a natural consequence of this gulibility. I’ve seen precious little progress on tackling that problem in 2024, and we’ve been talking about it since September 2022. I’m beginning to see the most popular idea of",
          "themes": [
            "Real-time camera feed analysis",
            "Google Gemini",
            "OpenAI API access",
            "WebRTC API",
            "Prompt-driven app generation",
            "Claude Artifacts",
            "Interactive applications",
            "GitHub Spark",
            "Universal access to AI models",
            "AI agents and autonomy"
          ],
          "entities": [
            "Google Gemini",
            "ChatGPT",
            "OpenAI",
            "GPT-4",
            "Anthropic",
            "Claude Artifacts",
            "Claude 3.5 Sonnet",
            "GitHub",
            "GitHub Spark",
            "Mistral Chat"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.031746031746031744,
        "overlapped_items": [
          [
            "Anthropic",
            "Anthropic"
          ],
          [
            "Mistral Chat",
            "Mistral"
          ]
        ]
      }
    },
    {
      "id": "c187032c-ad7d-4178-92d1-62038f27bc58",
      "type": "entities_overlap",
      "source": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.013888888888888888,
        "overlapped_items": [
          [
            "Claude",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "54bb4127-4c9e-4e87-ad1f-054faa8e5d3c",
      "type": "entities_overlap",
      "source": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015873015873015872,
        "overlapped_items": [
          [
            "Claude",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "ea44b3dc-3d19-44e8-ba45-e654c377e079",
      "type": "entities_overlap",
      "source": {
        "id": "839b06ee-5823-4146-bb0a-ee391ab6c4fd",
        "properties": {
          "page_content": "“agents” as dependent on AGI itself. A model that’s robust against gulliblity is a very tall order indeed. Evals really matter Anthropic’s Amanda Askell (responsible for much of the work behind Claude’s Character): The boring yet crucial secret behind good system prompts is test-driven development. You don’t write down a system prompt and find ways to test it. You write down tests and find a system prompt that passes them. It’s become abundantly clear over the course of 2024 that writing good automated evals for LLM-powered systems is the skill that’s most needed to build useful applications on top of these models. If you have a strong eval suite you can adopt new models faster, iterate better and build more reliable and useful product features than your competition. Vercel’s Malte Ubl: When @v0 first came out we were paranoid about protecting the prompt with all kinds of pre and post processing complexity. We completely pivoted to let it rip. A prompt without the evals, models, and especially UX is like getting a broken ASML machine without a manual I’m still trying to figure out the best patterns for doing this for my own work. Everyone knows that evals are important, but there remains a lack of great guidance for how to best implement them—I’m tracking this under my evals tag. My SVG pelican riding a bicycle benchmark is a pale imitation of what a real eval suite should look like. Apple Intelligence is bad, Apple’s MLX library is excellent As a Mac user I’ve been feeling a lot better about my choice of platform this year. Last year it felt like my lack of a Linux/Windows machine with an NVIDIA GPU was a huge disadvantage in terms of trying out new models. On paper, a 64GB Mac should be a great machine for running models due to the way the CPU and GPU can share the same memory. In practice, many models are released as model weights and libraries that reward NVIDIA’s CUDA over other platforms. The llama.cpp ecosystem helped a lot here, but the real breakthrough has been Apple’s MLX library, “an array framework for Apple Silicon”. It’s fantastic. Apple’s mlx-lm Python library supports running a wide range of MLX-compatible models on my Mac, with excellent performance. mlx-community on Hugging Face offers more than 1,000 models that have been converted to the necessary format. Prince Canuma’s excellent, fast moving mlx-vlm project brings vision LLMs to Apple Silicon as well. I used that recently to run Qwen’s QvQ. While MLX is a game changer, Apple’s own “Apple Intelligence” features have mostly been a disappointment. I wrote about their initial announcement in June, and I was optimistic that Apple had focused hard on the subset of LLM applications that preserve user privacy and minimize the chance of users getting mislead by confusing features. Now that those features are rolling out they’re pretty weak. As an LLM power-user I know what these models are capable of, and Apple’s LLM features offer a pale imitation of what a frontier LLM can do. Instead we’re getting notification summaries that misrepresent news headlines and writing assistant tools that I’ve not found useful at all. Genmoji are kind of fun though. The rise of inference-scaling “reasoning” models The most interesting development in the final quarter of 2024 was the introduction of a new shape of LLM, exemplified by OpenAI’s o1 models—initially released as o1-preview and o1-mini on September 12th. One way to think about these models is an extension of the chain-of-thought prompting trick, first explored in the May 2022 paper Large Language Models are Zero-Shot Reasoners. This is that trick where, if you get a model to talk out loud about a problem it’s solving, you often get a result which the model would not have achieved otherwise. o1 takes this process and further bakes it into the model itself. The details are somewhat obfuscated: o1 models spend “reasoning tokens” thinking through the problem that are not directly visible to the user (though the ChatGPT UI shows a summary of them), then outputs a final result. The biggest innovation here is that it opens up a new way to scale a model: instead of improving model performance purely through additional compute at training time, models can now take on harder problems by spending more compute on inference. The sequel to o1, o3 (they skipped “o2” for European trademark reasons) was announced on 20th December with an impressive result against the ARC-AGI benchmark, albeit one that likely involved more than $1,000,000 of compute time expense! o3 is expected to ship in January. I doubt many people have real-world problems that would benefit from that level of compute expenditure—I certainly don’t!—but it appears to be a genuine next step in LLM architecture for taking on much harder problems. OpenAI are not the only game in town here. Google released their first entrant in the category, gemini-2.0-flash-thinking-exp, on December 19th. Alibaba’s Qwen team released their QwQ model on November 28th—under an Apache 2.0 license, and that one I could run on my own machine. They followed that up with a vision reasoning model called QvQ on December 24th, which I also ran locally. DeepSeek made their DeepSeek-R1-Lite-Preview model available to try out through their chat interface on November 20th. To understand more about inference scaling I recommend Is AI progress slowing down? by Arvind Narayanan and Sayash Kapoor. Nothing yet from Anthropic or Meta but I would be very surprised if they don’t have their own inference-scaling models in the works. Meta published a relevant paper Training Large Language Models to Reason in a Continuous Latent Space in December. Was the best currently available LLM trained in China for less than $6m? Not quite, but almost! It does make for a great attention-grabbing headline. The big news to end the year was the release of DeepSeek v3—dropped on Hugging Face on Christmas Day without so much as a README file, then followed by documentation and a paper the",
          "entities": [
            "Anthropic",
            "Amanda Askell",
            "Claude",
            "Vercel",
            "Malte Ubl",
            "ASML",
            "Apple",
            "NVIDIA",
            "Hugging Face",
            "OpenAI"
          ],
          "themes": [
            "AGI and gullibility",
            "Test-driven development for system prompts",
            "Automated evaluations for LLMs",
            "Apple's MLX library",
            "Inference-scaling reasoning models",
            "OpenAI's o1 and o3 models",
            "Google's gemini-2.0-flash-thinking-exp",
            "Alibaba's Qwen and QvQ models",
            "DeepSeek models",
            "LLM architecture advancements"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.012345679012345678,
        "overlapped_items": [
          [
            "Anthropic",
            "Anthropic"
          ]
        ]
      }
    },
    {
      "id": "82b0797d-82e1-4198-88bf-6781b82c632c",
      "type": "entities_overlap",
      "source": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.041666666666666664,
        "overlapped_items": [
          [
            "DeepSeek v3",
            "DeepSeek v3"
          ],
          [
            "Meta",
            "Meta"
          ],
          [
            "Llama",
            "Llama 3.3"
          ]
        ]
      }
    },
    {
      "id": "4ffb363f-af7d-488d-80cc-cc92f7d2670b",
      "type": "entities_overlap",
      "source": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015873015873015872,
        "overlapped_items": [
          [
            "Llama",
            "Llama 3"
          ]
        ]
      }
    },
    {
      "id": "2084a6f0-232f-4f42-8aeb-a84b83673b69",
      "type": "entities_overlap",
      "source": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.024691358024691357,
        "overlapped_items": [
          [
            "Meta",
            "Meta"
          ],
          [
            "Google",
            "Google"
          ]
        ]
      }
    },
    {
      "id": "efe46012-f060-4a27-b7ef-72b6982546ce",
      "type": "entities_overlap",
      "source": {
        "id": "4d43c249-88f1-48f7-bc53-62a7fdee02f5",
        "properties": {
          "page_content": "day after that. DeepSeek v3 is a huge 685B parameter model—one of the largest openly licensed models currently available, significantly bigger than the largest of Meta’s Llama series, Llama 3.1 405B. Benchmarks put it up there with Claude 3.5 Sonnet. Vibe benchmarks (aka the Chatbot Arena) currently rank it 7th, just behind the Gemini 2.0 and OpenAI 4o/o1 models. This is by far the highest ranking openly licensed model. The really impressive thing about DeepSeek v3 is the training cost. The model was trained on 2,788,000 H800 GPU hours at an estimated cost of $5,576,000. Llama 3.1 405B trained 30,840,000 GPU hours—11x that used by DeepSeek v3, for a model that benchmarks slightly worse. Those US export regulations on GPUs to China seem to have inspired some very effective training optimizations! The environmental impact got better A welcome result of the increased efficiency of the models—both the hosted ones and the ones I can run locally—is that the energy usage and environmental impact of running a prompt has dropped enormously over the past couple of years. OpenAI themselves are charging 100x less for a prompt compared to the GPT-3 days. I have it on good authority that neither Google Gemini nor Amazon Nova (two of the least expensive model providers) are running prompts at a loss. I think this means that, as individual users, we don’t need to feel any guilt at all for the energy consumed by the vast majority of our prompts. The impact is likely neglible compared to driving a car down the street or maybe even watching a video on YouTube. Likewise, training. DeepSeek v3 training for less than $6m is a fantastic sign that training costs can and should continue to drop. For less efficient models I find it useful to compare their energy usage to commercial flights. The largest Llama 3 model cost about the same as a single digit number of fully loaded passenger flights from New York to London. That’s certainly not nothing, but once trained that model can be used by millions of people at no extra training cost. The environmental impact got much, much worse The much bigger problem here is the enormous competitive buildout of the infrastructure that is imagined to be necessary for these models in the future. Companies like Google, Meta, Microsoft and Amazon are all spending billions of dollars rolling out new datacenters, with a very material impact on the electricity grid and the environment. There’s even talk of spinning up new nuclear power stations, but those can take decades. Is this infrastructure necessary? DeepSeek v3’s $6m training cost and the continued crash in LLM prices might hint that it’s not. But would you want to be the big tech executive that argued NOT to build out this infrastructure only to be proven wrong in a few years’ time? An interesting point of comparison here could be the way railways rolled out around the world in the 1800s. Constructing these required enormous investments and had a massive environmental impact, and many of the lines that were built turned out to be unnecessary—sometimes multiple lines from different companies serving the exact same routes! The resulting bubbles contributed to several financial crashes, see Wikipedia for Panic of 1873, Panic of 1893, Panic of 1901 and the UK’s Railway Mania. They left us with a lot of useful infrastructure and a great deal of bankruptcies and environmental damage. The year of slop 2024 was the year that the word \"slop\" became a term of art. I wrote about this in May, expanding on this tweet by @deepfates: Watching in real time as “slop” becomes a term of art. the way that “spam” became the term for unwanted emails, “slop” is going in the dictionary as the term for unwanted AI generated content I expanded that definition a tiny bit to this: Slop describes AI-generated content that is both unrequested and unreviewed. I ended up getting quoted talking about slop in both the Guardian and the NY Times. Here’s what I said in the NY TImes: Society needs concise ways to talk about modern A.I. — both the positives and the negatives. ‘Ignore that email, it’s spam,’ and ‘Ignore that article, it’s slop,’ are both useful lessons. I love the term “slop” because it so succinctly captures one of the ways we should not be using generative AI! Slop was even in the running for Oxford Word of the Year 2024, but it lost to brain rot. Synthetic training data works great An idea that surprisingly seems to have stuck in the public consciousness is that of “model collapse”. This was first described in the paper The Curse of Recursion: Training on Generated Data Makes Models Forget in May 2023, and repeated in Nature in July 2024 with the more eye-catching headline AI models collapse when trained on recursively generated data. The idea is seductive: as the internet floods with AI-generated slop the models themselves will degenerate, feeding on their own output in a way that leads to their inevitable demise! That’s clearly not happening. Instead, we are seeing AI labs increasingly train on synthetic content—deliberately creating artificial data to help steer their models in the right way. One of the best descriptions I’ve seen of this comes from the Phi-4 technical report, which included this: Synthetic data as a substantial component of pretraining is becoming increasingly common, and the Phi series of models has consistently emphasized the importance of synthetic data. Rather than serving as a cheap substitute for organic data, synthetic data has several direct advantages over organic data. Structured and Gradual Learning. In organic datasets, the relationship between tokens is often complex and indirect. Many reasoning steps may be required to connect the current token to the next, making it challenging for the model to learn effectively from next-token prediction. By contrast, each token generated by a language model is by definition predicted by the preceding tokens, making it easier for a model to follow the resulting",
          "themes": [
            "DeepSeek v3",
            "Large language models",
            "Training cost",
            "Environmental impact",
            "Infrastructure buildout",
            "AI-generated content",
            "Slop",
            "Synthetic training data",
            "Model collapse",
            "Energy efficiency"
          ],
          "entities": [
            "DeepSeek v3",
            "Meta",
            "Llama",
            "Claude 3.5 Sonnet",
            "Gemini 2.0",
            "OpenAI",
            "Google",
            "Amazon",
            "Microsoft",
            "New York"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.027777777777777776,
        "overlapped_items": [
          [
            "Llama",
            "Llama 2"
          ],
          [
            "Google",
            "Google"
          ]
        ]
      }
    },
    {
      "id": "ead3e88d-b6e1-4fb4-a3a0-c96b06613958",
      "type": "entities_overlap",
      "source": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.03571428571428571,
        "overlapped_items": [
          [
            "Llama 3.3",
            "Llama 3"
          ],
          [
            "Claude",
            "Claude"
          ]
        ]
      }
    },
    {
      "id": "4a6b2d66-ee52-434d-a1ac-08935cc308ea",
      "type": "entities_overlap",
      "source": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.013888888888888888,
        "overlapped_items": [
          [
            "Meta",
            "Meta"
          ]
        ]
      }
    },
    {
      "id": "f45d8d3c-5a00-480e-94af-dfa2e93defe1",
      "type": "entities_overlap",
      "source": {
        "id": "b6af891a-090e-4b56-b593-9b1a6cabde5d",
        "properties": {
          "page_content": "reasoning patterns. Another common technique is to use larger models to help create training data for their smaller, cheaper alternatives—a trick used by an increasing number of labs. DeepSeek v3 used “reasoning” data created by DeepSeek-R1. Meta’s Llama 3.3 70B fine-tuning used over 25M synthetically generated examples. Careful design of the training data that goes into an LLM appears to be the entire game for creating these models. The days of just grabbing a full scrape of the web and indiscriminately dumping it into a training run are long gone. LLMs somehow got even harder to use A drum I’ve been banging for a while is that LLMs are power-user tools—they’re chainsaws disguised as kitchen knives. They look deceptively simple to use—how hard can it be to type messages to a chatbot?—but in reality you need a huge depth of both understanding and experience to make the most of them and avoid their many pitfalls. If anything, this problem got worse in 2024. We’ve built computer systems you can talk to in human language, that will answer your questions and usually get them right! ... depending on the question, and how you ask it, and whether it’s accurately reflected in the undocumented and secret training set. The number of available systems has exploded. Different systems have different tools they can apply to your problems—like Python and JavaScript and web search and image generation and maybe even database lookups... so you’d better understand what those tools are, what they can do and how to tell if the LLM used them or not. Did you know ChatGPT has two entirely different ways of running Python now? Want to build a Claude Artifact that talks to an external API? You’d better understand CSP and CORS HTTP headers first. The models may have got more capable, but most of the limitations remained the same. OpenAI’s o1 may finally be able to (mostly) count the Rs in strawberry, but its abilities are still limited by its nature as an LLM and the constraints placed on it by the harness it’s running in. o1 can’t run web searches or use Code Interpreter, but GPT-4o can—both in that same ChatGPT UI. (o1 will pretend to do those things if you ask it to, a regression to the URL hallucinations bug from early 2023). What are we doing about this? Not much. Most users are thrown in at the deep end. The default LLM chat UI is like taking brand new computer users, dropping them into a Linux terminal and expecting them to figure it all out. Meanwhile, it’s increasingly common for end users to develop wildly inaccurate mental models of how these things work and what they are capable of. I’ve seen so many examples of people trying to win an argument with a screenshot from ChatGPT—an inherently ludicrous proposition, given the inherent unreliability of these models crossed with the fact that you can get them to say anything if you prompt them right. There’s a flipside to this too: a lot of better informed people have sworn off LLMs entirely because they can’t see how anyone could benefit from a tool with so many flaws. The key skill in getting the most out of LLMs is learning to work with tech that is both inherently unreliable and incredibly powerful at the same time. This is a decidedly non-obvious skill to acquire! There is so much space for helpful education content here, but we need to do do a lot better than outsourcing it all to AI grifters with bombastic Twitter threads. Knowledge is incredibly unevenly distributed Most people have heard of ChatGPT by now. How many have heard of Claude? The knowledge gap between the people who actively follow this stuff and the 99% of the population who do not is vast. The pace of change doesn’t help either. In just the past month we’ve seen general availability of live interfaces where you can point your phone’s camera at something and talk about it with your voice... and optionally have it pretend to be Santa. Most self-certified nerds haven’t even tried that yet. Given the ongoing (and potential) impact on society that this technology has, I don’t think the size of this gap is healthy. I’d like to see a lot more effort put into improving this. LLMs need better criticism A lot of people absolutely hate this stuff. In some of the spaces I hang out (Mastodon, Bluesky, Lobste.rs, even Hacker News on occasion) even suggesting that “LLMs are useful” can be enough to kick off a huge fight. I get it. There are plenty of reasons to dislike this technology—the environmental impact, the (lack of) ethics of the training data, the lack of reliability, the negative applications, the potential impact on people’s jobs. LLMs absolutely warrant criticism. We need to be talking through these problems, finding ways to mitigate them and helping people learn how to use these tools responsibly in ways where the positive applications outweigh the negative. I like people who are skeptical of this stuff. The hype has been deafening for more than two years now, and there are enormous quantities of snake oil and misinformation out there. A lot of very bad decisions are being made based on that hype. Being critical is a virtue. If we want people with decision-making authority to make good decisions about how to apply these tools we first need to acknowledge that there ARE good applications, and then help explain how to put those into practice while avoiding the many unintiutive traps. (If you still don’t think there are any good applications at all I’m not sure why you made it to this point in the article!) I think telling people that this whole field is environmentally catastrophic plagiarism machines that constantly make things up is doing those people a disservice, no matter how much truth that represents. There is genuine value to be had here, but getting to that value is unintuitive and",
          "entities": [
            "DeepSeek v3",
            "DeepSeek-R1",
            "Meta",
            "Llama 3.3",
            "OpenAI",
            "o1",
            "GPT-4o",
            "ChatGPT",
            "Claude",
            "Mastodon"
          ],
          "themes": [
            "Reasoning patterns",
            "Training data design",
            "Large language models (LLMs)",
            "User experience challenges",
            "Knowledge gap",
            "Criticism of LLMs",
            "Ethics and reliability",
            "Technological impact on society",
            "Education and understanding",
            "Positive and negative applications"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.015625,
        "overlapped_items": [
          [
            "Llama 3.3",
            "Llama 2"
          ]
        ]
      }
    },
    {
      "id": "f76af60b-c4e6-4871-935a-b85597aa341a",
      "type": "entities_overlap",
      "source": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.037037037037037035,
        "overlapped_items": [
          [
            "2024",
            "2024"
          ],
          [
            "2023",
            "2023"
          ]
        ]
      }
    },
    {
      "id": "6cf5f7d1-314e-4059-823e-fbaf1b382682",
      "type": "entities_overlap",
      "source": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "cf5e6873-e081-420c-af50-def2978c3d69",
        "properties": {
          "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
          "themes": [
            "LLMs (Large Language Models)",
            "Black box nature of AI",
            "Prompting challenges",
            "Evaluation of AI models",
            "Vibes Based Development",
            "Gullibility of AI",
            "AI personal assistants",
            "Code generation",
            "Ethics of AI training data",
            "Legal issues in AI"
          ],
          "entities": [
            "LLMs",
            "ChatGPT",
            "December",
            "September",
            "AGI",
            "Python",
            "JavaScript",
            "Chinese",
            "Spanish",
            "English"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.018518518518518517,
        "overlapped_items": [
          [
            "LLMs",
            "LLMs"
          ]
        ]
      }
    },
    {
      "id": "12f4bebc-0389-4d19-a369-4c718c9db7ff",
      "type": "entities_overlap",
      "source": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.10416666666666667,
        "overlapped_items": [
          [
            "Simon Willison",
            "Simon Willison"
          ],
          [
            "Weblog",
            "Weblog"
          ],
          [
            "LLMs",
            "LLMs"
          ],
          [
            "Large Language Models",
            "Large Language Models"
          ],
          [
            "2023",
            "2023"
          ]
        ]
      }
    },
    {
      "id": "2d78f11c-f951-4307-b731-3ffce8bd6024",
      "type": "entities_overlap",
      "source": {
        "id": "1102a3db-2dce-4421-b8f8-b4f783477eb8",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Things we learned about LLMs in 2024 31st December 2024 A lot has happened in the world of Large Language Models over the course of 2024. Here’s a review of things we figured out about the field in the past twelve months, plus my attempt at identifying key themes and pivotal moments. This is a sequel to my review of 2023. In this article: The GPT-4 barrier was comprehensively broken Some of those GPT-4 models run on my laptop LLM prices crashed, thanks to competition and increased efficiency Multimodal vision is common, audio and video are starting to emerge Voice and live camera mode are science fiction come to life",
          "themes": [
            "Large Language Models",
            "GPT-4",
            "Technological advancements",
            "Cost reduction",
            "Multimodal vision",
            "Audio and video integration",
            "Voice technology",
            "Live camera mode",
            "Competition",
            "Increased efficiency"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "LLMs",
            "2024",
            "Large Language Models",
            "2023",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.041666666666666664,
        "overlapped_items": [
          [
            "Simon Willison",
            "Simon Willison"
          ],
          [
            "LLMs",
            "LLMs"
          ]
        ]
      }
    },
    {
      "id": "1bb0eccc-5bc7-47ad-be52-ce147fe8a5f6",
      "type": "entities_overlap",
      "source": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.017857142857142856,
        "overlapped_items": [
          [
            "Artificial Intelligence",
            "Artificial Intelligence"
          ]
        ]
      }
    },
    {
      "id": "31b087ab-f3b6-4b13-8421-eafabc8a59ac",
      "type": "entities_overlap",
      "source": {
        "id": "4b1c8401-ea9b-40a3-a15e-7ac5eaaad354",
        "properties": {
          "page_content": "needs guidance. Those of us who understand this stuff have a duty to help everyone else figure it out. Everything tagged “llms” on my blog in 2024 Because I undoubtedly missed a whole bunch of things, here’s every long-form post I wrote in 2024 that I tagged with llms: January 7th: It’s OK to call it Artificial Intelligence 9th: What I should have said about the term Artificial Intelligence 17th: Talking about Open Source LLMs on Oxide and Friends 26th: LLM 0.13: The annotated release notes February 21st: The killer app of Gemini Pro 1.5 is video March 5th: Prompt injection and jailbreaking are not the same thing 8th: The GPT-4 barrier has finally been broken 22nd: Claude and ChatGPT for ad-hoc sidequests 23rd: Building and testing C extensions for SQLite with ChatGPT Code Interpreter 26th: llm cmd undo last git commit—a new plugin for LLM April 8th: Building files-to-prompt entirely using Claude 3 Opus 10th: Three major LLM releases in 24 hours (plus weeknotes) 17th: AI for Data Journalism: demonstrating what we can do with this stuff right now 22nd: Options for accessing Llama 3 from the terminal using LLM May 8th: Slop is the new name for unwanted AI-generated content 15th: ChatGPT in “4o” mode is not running the new features yet 29th: Training is not the same as chatting: ChatGPT and other LLMs don’t remember everything you say June 6th: Accidental prompt injection against RAG applications 10th: Thoughts on the WWDC 2024 keynote on Apple Intelligence 17th: Language models on the command-line 21st: Building search-based RAG using Claude, Datasette and Val Town 27th: Open challenges for AI engineering July 14th: Imitation Intelligence, my keynote for PyCon US 2024 19th: Weeknotes: GPT-4o mini, LLM 0.15, sqlite-utils 3.37 and building a staging environment August 6th: Weeknotes: a staging environment, a Datasette alpha and a bunch of new LLMs 8th: django-http-debug, a new Django app mostly written by Claude 23rd: Claude’s API now supports CORS requests, enabling client-side applications 26th: Building a tool showing how Gemini Pro can return bounding boxes for objects in images September 6th: Calling LLMs from client-side JavaScript, converting PDFs to HTML + weeknotes 10th: Notes from my appearance on the Software Misadventures Podcast 12th: Notes on OpenAI’s new o1 chain-of-thought models 20th: Notes on using LLMs for code 29th: NotebookLM’s automatically generated podcasts are surprisingly effective 30th: Weeknotes: Three podcasts, two trips and a new plugin system October 1st: OpenAI DevDay 2024 live blog 2nd: OpenAI DevDay: Let’s build developer tools, not digital God 15th: ChatGPT will happily write you a thinly disguised horoscope 17th: Video scraping: extracting JSON data from a 35 second screen capture for less than 1/10th of a cent 18th: Experimenting with audio input and output for the OpenAI Chat Completion API 19th: Running Llama 3.2 Vision and Phi-3.5 Vision on a Mac with mistral.rs 21st: Everything I built with Claude Artifacts this week 22nd: Initial explorations of Anthropic’s new Computer Use capability 24th: Notes on the new Claude analysis JavaScript code execution tool 27th: Run a prompt to generate and execute jq programs using llm-jq 29th: You can now run prompts against images, audio and video in your terminal using LLM 30th: W̶e̶e̶k̶n̶o̶t̶e̶s̶ Monthnotes for October November 4th: Claude 3.5 Haiku 7th: Project: VERDAD—tracking misinformation in radio broadcasts using Gemini 1.5 12th: Qwen2.5-Coder-32B is an LLM that can code well that runs on my Mac 19th: Notes from Bing Chat—Our First Encounter With Manipulative AI 25th: Ask questions of SQLite databases and CSV/JSON files in your terminal December 4th: First impressions of the new Amazon Nova LLMs (via a new llm-bedrock plugin) 7th: Prompts.js 9th: I can now run a GPT-4 class model on my laptop 10th: ChatGPT Canvas can make API requests now, but it’s complicated 11th: Gemini 2.0 Flash: An outstanding multi-modal LLM with a sci-fi streaming mode 19th: Building Python tools with a one-shot prompt using uv run and Claude Projects 19th: Gemini 2.0 Flash “Thinking mode” 20th: December in LLMs has been a lot 20th: Live blog: the 12th day of OpenAI—“Early evals for OpenAI o3” 24th: Trying out QvQ—Qwen’s new visual reasoning model 31st: Things we learned about LLMs in 2024 (This list generated using Django SQL Dashboard with a SQL query written for me by Claude.) Posted 31st December 2024 at 6:07 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Things we learned about LLMs in 2024 by Simon Willison, posted on 31st December 2024. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. google 346 ai 1091 openai 254 generative-ai 936 llms 924 anthropic 114 gemini 55 meta 26 inference-scaling 28 long-context 10 Next: Ending a year long posting streak Previous: Trying out QvQ - Qwen's new visual reasoning model Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Artificial Intelligence",
            "Large Language Models (LLMs)",
            "Open Source",
            "Prompt Injection",
            "ChatGPT",
            "Claude",
            "Gemini",
            "AI Engineering",
            "Video Scraping",
            "Generative AI"
          ],
          "entities": [
            "Artificial Intelligence",
            "Open Source LLMs",
            "Gemini Pro 1.5",
            "GPT-4",
            "Claude",
            "ChatGPT",
            "Llama 3",
            "WWDC 2024",
            "PyCon US 2024",
            "OpenAI"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.017857142857142856,
        "overlapped_items": [
          [
            "Llama 3",
            "Llama 2"
          ]
        ]
      }
    },
    {
      "id": "8d9af24b-3af9-4c4e-9b38-6bda5a8474fa",
      "type": "entities_overlap",
      "source": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.013888888888888888,
        "overlapped_items": [
          [
            "2023",
            "2023"
          ]
        ]
      }
    },
    {
      "id": "86a32f9d-ac61-4300-b7bd-fadf29b5ab60",
      "type": "entities_overlap",
      "source": {
        "id": "c4f41118-67b2-4ee8-9d60-a99c841fa0e0",
        "properties": {
          "page_content": "Code may be the best application The ethics of this space remain diabolically complex My blog in 2023 Here’s the sequel to this post: Things we learned about LLMs in 2024. Large Language Models In the past 24-36 months, our species has discovered that you can take a GIANT corpus of text, run it through a pile of GPUs, and use it to create a fascinating new kind of software. LLMs can do a lot of things. They can answer questions, summarize documents, translate from one language to another, extract information and even write surprisingly competent code. They can also help you cheat at your homework, generate unlimited streams of fake content and be used for all manner of nefarious purposes. So far, I think they’re a net positive. I’ve used them on a personal level to improve my productivity (and entertain myself) in all sorts of different ways. I think people who learn how to use them effectively can gain a significant boost to their quality of life. A lot of people are yet to be sold on their value! Some think their negatives outweigh their positives, some think they are all hot air, and some even think they represent an existential threat to humanity. They’re actually quite easy to build The most surprising thing we’ve learned about LLMs this year is that they’re actually quite easy to build. Intuitively, one would expect that systems this powerful would take millions of lines of complex code. Instead, it turns out a few hundred lines of Python is genuinely enough to train a basic version! What matters most is the training data. You need a lot of data to make these things work, and the quantity and quality of the training data appears to be the most important factor in how good the resulting model is. If you can gather the right data, and afford to pay for the GPUs to train it, you can build an LLM. A year ago, the only organization that had released a generally useful LLM was OpenAI. We’ve now seen better-than-GPT-3 class models produced by Anthropic, Mistral, Google, Meta, EleutherAI, Stability AI, TII in Abu Dhabi (Falcon), Microsoft Research, xAI, Replit, Baidu and a bunch of other organizations. The training cost (hardware and electricity) is still significant—initially millions of dollars, but that seems to have dropped to the tens of thousands already. Microsoft’s Phi-2 claims to have used “14 days on 96 A100 GPUs”, which works out at around $35,000 using current Lambda pricing. So training an LLM still isn’t something a hobbyist can afford, but it’s no longer the sole domain of the super-rich. I like to compare the difficulty of training an LLM to that of building a suspension bridge—not trivial, but hundreds of countries around the world have figured out how to do it. (Correction: Wikipedia’s Suspension bridges by country category lists 44 countries). You can run LLMs on your own devices In January of this year, I thought it would be years before I could run a useful LLM on my own computer. GPT-3 and 3.5 were pretty much the only games in town, and I thought that even if the model weights were available it would take a $10,000+ server to run them. Then in February, Meta released Llama. And a few weeks later in March, Georgi Gerganov released code that got it working on a MacBook. I wrote about how Large language models are having their Stable Diffusion moment, and with hindsight that was a very good call! This unleashed a whirlwind of innovation, which was accelerated further in July when Meta released Llama 2—an improved version which, crucially, included permission for commercial use. Today there are literally thousands of LLMs that can be run locally, on all manner of different devices. I run a bunch of them on my laptop. I run Mistral 7B (a surprisingly great model) on my iPhone. You can install several different apps to get your own, local, completely private LLM. My own LLM project provides a CLI tool for running an array of different models via plugins. You can even run them entirely in your browser using WebAssembly and the latest Chrome! Hobbyists can build their own fine-tuned models I said earlier that building an LLM was still out of reach of hobbyists. That may be true for training from scratch, but fine-tuning one of those models is another matter entirely. There’s now a fascinating ecosystem of people training their own models on top of these foundations, publishing those models, building fine-tuning datasets and sharing those too. The Hugging Face Open LLM Leaderboard is one place that tracks these. I can’t even attempt to count them, and any count would be out-of-date within a few hours. The best overall openly licensed LLM at any time is rarely a foundation model: instead, it’s whichever fine-tuned community model has most recently discovered the best combination of fine-tuning data. This is a huge advantage for open over closed models: the closed, hosted models don’t have thousands of researchers and hobbyists around the world collaborating and competing to improve them. We don’t yet know how to build GPT-4 Frustratingly, despite the enormous leaps ahead we’ve had this year, we are yet to see an alternative model that’s better than GPT-4. OpenAI released GPT-4 in March, though it later turned out we had a sneak peak of it in February when Microsoft used it as part of the new Bing. This may well change in the next few weeks: Google’s Gemini Ultra has big claims, but isn’t yet available for us to try out. The team behind Mistral are working to beat GPT-4 as well, and their track record is already extremely strong considering their first public model only came out in September, and they’ve released two significant improvements since then. Still, I’m surprised that no-one has beaten the now almost year old GPT-4 by now. OpenAI clearly have some substantial tricks that they haven’t shared yet. Vibes",
          "themes": [
            "Large Language Models (LLMs)",
            "Training data",
            "OpenAI",
            "Model training costs",
            "Local deployment of LLMs",
            "Fine-tuning models",
            "Open vs closed models",
            "GPT-4",
            "Innovation in AI",
            "Ethics of AI"
          ],
          "entities": [
            "2023",
            "2024",
            "OpenAI",
            "Anthropic",
            "Mistral",
            "Google",
            "Meta",
            "EleutherAI",
            "Stability AI",
            "TII in Abu Dhabi"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.013888888888888888,
        "overlapped_items": [
          [
            "Google",
            "Google"
          ]
        ]
      }
    },
    {
      "id": "4390fec4-622d-48a6-a273-6dd91688f6aa",
      "type": "entities_overlap",
      "source": {
        "id": "cf5e6873-e081-420c-af50-def2978c3d69",
        "properties": {
          "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
          "themes": [
            "LLMs (Large Language Models)",
            "Black box nature of AI",
            "Prompting challenges",
            "Evaluation of AI models",
            "Vibes Based Development",
            "Gullibility of AI",
            "AI personal assistants",
            "Code generation",
            "Ethics of AI training data",
            "Legal issues in AI"
          ],
          "entities": [
            "LLMs",
            "ChatGPT",
            "December",
            "September",
            "AGI",
            "Python",
            "JavaScript",
            "Chinese",
            "Spanish",
            "English"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.013888888888888888,
        "overlapped_items": [
          [
            "LLMs",
            "LLMs"
          ]
        ]
      }
    },
    {
      "id": "712be171-6158-4007-9b29-69c06f0736c0",
      "type": "entities_overlap",
      "source": {
        "id": "cf5e6873-e081-420c-af50-def2978c3d69",
        "properties": {
          "page_content": "Based Development As a computer scientist and software engineer, LLMs are infuriating. Even the openly licensed ones are still the world’s most convoluted black boxes. We continue to have very little idea what they can do, how exactly they work and how best to control them. I’m used to programming where the computer does exactly what I tell it to do. Prompting an LLM is decidedly not that! The worst part is the challenge of evaluating them. There are plenty of benchmarks, but no benchmark is going to tell you if an LLM actually “feels” right when you try it for a given task. I find I have to work with an LLM for a few weeks in order to get a good intuition for it’s strengths and weaknesses. This greatly limits how many I can evaluate myself! The most frustrating thing for me is at the level of individual prompting. Sometimes I’ll tweak a prompt and capitalize some of the words in it, to emphasize that I really want it to OUTPUT VALID MARKDOWN or similar. Did capitalizing those words make a difference? I still don’t have a good methodology for figuring that out. We’re left with what’s effectively Vibes Based Development. It’s vibes all the way down. I’d love to see us move beyond vibes in 2024! LLMs are really smart, and also really, really dumb On the one hand, we keep on finding new things that LLMs can do that we didn’t expect—and that the people who trained the models didn’t expect either. That’s usually really fun! But on the other hand, the things you sometimes have to do to get the models to behave are often incredibly dumb. Does ChatGPT get lazy in December, because its hidden system prompt includes the current date and its training data shows that people provide less useful answers coming up to the holidays? The honest answer is “maybe”! No-one is entirely sure, but if you give it a different date its answers may skew slightly longer. Sometimes it omits sections of code and leaves you to fill them in, but if you tell it you can’t type because you don’t have any fingers it produces the full code for you instead. There are so many more examples like this. Offer it cash tips for better answers. Tell it your career depends on it. Give it positive reinforcement. It’s all so dumb, but it works! Gullibility is the biggest unsolved problem I coined the term prompt injection in September last year. 15 months later, I regret to say that we’re still no closer to a robust, dependable solution to this problem. I’ve written a ton about this already. Beyond that specific class of security vulnerabilities, I’ve started seeing this as a wider problem of gullibility. Language Models are gullible. They “believe” what we tell them—what’s in their training data, then what’s in the fine-tuning data, then what’s in the prompt. In order to be useful tools for us, we need them to believe what we feed them! But it turns out a lot of the things we want to build need them not to be gullible. Everyone wants an AI personal assistant. If you hired a real-world personal assistant who believed everything that anyone told them, you would quickly find that their ability to positively impact your life was severely limited. A lot of people are excited about AI agents—an infuriatingly vague term that seems to be converging on “AI systems that can go away and act on your behalf”. We’ve been talking about them all year, but I’ve seen few if any examples of them running in production, despite lots of exciting prototypes. I think this is because of gullibility. Can we solve this? Honestly, I’m beginning to suspect that you can’t fully solve gullibility without achieving AGI. So it may be quite a while before those agent dreams can really start to come true! Code may be the best application Over the course of the year, it’s become increasingly clear that writing code is one of the things LLMs are most capable of. If you think about what they do, this isn’t such a big surprise. The grammar rules of programming languages like Python and JavaScript are massively less complicated than the grammar of Chinese, Spanish or English. It’s still astonishing to me how effective they are though. One of the great weaknesses of LLMs is their tendency to hallucinate—to imagine things that don’t correspond to reality. You would expect this to be a particularly bad problem for code—if an LLM hallucinates a method that doesn’t exist, the code should be useless. Except... you can run generated code to see if it’s correct. And with patterns like ChatGPT Code Interpreter the LLM can execute the code itself, process the error message, then rewrite it and keep trying until it works! So hallucination is a much lesser problem for code generation than for anything else. If only we had the equivalent of Code Interpreter for fact-checking natural language! How should we feel about this as software engineers? On the one hand, this feels like a threat: who needs a programmer if ChatGPT can write code for you? On the other hand, as software engineers we are better placed to take advantage of this than anyone else. We’ve all been given weird coding interns—we can use our deep knowledge to prompt them to solve coding problems more effectively than anyone else can. The ethics of this space remain diabolically complex In September last year Andy Baio and I produced the first major story on the unlicensed training data behind Stable Diffusion. Since then, almost every major LLM (and most of the image generation models) have also been trained on unlicensed data. Just this week, the New York Times launched a landmark lawsuit against OpenAI and Microsoft over this issue. The 69 page PDF is genuinely worth reading—especially the first few pages, which lay out the issues in a way that’s surprisingly",
          "themes": [
            "LLMs (Large Language Models)",
            "Black box nature of AI",
            "Prompting challenges",
            "Evaluation of AI models",
            "Vibes Based Development",
            "Gullibility of AI",
            "AI personal assistants",
            "Code generation",
            "Ethics of AI training data",
            "Legal issues in AI"
          ],
          "entities": [
            "LLMs",
            "ChatGPT",
            "December",
            "September",
            "AGI",
            "Python",
            "JavaScript",
            "Chinese",
            "Spanish",
            "English"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.013888888888888888,
        "overlapped_items": [
          [
            "LLMs",
            "LLMs"
          ]
        ]
      }
    },
    {
      "id": "310d88df-cad2-4caa-9d9c-434ae0ae0260",
      "type": "entities_overlap",
      "source": {
        "id": "f261d526-f6a6-42c9-b542-4dc6bbd2d8e4",
        "properties": {
          "page_content": "Simon Willison’s Weblog Subscribe Stuff we figured out about AI in 2023 31st December 2023 2023 was the breakthrough year for Large Language Models (LLMs). I think it’s OK to call these AI—they’re the latest and (currently) most interesting development in the academic field of Artificial Intelligence that dates back to the 1950s. Here’s my attempt to round up the highlights in one place! Large Language Models They’re actually quite easy to build You can run LLMs on your own devices Hobbyists can build their own fine-tuned models We don’t yet know how to build GPT-4 Vibes Based Development LLMs are really smart, and also really, really dumb Gullibility is the biggest unsolved problem",
          "themes": [
            "Large Language Models",
            "Artificial Intelligence",
            "Breakthrough year",
            "Academic development",
            "Building LLMs",
            "Running LLMs on personal devices",
            "Hobbyist model building",
            "GPT-4",
            "Vibes Based Development",
            "Gullibility problem"
          ],
          "entities": [
            "Simon Willison",
            "Weblog",
            "AI",
            "2023",
            "Large Language Models",
            "LLMs",
            "Artificial Intelligence",
            "1950s",
            "GPT-4"
          ]
        },
        "type": "chunk"
      },
      "target": {
        "id": "d7a7b311-f5ac-4185-835a-5c7bc1ac3607",
        "properties": {
          "page_content": "easy to follow. The rest of the document includes some of the clearest explanations of what LLMs are, how they work and how they are built that I’ve read anywhere. The legal arguments here are complex. I’m not a lawyer, but I don’t think this one will be easily decided. Whichever way it goes, I expect this case to have a profound impact on how this technology develops in the future. Law is not ethics. Is it OK to train models on people’s content without their permission, when those models will then be used in ways that compete with those people? As the quality of results produced by AI models has increased over the year, these questions have become even more pressing. The impact on human society in terms of these models is already huge, if difficult to objectively measure. People have certainly lost work to them—anecdotally, I’ve seen this for copywriters, artists and translators. There are a great deal of untold stories here. I’m hoping 2024 sees significant amounts of dedicated journalism on this topic. My blog in 2023 Here’s a tag cloud for content I posted to my blog in 2023 (generated using Django SQL Dashboard): The top five: ai (342), generativeai (300), llms (287), openai (86), chatgpt (78). I’ve written a lot about this stuff! I grabbed a screenshot of my Plausible analytics for the year, fed that to ChatGPT Vision, told it to extract the data into a table, then got it to mix in entry titles (from a SQL query it wrote) and produced this table with it. Here are my top entries this year by amount of traffic: Article Visitors Pageviews Bing: “I will not harm you unless you harm me first” 1.1M 1.3M Leaked Google document: “We Have No Moat, And Neither Does OpenAI” 132k 162k Large language models are having their Stable Diffusion moment 121k 150k Prompt injection: What’s the worst that can happen? 79.8k 95.9k Embeddings: What they are and why they matter 61.7k 79.3k Catching up on the weird world of LLMs 61.6k 85.9k llamafile is the new best way to run an LLM on your own computer 52k 66k Prompt injection explained, with video, slides, and a transcript 51k 61.9k AI-enhanced development makes me more ambitious with my projects 49.6k 60.1k Understanding GPT tokenizers 49.5k 61.1k Exploring GPTs: ChatGPT in a trench coat? 46.4k 58.5k Could you train a ChatGPT-beating model for $85,000 and run it in a browser? 40.5k 49.2k How to implement Q&A against your documentation with GPT3, embeddings and Datasette 37.3k 44.9k Lawyer cites fake cases invented by ChatGPT, judge is not amused 37.1k 47.4k Now add a walrus: Prompt engineering in DALL-E 3 32.8k 41.2k Web LLM runs the vicuna-7b Large Language Model entirely in your browser, and it’s very impressive 32.5k 38.2k ChatGPT can’t access the internet, even though it really looks like it can 30.5k 34.2k Stanford Alpaca, and the acceleration of on-device large language model development 29.7k 35.7k Run Llama 2 on your own Mac using LLM and Homebrew 27.9k 33.6k Midjourney 5.1 26.7k 33.4k Think of language models like ChatGPT as a “calculator for words” 25k 31.8k Multi-modal prompt injection image attacks against GPT-4V 23.7k 27.4k I also gave a bunch of talks and podcast appearances. I’ve started habitually turning my talks into annotated presentations—here are my best from 2023: Prompt injection explained, with video, slides, and a transcript Catching up on the weird world of LLMs Making Large Language Models work for you Open questions for AI engineering Embeddings: What they are and why they matter Financial sustainability for open source projects at GitHub Universe And in podcasts: What AI can do for you on the Theory of Change Working in public on Path to Citus Con LLMs break the internet on the Changelog Talking Large Language Models on Rooftop Ruby Thoughts on the OpenAI board situation on Newsroom Robots Industry’s Tardy Response to the AI Prompt Injection Vulnerability on RedMonk Conversations Posted 31st December 2023 at 11:59 pm · Follow me on Mastodon or Twitter or subscribe to my newsletter More recent articles Using pip to install a Large Language Model that's under 100MB - 7th February 2025 OpenAI o3-mini, now available in LLM - 31st January 2025 A selfish personal argument for releasing code as Open Source - 24th January 2025 This is Stuff we figured out about AI in 2023 by Simon Willison, posted on 31st December 2023. Part of series LLMs annual review Stuff we figured out about AI in 2023 - Dec. 31, 2023, 11:59 p.m. Things we learned about LLMs in 2024 - Dec. 31, 2024, 6:07 p.m. blogging 68 ai 1091 generative-ai 936 llms 924 Next: Tom Scott, and the formidable power of escalating streaks Previous: Last weeknotes of 2023 Colophon © 2002 2003 2004 2005 2006 2007 2008 2009 2010 2011 2012 2013 2014 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025",
          "themes": [
            "Large Language Models (LLMs)",
            "AI ethics and legality",
            "Impact of AI on employment",
            "Generative AI",
            "Prompt injection",
            "AI-enhanced development",
            "OpenAI",
            "AI journalism",
            "AI model training",
            "AI in content creation"
          ],
          "entities": [
            "LLMs",
            "AI",
            "ChatGPT",
            "OpenAI",
            "Google",
            "Stable Diffusion",
            "DALL-E 3",
            "Stanford Alpaca",
            "Llama 2",
            "Simon Willison"
          ]
        },
        "type": "chunk"
      },
      "bidirectional": false,
      "properties": {
        "entities_overlap_score": 0.046875,
        "overlapped_items": [
          [
            "Simon Willison",
            "Simon Willison"
          ],
          [
            "AI",
            "AI"
          ],
          [
            "LLMs",
            "LLMs"
          ]
        ]
      }
    }
  ]
}